
watchable_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006180  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006308  08006308  00016308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006350  08006350  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006350  08006350  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006350  08006350  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006350  08006350  00016350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006358  08006358  00016358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000124  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000194  20000194  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a451  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003226  00000000  00000000  0003a4f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  0003d718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011d0  00000000  00000000  0003e990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ebb0  00000000  00000000  0003fb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011696  00000000  00000000  0005e710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b5129  00000000  00000000  0006fda6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000049  00000000  00000000  00124ecf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056ac  00000000  00000000  00124f18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080062f0 	.word	0x080062f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080062f0 	.word	0x080062f0

080001c8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	4618      	mov	r0, r3
 80001d6:	370c      	adds	r7, #12
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr

080001e0 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	4618      	mov	r0, r3
 80001ec:	370c      	adds	r7, #12
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr

080001f6 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80001f6:	b480      	push	{r7}
 80001f8:	b083      	sub	sp, #12
 80001fa:	af00      	add	r7, sp, #0
 80001fc:	6078      	str	r0, [r7, #4]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	4618      	mov	r0, r3
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr

0800020c <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 800020c:	b480      	push	{r7}
 800020e:	b083      	sub	sp, #12
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	2200      	movs	r2, #0
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4618      	mov	r0, r3
 800021e:	370c      	adds	r7, #12
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr

08000228 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	689b      	ldr	r3, [r3, #8]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d005      	beq.n	8000244 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	689b      	ldr	r3, [r3, #8]
 800023c:	6878      	ldr	r0, [r7, #4]
 800023e:	6879      	ldr	r1, [r7, #4]
 8000240:	2203      	movs	r2, #3
 8000242:	4798      	blx	r3
    }
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	4618      	mov	r0, r3
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}

0800024e <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800024e:	b480      	push	{r7}
 8000250:	b083      	sub	sp, #12
 8000252:	af00      	add	r7, sp, #0
 8000254:	6078      	str	r0, [r7, #4]
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	689b      	ldr	r3, [r3, #8]
 800025a:	2b00      	cmp	r3, #0
 800025c:	bf0c      	ite	eq
 800025e:	2301      	moveq	r3, #1
 8000260:	2300      	movne	r3, #0
 8000262:	b2db      	uxtb	r3, r3
 8000264:	4618      	mov	r0, r3
 8000266:	370c      	adds	r7, #12
 8000268:	46bd      	mov	sp, r7
 800026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026e:	4770      	bx	lr

08000270 <_ZN3LEDC1EP17TIM_HandleTypeDef>:

class LED
{
public:
	LED()=delete;
	LED(TIM_HandleTypeDef* htim) : timer_(htim) {}
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	683a      	ldr	r2, [r7, #0]
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	4618      	mov	r0, r3
 8000284:	370c      	adds	r7, #12
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr

0800028e <_ZN3LED8setColorENS_5ColorE>:

	enum class Color{G = 0, Y = 1, R = 2};

	void setColor(Color color)
 800028e:	b580      	push	{r7, lr}
 8000290:	b082      	sub	sp, #8
 8000292:	af00      	add	r7, sp, #0
 8000294:	6078      	str	r0, [r7, #4]
 8000296:	6039      	str	r1, [r7, #0]
	{
		switch (color) {
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	2b02      	cmp	r3, #2
 800029c:	d01f      	beq.n	80002de <_ZN3LED8setColorENS_5ColorE+0x50>
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	2b02      	cmp	r3, #2
 80002a2:	dc27      	bgt.n	80002f4 <_ZN3LED8setColorENS_5ColorE+0x66>
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d003      	beq.n	80002b2 <_ZN3LED8setColorENS_5ColorE+0x24>
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	d00b      	beq.n	80002c8 <_ZN3LED8setColorENS_5ColorE+0x3a>
			case Color::R:
				__HAL_TIM_SET_COMPARE(timer_, TIM_CHANNEL_1, R_LED_VAL.first);
				__HAL_TIM_SET_COMPARE(timer_, TIM_CHANNEL_2, R_LED_VAL.second);
				break;
			default:
				break;
 80002b0:	e020      	b.n	80002f4 <_ZN3LED8setColorENS_5ColorE+0x66>
				__HAL_TIM_SET_COMPARE(timer_, TIM_CHANNEL_1, G_LED_VAL.first);
 80002b2:	2250      	movs	r2, #80	; 0x50
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(timer_, TIM_CHANNEL_2, G_LED_VAL.second);
 80002bc:	2200      	movs	r2, #0
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 80002c6:	e016      	b.n	80002f6 <_ZN3LED8setColorENS_5ColorE+0x68>
				__HAL_TIM_SET_COMPARE(timer_, TIM_CHANNEL_1, Y_LED_VAL.first);
 80002c8:	2214      	movs	r2, #20
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(timer_, TIM_CHANNEL_2, Y_LED_VAL.second);
 80002d2:	2214      	movs	r2, #20
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 80002dc:	e00b      	b.n	80002f6 <_ZN3LED8setColorENS_5ColorE+0x68>
				__HAL_TIM_SET_COMPARE(timer_, TIM_CHANNEL_1, R_LED_VAL.first);
 80002de:	2200      	movs	r2, #0
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(timer_, TIM_CHANNEL_2, R_LED_VAL.second);
 80002e8:	2214      	movs	r2, #20
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 80002f2:	e000      	b.n	80002f6 <_ZN3LED8setColorENS_5ColorE+0x68>
				break;
 80002f4:	bf00      	nop
		}

		HAL_TIM_PWM_Start(timer_, TIM_CHANNEL_1);
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	2100      	movs	r1, #0
 80002fc:	4618      	mov	r0, r3
 80002fe:	f003 fe43 	bl	8003f88 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(timer_, TIM_CHANNEL_2);
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	2104      	movs	r1, #4
 8000308:	4618      	mov	r0, r3
 800030a:	f003 fe3d 	bl	8003f88 <HAL_TIM_PWM_Start>
	}
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}

08000316 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8000316:	b480      	push	{r7}
 8000318:	b083      	sub	sp, #12
 800031a:	af00      	add	r7, sp, #0
 800031c:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2200      	movs	r2, #0
 8000322:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8000324:	687a      	ldr	r2, [r7, #4]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	2200      	movs	r2, #0
 8000334:	611a      	str	r2, [r3, #16]
    }
 8000336:	bf00      	nop
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr

08000342 <_ZNSt8functionIFvvEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8000342:	b580      	push	{r7, lr}
 8000344:	b082      	sub	sp, #8
 8000346:	af00      	add	r7, sp, #0
 8000348:	6078      	str	r0, [r7, #4]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4618      	mov	r0, r3
 800034e:	f7ff ff6b 	bl	8000228 <_ZNSt14_Function_baseD1Ev>
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4618      	mov	r0, r3
 8000356:	3708      	adds	r7, #8
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <_ZNSt4pairIP17InterruptAccessorSt8functionIFvvEEED1Ev>:
   *  @tparam _T2  Type of second object.
   *
   *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
   */
  template<typename _T1, typename _T2>
    struct pair
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	3304      	adds	r3, #4
 8000368:	4618      	mov	r0, r3
 800036a:	f7ff ffea 	bl	8000342 <_ZNSt8functionIFvvEED1Ev>
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4618      	mov	r0, r3
 8000372:	3708      	adds	r7, #8
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <_ZN17InterruptAccessorC1ERSt3mapIKPS_KSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEERS6_>:

class InterruptAccessor
{
public:
	using Map = std::map<InterruptAccessor* const,const std::function<void(void)>>;
	InterruptAccessor(Map& it_func_map, const std::function<void(void)>& func) :
 8000378:	b590      	push	{r4, r7, lr}
 800037a:	b08d      	sub	sp, #52	; 0x34
 800037c:	af00      	add	r7, sp, #0
 800037e:	60f8      	str	r0, [r7, #12]
 8000380:	60b9      	str	r1, [r7, #8]
 8000382:	607a      	str	r2, [r7, #4]
		it_func_map_(it_func_map) { it_func_map_.insert(std::make_pair(this, func)); }
 8000384:	4a11      	ldr	r2, [pc, #68]	; (80003cc <_ZN17InterruptAccessorC1ERSt3mapIKPS_KSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEERS6_+0x54>)
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	68ba      	ldr	r2, [r7, #8]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	685c      	ldr	r4, [r3, #4]
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000398:	f107 0318 	add.w	r3, r7, #24
 800039c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	4618      	mov	r0, r3
 80003a4:	f000 fa5f 	bl	8000866 <_ZSt9make_pairIP17InterruptAccessorRKSt8functionIFvvEEESt4pairINSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS8_INS9_IT0_E4typeEE6__typeEEOSA_OSF_>
 80003a8:	f107 0310 	add.w	r3, r7, #16
 80003ac:	f107 0218 	add.w	r2, r7, #24
 80003b0:	4621      	mov	r1, r4
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 fa6e 	bl	8000894 <_ZNSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEE6insertIS9_IS1_S5_EEENSt9enable_ifIXsrSt16is_constructibleISA_JT_EE5valueES9_ISt17_Rb_tree_iteratorISA_EbEE4typeEOSH_>
 80003b8:	f107 0318 	add.w	r3, r7, #24
 80003bc:	4618      	mov	r0, r3
 80003be:	f7ff ffcd 	bl	800035c <_ZNSt4pairIP17InterruptAccessorSt8functionIFvvEEED1Ev>
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	4618      	mov	r0, r3
 80003c6:	3734      	adds	r7, #52	; 0x34
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd90      	pop	{r4, r7, pc}
 80003cc:	08006310 	.word	0x08006310

080003d0 <_ZN17InterruptAccessorD1Ev>:
	virtual ~InterruptAccessor(){ it_func_map_.erase(this); }
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	4a08      	ldr	r2, [pc, #32]	; (80003fc <_ZN17InterruptAccessorD1Ev+0x2c>)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	685a      	ldr	r2, [r3, #4]
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	60fb      	str	r3, [r7, #12]
 80003e6:	f107 030c 	add.w	r3, r7, #12
 80003ea:	4619      	mov	r1, r3
 80003ec:	4610      	mov	r0, r2
 80003ee:	f000 fa66 	bl	80008be <_ZNSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEE5eraseERS2_>
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4618      	mov	r0, r3
 80003f6:	3710      	adds	r7, #16
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	08006310 	.word	0x08006310

08000400 <_ZN17InterruptAccessorD0Ev>:
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	6878      	ldr	r0, [r7, #4]
 800040a:	f7ff ffe1 	bl	80003d0 <_ZN17InterruptAccessorD1Ev>
 800040e:	2108      	movs	r1, #8
 8000410:	6878      	ldr	r0, [r7, #4]
 8000412:	f005 fc25 	bl	8005c60 <_ZdlPvj>
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4618      	mov	r0, r3
 800041a:	3708      	adds	r7, #8
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}

08000420 <_ZZ4mainENKUlvE_clEv>:
  /* USER CODE BEGIN 2 */
  LED led(&htim1);
  //UART uart(&huart1, USART1_IRQ_Accessor);
  //RPLIDER lider(uart, SysTick_Accessor);

  std::function<void(void)> systick_func = [&]()
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
		  {
	  	  	  static uint16_t tim_cnt = 0;
	  	  	  static uint8_t count = 0;
	  	  	  if(tim_cnt >= 1000)
 8000428:	4b1d      	ldr	r3, [pc, #116]	; (80004a0 <_ZZ4mainENKUlvE_clEv+0x80>)
 800042a:	881b      	ldrh	r3, [r3, #0]
 800042c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000430:	d32c      	bcc.n	800048c <_ZZ4mainENKUlvE_clEv+0x6c>
	  	  	  {
				  switch(count)
 8000432:	4b1c      	ldr	r3, [pc, #112]	; (80004a4 <_ZZ4mainENKUlvE_clEv+0x84>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	2b02      	cmp	r3, #2
 8000438:	d01a      	beq.n	8000470 <_ZZ4mainENKUlvE_clEv+0x50>
 800043a:	2b02      	cmp	r3, #2
 800043c:	dc22      	bgt.n	8000484 <_ZZ4mainENKUlvE_clEv+0x64>
 800043e:	2b00      	cmp	r3, #0
 8000440:	d002      	beq.n	8000448 <_ZZ4mainENKUlvE_clEv+0x28>
 8000442:	2b01      	cmp	r3, #1
 8000444:	d00a      	beq.n	800045c <_ZZ4mainENKUlvE_clEv+0x3c>
 8000446:	e01d      	b.n	8000484 <_ZZ4mainENKUlvE_clEv+0x64>
				  {
				  case 0:
					  led.setColor(LED::Color::R);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	2102      	movs	r1, #2
 800044e:	4618      	mov	r0, r3
 8000450:	f7ff ff1d 	bl	800028e <_ZN3LED8setColorENS_5ColorE>
					  count = 1;
 8000454:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <_ZZ4mainENKUlvE_clEv+0x84>)
 8000456:	2201      	movs	r2, #1
 8000458:	701a      	strb	r2, [r3, #0]
					  break;
 800045a:	e013      	b.n	8000484 <_ZZ4mainENKUlvE_clEv+0x64>
					  led.setColor(LED::Color::R);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
				  case 1:
					  led.setColor(LED::Color::Y);
 8000460:	2101      	movs	r1, #1
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ff13 	bl	800028e <_ZN3LED8setColorENS_5ColorE>
					  count = 2;
 8000468:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <_ZZ4mainENKUlvE_clEv+0x84>)
 800046a:	2202      	movs	r2, #2
 800046c:	701a      	strb	r2, [r3, #0]
					  break;
 800046e:	e009      	b.n	8000484 <_ZZ4mainENKUlvE_clEv+0x64>
					  led.setColor(LED::Color::R);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
				  case 2:
					  led.setColor(LED::Color::G);
 8000474:	2100      	movs	r1, #0
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff ff09 	bl	800028e <_ZN3LED8setColorENS_5ColorE>
					  count = 0;
 800047c:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <_ZZ4mainENKUlvE_clEv+0x84>)
 800047e:	2200      	movs	r2, #0
 8000480:	701a      	strb	r2, [r3, #0]
					  break;
 8000482:	bf00      	nop

				  }
				  tim_cnt = 0;
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <_ZZ4mainENKUlvE_clEv+0x80>)
 8000486:	2200      	movs	r2, #0
 8000488:	801a      	strh	r2, [r3, #0]
	  	  	  }
	  	  	  else
	  	  	  {
	  	  		  //led.setColor(LED::Color::R);
	  	  	  }*/
		  };
 800048a:	e005      	b.n	8000498 <_ZZ4mainENKUlvE_clEv+0x78>
	  	  		  ++tim_cnt;
 800048c:	4b04      	ldr	r3, [pc, #16]	; (80004a0 <_ZZ4mainENKUlvE_clEv+0x80>)
 800048e:	881b      	ldrh	r3, [r3, #0]
 8000490:	3301      	adds	r3, #1
 8000492:	b29a      	uxth	r2, r3
 8000494:	4b02      	ldr	r3, [pc, #8]	; (80004a0 <_ZZ4mainENKUlvE_clEv+0x80>)
 8000496:	801a      	strh	r2, [r3, #0]
		  };
 8000498:	bf00      	nop
 800049a:	3708      	adds	r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	2000015c 	.word	0x2000015c
 80004a4:	2000015e 	.word	0x2000015e

080004a8 <main>:
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0
  HAL_Init();
 80004ae:	f001 fdb9 	bl	8002024 <HAL_Init>
  SystemClock_Config();
 80004b2:	f000 f821 	bl	80004f8 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 80004b6:	f000 f997 	bl	80007e8 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 80004ba:	f000 f961 	bl	8000780 <_ZL19MX_USART1_UART_Initv>
  MX_TIM1_Init();
 80004be:	f000 f885 	bl	80005cc <_ZL12MX_TIM1_Initv>
  LED led(&htim1);
 80004c2:	f107 031c 	add.w	r3, r7, #28
 80004c6:	490a      	ldr	r1, [pc, #40]	; (80004f0 <main+0x48>)
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff fed1 	bl	8000270 <_ZN3LEDC1EP17TIM_HandleTypeDef>
		  };
 80004ce:	f107 031c 	add.w	r3, r7, #28
 80004d2:	461a      	mov	r2, r3
 80004d4:	f107 030c 	add.w	r3, r7, #12
 80004d8:	4611      	mov	r1, r2
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 f9fe 	bl	80008dc <_ZNSt8functionIFvvEEC1IZ4mainEUlvE_vvEET_>
  //led.setColor(LED::Color::G);
  InterruptAccessor systick_it(SysTick_Accessor, systick_func);
 80004e0:	f107 020c 	add.w	r2, r7, #12
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	4903      	ldr	r1, [pc, #12]	; (80004f4 <main+0x4c>)
 80004e8:	4618      	mov	r0, r3
 80004ea:	f7ff ff45 	bl	8000378 <_ZN17InterruptAccessorC1ERSt3mapIKPS_KSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEERS6_>
  //lider.transmitCmd(RPLIDER::command::SCAN);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ee:	e7fe      	b.n	80004ee <main+0x46>
 80004f0:	2000008c 	.word	0x2000008c
 80004f4:	20000160 	.word	0x20000160

080004f8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b096      	sub	sp, #88	; 0x58
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000502:	2228      	movs	r2, #40	; 0x28
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f005 fda8 	bl	800605c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 031c 	add.w	r3, r7, #28
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]
 800052a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800052c:	2302      	movs	r3, #2
 800052e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000530:	2301      	movs	r3, #1
 8000532:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000534:	2310      	movs	r3, #16
 8000536:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000538:	2302      	movs	r3, #2
 800053a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800053c:	2300      	movs	r3, #0
 800053e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000540:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000544:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000546:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800054a:	4618      	mov	r0, r3
 800054c:	f002 f8ca 	bl	80026e4 <HAL_RCC_OscConfig>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	bf14      	ite	ne
 8000556:	2301      	movne	r3, #1
 8000558:	2300      	moveq	r3, #0
 800055a:	b2db      	uxtb	r3, r3
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <_Z18SystemClock_Configv+0x6c>
  {
    Error_Handler();
 8000560:	f000 f97a 	bl	8000858 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000564:	230f      	movs	r3, #15
 8000566:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000568:	2302      	movs	r3, #2
 800056a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000574:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800057a:	f107 031c 	add.w	r3, r7, #28
 800057e:	2102      	movs	r1, #2
 8000580:	4618      	mov	r0, r3
 8000582:	f003 f8ed 	bl	8003760 <HAL_RCC_ClockConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	bf14      	ite	ne
 800058c:	2301      	movne	r3, #1
 800058e:	2300      	moveq	r3, #0
 8000590:	b2db      	uxtb	r3, r3
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8000596:	f000 f95f 	bl	8000858 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 800059a:	f241 0301 	movw	r3, #4097	; 0x1001
 800059e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	4618      	mov	r0, r3
 80005ac:	f003 fb0e 	bl	8003bcc <HAL_RCCEx_PeriphCLKConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	bf14      	ite	ne
 80005b6:	2301      	movne	r3, #1
 80005b8:	2300      	moveq	r3, #0
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 80005c0:	f000 f94a 	bl	8000858 <Error_Handler>
  }
}
 80005c4:	bf00      	nop
 80005c6:	3758      	adds	r7, #88	; 0x58
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b09a      	sub	sp, #104	; 0x68
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
 80005fc:	615a      	str	r2, [r3, #20]
 80005fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	222c      	movs	r2, #44	; 0x2c
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f005 fd28 	bl	800605c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800060c:	4b5a      	ldr	r3, [pc, #360]	; (8000778 <_ZL12MX_TIM1_Initv+0x1ac>)
 800060e:	4a5b      	ldr	r2, [pc, #364]	; (800077c <_ZL12MX_TIM1_Initv+0x1b0>)
 8000610:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 250;
 8000612:	4b59      	ldr	r3, [pc, #356]	; (8000778 <_ZL12MX_TIM1_Initv+0x1ac>)
 8000614:	22fa      	movs	r2, #250	; 0xfa
 8000616:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000618:	4b57      	ldr	r3, [pc, #348]	; (8000778 <_ZL12MX_TIM1_Initv+0x1ac>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 800061e:	4b56      	ldr	r3, [pc, #344]	; (8000778 <_ZL12MX_TIM1_Initv+0x1ac>)
 8000620:	22ff      	movs	r2, #255	; 0xff
 8000622:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000624:	4b54      	ldr	r3, [pc, #336]	; (8000778 <_ZL12MX_TIM1_Initv+0x1ac>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800062a:	4b53      	ldr	r3, [pc, #332]	; (8000778 <_ZL12MX_TIM1_Initv+0x1ac>)
 800062c:	2200      	movs	r2, #0
 800062e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000630:	4b51      	ldr	r3, [pc, #324]	; (8000778 <_ZL12MX_TIM1_Initv+0x1ac>)
 8000632:	2280      	movs	r2, #128	; 0x80
 8000634:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000636:	4850      	ldr	r0, [pc, #320]	; (8000778 <_ZL12MX_TIM1_Initv+0x1ac>)
 8000638:	f003 fbee 	bl	8003e18 <HAL_TIM_Base_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	bf14      	ite	ne
 8000642:	2301      	movne	r3, #1
 8000644:	2300      	moveq	r3, #0
 8000646:	b2db      	uxtb	r3, r3
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 800064c:	f000 f904 	bl	8000858 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000654:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000656:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800065a:	4619      	mov	r1, r3
 800065c:	4846      	ldr	r0, [pc, #280]	; (8000778 <_ZL12MX_TIM1_Initv+0x1ac>)
 800065e:	f003 fe93 	bl	8004388 <HAL_TIM_ConfigClockSource>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	bf14      	ite	ne
 8000668:	2301      	movne	r3, #1
 800066a:	2300      	moveq	r3, #0
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 8000672:	f000 f8f1 	bl	8000858 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000676:	4840      	ldr	r0, [pc, #256]	; (8000778 <_ZL12MX_TIM1_Initv+0x1ac>)
 8000678:	f003 fc25 	bl	8003ec6 <HAL_TIM_PWM_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	bf14      	ite	ne
 8000682:	2301      	movne	r3, #1
 8000684:	2300      	moveq	r3, #0
 8000686:	b2db      	uxtb	r3, r3
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 800068c:	f000 f8e4 	bl	8000858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000690:	2300      	movs	r3, #0
 8000692:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000694:	2300      	movs	r3, #0
 8000696:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000698:	2300      	movs	r3, #0
 800069a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800069c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006a0:	4619      	mov	r1, r3
 80006a2:	4835      	ldr	r0, [pc, #212]	; (8000778 <_ZL12MX_TIM1_Initv+0x1ac>)
 80006a4:	f004 fb18 	bl	8004cd8 <HAL_TIMEx_MasterConfigSynchronization>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	bf14      	ite	ne
 80006ae:	2301      	movne	r3, #1
 80006b0:	2300      	moveq	r3, #0
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <_ZL12MX_TIM1_Initv+0xf0>
  {
    Error_Handler();
 80006b8:	f000 f8ce 	bl	8000858 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006bc:	2360      	movs	r3, #96	; 0x60
 80006be:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006d0:	2300      	movs	r3, #0
 80006d2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006d4:	2300      	movs	r3, #0
 80006d6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006dc:	2200      	movs	r2, #0
 80006de:	4619      	mov	r1, r3
 80006e0:	4825      	ldr	r0, [pc, #148]	; (8000778 <_ZL12MX_TIM1_Initv+0x1ac>)
 80006e2:	f003 fd3d 	bl	8004160 <HAL_TIM_PWM_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	bf14      	ite	ne
 80006ec:	2301      	movne	r3, #1
 80006ee:	2300      	moveq	r3, #0
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <_ZL12MX_TIM1_Initv+0x12e>
  {
    Error_Handler();
 80006f6:	f000 f8af 	bl	8000858 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006fe:	2204      	movs	r2, #4
 8000700:	4619      	mov	r1, r3
 8000702:	481d      	ldr	r0, [pc, #116]	; (8000778 <_ZL12MX_TIM1_Initv+0x1ac>)
 8000704:	f003 fd2c 	bl	8004160 <HAL_TIM_PWM_ConfigChannel>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	bf14      	ite	ne
 800070e:	2301      	movne	r3, #1
 8000710:	2300      	moveq	r3, #0
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <_ZL12MX_TIM1_Initv+0x150>
  {
    Error_Handler();
 8000718:	f000 f89e 	bl	8000858 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000734:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800073a:	2300      	movs	r3, #0
 800073c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800073e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000748:	2300      	movs	r3, #0
 800074a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	4619      	mov	r1, r3
 8000750:	4809      	ldr	r0, [pc, #36]	; (8000778 <_ZL12MX_TIM1_Initv+0x1ac>)
 8000752:	f004 fb2f 	bl	8004db4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	bf14      	ite	ne
 800075c:	2301      	movne	r3, #1
 800075e:	2300      	moveq	r3, #0
 8000760:	b2db      	uxtb	r3, r3
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <_ZL12MX_TIM1_Initv+0x19e>
  {
    Error_Handler();
 8000766:	f000 f877 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800076a:	4803      	ldr	r0, [pc, #12]	; (8000778 <_ZL12MX_TIM1_Initv+0x1ac>)
 800076c:	f001 f986 	bl	8001a7c <HAL_TIM_MspPostInit>

}
 8000770:	bf00      	nop
 8000772:	3768      	adds	r7, #104	; 0x68
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	2000008c 	.word	0x2000008c
 800077c:	40012c00 	.word	0x40012c00

08000780 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000784:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000786:	4a17      	ldr	r2, [pc, #92]	; (80007e4 <_ZL19MX_USART1_UART_Initv+0x64>)
 8000788:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <_ZL19MX_USART1_UART_Initv+0x60>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <_ZL19MX_USART1_UART_Initv+0x60>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <_ZL19MX_USART1_UART_Initv+0x60>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <_ZL19MX_USART1_UART_Initv+0x60>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <_ZL19MX_USART1_UART_Initv+0x60>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <_ZL19MX_USART1_UART_Initv+0x60>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b6:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <_ZL19MX_USART1_UART_Initv+0x60>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007bc:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <_ZL19MX_USART1_UART_Initv+0x60>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007c2:	4807      	ldr	r0, [pc, #28]	; (80007e0 <_ZL19MX_USART1_UART_Initv+0x60>)
 80007c4:	f004 fb6e 	bl	8004ea4 <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	bf14      	ite	ne
 80007ce:	2301      	movne	r3, #1
 80007d0:	2300      	moveq	r3, #0
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 80007d8:	f000 f83e 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200000d8 	.word	0x200000d8
 80007e4:	40013800 	.word	0x40013800

080007e8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <_ZL12MX_GPIO_Initv+0x68>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	4a13      	ldr	r2, [pc, #76]	; (8000850 <_ZL12MX_GPIO_Initv+0x68>)
 8000804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000808:	6153      	str	r3, [r2, #20]
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <_ZL12MX_GPIO_Initv+0x68>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <_ZL12MX_GPIO_Initv+0x68>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	4a0d      	ldr	r2, [pc, #52]	; (8000850 <_ZL12MX_GPIO_Initv+0x68>)
 800081c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000820:	6153      	str	r3, [r2, #20]
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <_ZL12MX_GPIO_Initv+0x68>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800082e:	2301      	movs	r3, #1
 8000830:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	4619      	mov	r1, r3
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <_ZL12MX_GPIO_Initv+0x6c>)
 8000842:	f001 fddd 	bl	8002400 <HAL_GPIO_Init>

}
 8000846:	bf00      	nop
 8000848:	3720      	adds	r7, #32
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000
 8000854:	48000400 	.word	0x48000400

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr

08000866 <_ZSt9make_pairIP17InterruptAccessorRKSt8functionIFvvEEESt4pairINSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS8_INS9_IT0_E4typeEE6__typeEEOSA_OSF_>:
#if __cplusplus >= 201103L
  // NB: DR 706.
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
 8000866:	b590      	push	{r4, r7, lr}
 8000868:	b085      	sub	sp, #20
 800086a:	af00      	add	r7, sp, #0
 800086c:	60f8      	str	r0, [r7, #12]
 800086e:	60b9      	str	r1, [r7, #8]
 8000870:	607a      	str	r2, [r7, #4]
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> 	      __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 8000872:	68b8      	ldr	r0, [r7, #8]
 8000874:	f000 f86e 	bl	8000954 <_ZSt7forwardIP17InterruptAccessorEOT_RNSt16remove_referenceIS2_E4typeE>
 8000878:	4604      	mov	r4, r0
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f000 f875 	bl	800096a <_ZSt7forwardIRKSt8functionIFvvEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8000880:	4603      	mov	r3, r0
 8000882:	461a      	mov	r2, r3
 8000884:	4621      	mov	r1, r4
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	f000 f87a 	bl	8000980 <_ZNSt4pairIP17InterruptAccessorSt8functionIFvvEEEC1IS1_Lb1EEEOT_RKS4_>
    }
 800088c:	68f8      	ldr	r0, [r7, #12]
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	bd90      	pop	{r4, r7, pc}

08000894 <_ZNSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEE6insertIS9_IS1_S5_EEENSt9enable_ifIXsrSt16is_constructibleISA_JT_EE5valueES9_ISt17_Rb_tree_iteratorISA_EbEE4typeEOSH_>:
      { return _M_t._M_insert_unique(std::move(__x)); }

      template<typename _Pair>
	__enable_if_t<is_constructible<value_type, _Pair>::value,
		      pair<iterator, bool>>
	insert(_Pair&& __x)
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
	{ return _M_t._M_emplace_unique(std::forward<_Pair>(__x)); }
 80008a0:	68bc      	ldr	r4, [r7, #8]
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f000 f884 	bl	80009b0 <_ZSt7forwardISt4pairIP17InterruptAccessorSt8functionIFvvEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80008a8:	4602      	mov	r2, r0
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	4621      	mov	r1, r4
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f889 	bl	80009c6 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE17_M_emplace_uniqueIJS3_IS1_S6_EEEES3_ISt17_Rb_tree_iteratorIS8_EbEDpOT_>
 80008b4:	bf00      	nop
 80008b6:	68f8      	ldr	r0, [r7, #12]
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd90      	pop	{r4, r7, pc}

080008be <_ZNSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEE5eraseERS2_>:
       *  Note that this function only erases the element, and that if
       *  the element is itself a pointer, the pointed-to memory is not touched
       *  in any way.  Managing the pointer is the user's responsibility.
       */
      size_type
      erase(const key_type& __x)
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
 80008c6:	6039      	str	r1, [r7, #0]
      { return _M_t.erase(__x); }
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6839      	ldr	r1, [r7, #0]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 f8c4 	bl	8000a5a <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE5eraseERS2_>
 80008d2:	4603      	mov	r3, r0
 80008d4:	4618      	mov	r0, r3
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <_ZNSt8functionIFvvEEC1IZ4mainEUlvE_vvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fc8f 	bl	800020c <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 80008ee:	463b      	mov	r3, r7
 80008f0:	4618      	mov	r0, r3
 80008f2:	f000 f8e2 	bl	8000aba <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E21_M_not_empty_functionIS1_EEbRKT_>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d00f      	beq.n	800091c <_ZNSt8functionIFvvEEC1IZ4mainEUlvE_vvEET_+0x40>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 80008fc:	687c      	ldr	r4, [r7, #4]
 80008fe:	463b      	mov	r3, r7
 8000900:	4618      	mov	r0, r3
 8000902:	f000 f8e5 	bl	8000ad0 <_ZSt4moveIRZ4mainEUlvE_EONSt16remove_referenceIT_E4typeEOS3_>
 8000906:	4603      	mov	r3, r0
 8000908:	4619      	mov	r1, r3
 800090a:	4620      	mov	r0, r4
 800090c:	f000 f8eb 	bl	8000ae6 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E15_M_init_functorERSt9_Any_dataOS1_>
	    _M_invoker = &_My_handler::_M_invoke;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4a05      	ldr	r2, [pc, #20]	; (8000928 <_ZNSt8functionIFvvEEC1IZ4mainEUlvE_vvEET_+0x4c>)
 8000914:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <_ZNSt8functionIFvvEEC1IZ4mainEUlvE_vvEET_+0x50>)
 800091a:	609a      	str	r2, [r3, #8]
	  }
      }
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4618      	mov	r0, r3
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	bd90      	pop	{r4, r7, pc}
 8000926:	bf00      	nop
 8000928:	08000b0b 	.word	0x08000b0b
 800092c:	08000b29 	.word	0x08000b29

08000930 <_ZNSt8functionIFvvEEC1EOS1_>:
      function(function&& __x) noexcept : _Function_base()
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fc65 	bl	800020c <_ZNSt14_Function_baseC1Ev>
	__x.swap(*this);
 8000942:	6879      	ldr	r1, [r7, #4]
 8000944:	6838      	ldr	r0, [r7, #0]
 8000946:	f000 f90e 	bl	8000b66 <_ZNSt8functionIFvvEE4swapERS1_>
      }
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4618      	mov	r0, r3
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <_ZSt7forwardIP17InterruptAccessorEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4618      	mov	r0, r3
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <_ZSt7forwardIRKSt8functionIFvvEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800096a:	b480      	push	{r7}
 800096c:	b083      	sub	sp, #12
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4618      	mov	r0, r3
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <_ZNSt4pairIP17InterruptAccessorSt8functionIFvvEEEC1IS1_Lb1EEEOT_RKS4_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 800098c:	68b8      	ldr	r0, [r7, #8]
 800098e:	f7ff ffe1 	bl	8000954 <_ZSt7forwardIP17InterruptAccessorEOT_RNSt16remove_referenceIS2_E4typeE>
 8000992:	4603      	mov	r3, r0
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	3304      	adds	r3, #4
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 f901 	bl	8000ba8 <_ZNSt8functionIFvvEEC1ERKS1_>
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	4618      	mov	r0, r3
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <_ZSt7forwardISt4pairIP17InterruptAccessorSt8functionIFvvEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4618      	mov	r0, r3
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE17_M_emplace_uniqueIJS3_IS1_S6_EEEES3_ISt17_Rb_tree_iteratorIS8_EbEDpOT_>:
  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			     _Compare, _Alloc>::iterator, bool>
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b08c      	sub	sp, #48	; 0x30
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
      _M_emplace_unique(_Args&&... __args)
      {
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff ffec 	bl	80009b0 <_ZSt7forwardISt4pairIP17InterruptAccessorSt8functionIFvvEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80009d8:	4603      	mov	r3, r0
 80009da:	4619      	mov	r1, r3
 80009dc:	68b8      	ldr	r0, [r7, #8]
 80009de:	f000 f905 	bl	8000bec <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_create_nodeIJS3_IS1_S6_EEEEPSt13_Rb_tree_nodeIS8_EDpOT_>
 80009e2:	62f8      	str	r0, [r7, #44]	; 0x2c

	__try
	  {
	    typedef pair<iterator, bool> _Res;
	    auto __res = _M_get_insert_unique_pos(_S_key(__z));
 80009e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80009e6:	f000 f99d 	bl	8000d24 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 80009ea:	4602      	mov	r2, r0
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	68b9      	ldr	r1, [r7, #8]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 f911 	bl	8000c1a <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS2_>
	    if (__res.second)
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d013      	beq.n	8000a26 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE17_M_emplace_uniqueIJS3_IS1_S6_EEEES3_ISt17_Rb_tree_iteratorIS8_EbEDpOT_+0x60>
	      return _Res(_M_insert_node(__res.first, __res.second, __z), true);
 80009fe:	6979      	ldr	r1, [r7, #20]
 8000a00:	69ba      	ldr	r2, [r7, #24]
 8000a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a04:	68b8      	ldr	r0, [r7, #8]
 8000a06:	f000 f9a0 	bl	8000d4a <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	61fb      	str	r3, [r7, #28]
 8000a0e:	2301      	movs	r3, #1
 8000a10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000a14:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	68f8      	ldr	r0, [r7, #12]
 8000a20:	f000 f9d0 	bl	8000dc4 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKP17InterruptAccessorKSt8functionIFvvEEEEbEC1IS9_bLb1EEEOT_OT0_>
	__catch(...)
	  {
	    _M_drop_node(__z);
	    __throw_exception_again;
	  }
      }
 8000a24:	e015      	b.n	8000a52 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE17_M_emplace_uniqueIJS3_IS1_S6_EEEES3_ISt17_Rb_tree_iteratorIS8_EbEDpOT_+0x8c>
	    _M_drop_node(__z);
 8000a26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000a28:	68b8      	ldr	r0, [r7, #8]
 8000a2a:	f000 f9e4 	bl	8000df6 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>
	    return _Res(iterator(__res.first), false);
 8000a2e:	697a      	ldr	r2, [r7, #20]
 8000a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a34:	4611      	mov	r1, r2
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 f9ee 	bl	8000e18 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEC1EPSt18_Rb_tree_node_base>
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000a42:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 8000a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	68f8      	ldr	r0, [r7, #12]
 8000a4e:	f000 f9b9 	bl	8000dc4 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKP17InterruptAccessorKSt8functionIFvvEEEEbEC1IS9_bLb1EEEOT_OT0_>
      }
 8000a52:	68f8      	ldr	r0, [r7, #12]
 8000a54:	3730      	adds	r7, #48	; 0x30
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE5eraseERS2_>:
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b088      	sub	sp, #32
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
 8000a62:	6039      	str	r1, [r7, #0]
    erase(const _Key& __x)
    {
      pair<iterator, iterator> __p = equal_range(__x);
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	683a      	ldr	r2, [r7, #0]
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 f9e2 	bl	8000e36 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11equal_rangeERS2_>
      const size_type __old_size = size();
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f000 fa55 	bl	8000f22 <_ZNKSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE4sizeEv>
 8000a78:	61f8      	str	r0, [r7, #28]
      _M_erase_aux(__p.first, __p.second);
 8000a7a:	f107 020c 	add.w	r2, r7, #12
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4611      	mov	r1, r2
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 fa58 	bl	8000f3a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEC1ERKSt17_Rb_tree_iteratorIS8_E>
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	1d1a      	adds	r2, r3, #4
 8000a90:	f107 0318 	add.w	r3, r7, #24
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 fa4f 	bl	8000f3a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEC1ERKSt17_Rb_tree_iteratorIS8_E>
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	6979      	ldr	r1, [r7, #20]
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f000 fa5a 	bl	8000f5a <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS8_ESG_>
      return __old_size - size();
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f000 fa3b 	bl	8000f22 <_ZNKSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE4sizeEv>
 8000aac:	4602      	mov	r2, r0
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	1a9b      	subs	r3, r3, r2
    }
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3720      	adds	r7, #32
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E21_M_not_empty_functionIS1_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
	  { return true; }
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <_ZSt4moveIRZ4mainEUlvE_EONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E15_M_init_functorERSt9_Any_dataOS1_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8000ae6:	b590      	push	{r4, r7, lr}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8000af0:	6838      	ldr	r0, [r7, #0]
 8000af2:	f7ff ffed 	bl	8000ad0 <_ZSt4moveIRZ4mainEUlvE_EONSt16remove_referenceIT_E4typeEOS3_>
 8000af6:	4603      	mov	r3, r0
 8000af8:	4622      	mov	r2, r4
 8000afa:	4619      	mov	r1, r3
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f000 fa84 	bl	800100a <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E15_M_init_functorERSt9_Any_dataOS1_St17integral_constantIbLb1EE>
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd90      	pop	{r4, r7, pc}

08000b0a <_ZNSt17_Function_handlerIFvvEZ4mainEUlvE_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f000 fa92 	bl	800103c <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 fa9f 	bl	800105e <_ZSt10__invoke_rIvRZ4mainEUlvE_JEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES5_E4typeEOS8_DpOS9_>
				     std::forward<_ArgTypes>(__args)...);
 8000b20:	bf00      	nop
      }
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <_ZNSt17_Function_handlerIFvvEZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	4613      	mov	r3, r2
 8000b34:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d109      	bne.n	8000b50 <_ZNSt17_Function_handlerIFvvEZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8000b3c:	68f8      	ldr	r0, [r7, #12]
 8000b3e:	f000 fa9e 	bl	800107e <_ZNSt9_Any_data9_M_accessIPZ4mainEUlvE_EERT_v>
 8000b42:	4604      	mov	r4, r0
 8000b44:	68b8      	ldr	r0, [r7, #8]
 8000b46:	f000 fa79 	bl	800103c <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	6023      	str	r3, [r4, #0]
	    break;
 8000b4e:	e005      	b.n	8000b5c <_ZNSt17_Function_handlerIFvvEZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	461a      	mov	r2, r3
 8000b54:	68b9      	ldr	r1, [r7, #8]
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	f000 fa9d 	bl	8001096 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>
	return false;
 8000b5c:	2300      	movs	r3, #0
      }
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd90      	pop	{r4, r7, pc}

08000b66 <_ZNSt8functionIFvvEE4swapERS1_>:
      void swap(function& __x) noexcept
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b082      	sub	sp, #8
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
 8000b6e:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	4611      	mov	r1, r2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 fac3 	bl	8001102 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f103 0208 	add.w	r2, r3, #8
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	3308      	adds	r3, #8
 8000b86:	4619      	mov	r1, r3
 8000b88:	4610      	mov	r0, r2
 8000b8a:	f000 faec 	bl	8001166 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f103 020c 	add.w	r2, r3, #12
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	330c      	adds	r3, #12
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4610      	mov	r0, r2
 8000b9c:	f000 fb0d 	bl	80011ba <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
      }
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <_ZNSt8functionIFvvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
    : _Function_base()
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fb29 	bl	800020c <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 8000bba:	6838      	ldr	r0, [r7, #0]
 8000bbc:	f000 fb1c 	bl	80011f8 <_ZNKSt8functionIFvvEEcvbEv>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d00d      	beq.n	8000be2 <_ZNSt8functionIFvvEEC1ERKS1_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	6839      	ldr	r1, [r7, #0]
 8000bce:	2202      	movs	r2, #2
 8000bd0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	68da      	ldr	r2, [r3, #12]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	689a      	ldr	r2, [r3, #8]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	609a      	str	r2, [r3, #8]
    }
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4618      	mov	r0, r3
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_create_nodeIJS3_IS1_S6_EEEEPSt13_Rb_tree_nodeIS8_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f000 fb0e 	bl	8001218 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11_M_get_nodeEv>
 8000bfc:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8000bfe:	6838      	ldr	r0, [r7, #0]
 8000c00:	f7ff fed6 	bl	80009b0 <_ZSt7forwardISt4pairIP17InterruptAccessorSt8functionIFvvEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8000c04:	4603      	mov	r3, r0
 8000c06:	461a      	mov	r2, r3
 8000c08:	68f9      	ldr	r1, [r7, #12]
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f000 fb15 	bl	800123a <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE17_M_construct_nodeIJS3_IS1_S6_EEEEvPSt13_Rb_tree_nodeIS8_EDpOT_>
	  return __tmp;
 8000c10:	68fb      	ldr	r3, [r7, #12]
	}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000c1a:	b590      	push	{r4, r7, lr}
 8000c1c:	b08b      	sub	sp, #44	; 0x2c
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	60f8      	str	r0, [r7, #12]
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8000c26:	68b8      	ldr	r0, [r7, #8]
 8000c28:	f000 fb27 	bl	800127a <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_beginEv>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8000c30:	68b8      	ldr	r0, [r7, #8]
 8000c32:	f000 fb2e 	bl	8001292 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_M_endEv>
 8000c36:	4603      	mov	r3, r0
 8000c38:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d020      	beq.n	8000c88 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8000c4a:	68bc      	ldr	r4, [r7, #8]
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 f868 	bl	8000d24 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 8000c54:	4603      	mov	r3, r0
 8000c56:	461a      	mov	r2, r3
 8000c58:	6879      	ldr	r1, [r7, #4]
 8000c5a:	4620      	mov	r0, r4
 8000c5c:	f000 fb25 	bl	80012aa <_ZNKSt4lessIKP17InterruptAccessorEclERS2_S4_>
 8000c60:	4603      	mov	r3, r0
 8000c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8000c66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d005      	beq.n	8000c7a <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x60>
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 fb2f 	bl	80012d4 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
 8000c76:	4603      	mov	r3, r0
 8000c78:	e004      	b.n	8000c84 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x6a>
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 fb35 	bl	80012ec <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
 8000c82:	4603      	mov	r3, r0
 8000c84:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8000c86:	e7db      	b.n	8000c40 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 8000c88:	697a      	ldr	r2, [r7, #20]
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 f8c1 	bl	8000e18 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8000c96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d01d      	beq.n	8000cda <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 8000c9e:	68b8      	ldr	r0, [r7, #8]
 8000ca0:	f000 fb30 	bl	8001304 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE5beginEv>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	61fb      	str	r3, [r7, #28]
 8000ca8:	f107 021c 	add.w	r2, r7, #28
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 fb37 	bl	8001326 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEESB_>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d008      	beq.n	8000cd0 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 8000cbe:	f107 0214 	add.w	r2, r7, #20
 8000cc2:	f107 0318 	add.w	r3, r7, #24
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	68f8      	ldr	r0, [r7, #12]
 8000cca:	f000 fb40 	bl	800134e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP17InterruptAccessorKSt8functionIFvvEEEERS1_Lb1EEEOT_OT0_>
 8000cce:	e025      	b.n	8000d1c <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f000 fb53 	bl	8001380 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8000cda:	68bc      	ldr	r4, [r7, #8]
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 fb5f 	bl	80013a2 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4620      	mov	r0, r4
 8000cec:	f000 fadd 	bl	80012aa <_ZNKSt4lessIKP17InterruptAccessorEclERS2_S4_>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d008      	beq.n	8000d08 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 8000cf6:	f107 0214 	add.w	r2, r7, #20
 8000cfa:	f107 0318 	add.w	r3, r7, #24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	68f8      	ldr	r0, [r7, #12]
 8000d02:	f000 fb24 	bl	800134e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP17InterruptAccessorKSt8functionIFvvEEEERS1_Lb1EEEOT_OT0_>
 8000d06:	e009      	b.n	8000d1c <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
 8000d0c:	f107 0220 	add.w	r2, r7, #32
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	4619      	mov	r1, r3
 8000d16:	68f8      	ldr	r0, [r7, #12]
 8000d18:	f000 fb4f 	bl	80013ba <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8000d1c:	68f8      	ldr	r0, [r7, #12]
 8000d1e:	372c      	adds	r7, #44	; 0x2c
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd90      	pop	{r4, r7, pc}

08000d24 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>:
      _S_key(_Const_Link_type __x)
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f000 fb5a 	bl	80013e6 <_ZNKSt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEE9_M_valptrEv>
 8000d32:	4602      	mov	r2, r0
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	4611      	mov	r1, r2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 fb61 	bl	8001402 <_ZNKSt10_Select1stISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEclERKS8_>
 8000d40:	4603      	mov	r3, r0
      }
 8000d42:	4618      	mov	r0, r3
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000d4a:	b5b0      	push	{r4, r5, r7, lr}
 8000d4c:	b086      	sub	sp, #24
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	60f8      	str	r0, [r7, #12]
 8000d52:	60b9      	str	r1, [r7, #8]
 8000d54:	607a      	str	r2, [r7, #4]
 8000d56:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d117      	bne.n	8000d8e <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8000d5e:	68f8      	ldr	r0, [r7, #12]
 8000d60:	f000 fa97 	bl	8001292 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_M_endEv>
 8000d64:	4602      	mov	r2, r0
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d010      	beq.n	8000d8e <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8000d6c:	68fc      	ldr	r4, [r7, #12]
 8000d6e:	6838      	ldr	r0, [r7, #0]
 8000d70:	f7ff ffd8 	bl	8000d24 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 8000d74:	4605      	mov	r5, r0
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f000 fb13 	bl	80013a2 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4629      	mov	r1, r5
 8000d82:	4620      	mov	r0, r4
 8000d84:	f000 fa91 	bl	80012aa <_ZNKSt4lessIKP17InterruptAccessorEclERS2_S4_>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x48>
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e000      	b.n	8000d94 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x4a>
 8000d92:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8000d94:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8000d9a:	7df8      	ldrb	r0, [r7, #23]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	6839      	ldr	r1, [r7, #0]
 8000da0:	f004 ffcb 	bl	8005d3a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	695b      	ldr	r3, [r3, #20]
 8000da8:	1c5a      	adds	r2, r3, #1
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	6839      	ldr	r1, [r7, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 f82f 	bl	8000e18 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEC1EPSt18_Rb_tree_node_base>
 8000dba:	693b      	ldr	r3, [r7, #16]
    }
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bdb0      	pop	{r4, r5, r7, pc}

08000dc4 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKP17InterruptAccessorKSt8functionIFvvEEEEbEC1IS9_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8000dd0:	68b8      	ldr	r0, [r7, #8]
 8000dd2:	f000 fb22 	bl	800141a <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEOT_RNSt16remove_referenceISB_E4typeE>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	6812      	ldr	r2, [r2, #0]
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f000 fb26 	bl	8001430 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8000de4:	4603      	mov	r3, r0
 8000de6:	781a      	ldrb	r2, [r3, #0]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	711a      	strb	r2, [r3, #4]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4618      	mov	r0, r3
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
 8000dfe:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8000e00:	6839      	ldr	r1, [r7, #0]
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f000 fb1f 	bl	8001446 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS8_E>
	_M_put_node(__p);
 8000e08:	6839      	ldr	r1, [r7, #0]
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f000 fb30 	bl	8001470 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E>
      }
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	683a      	ldr	r2, [r7, #0]
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11equal_rangeERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000e36:	b590      	push	{r4, r7, lr}
 8000e38:	b08d      	sub	sp, #52	; 0x34
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	60f8      	str	r0, [r7, #12]
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8000e42:	68b8      	ldr	r0, [r7, #8]
 8000e44:	f000 fa19 	bl	800127a <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_beginEv>
 8000e48:	62f8      	str	r0, [r7, #44]	; 0x2c
      _Base_ptr __y = _M_end();
 8000e4a:	68b8      	ldr	r0, [r7, #8]
 8000e4c:	f000 fa21 	bl	8001292 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_M_endEv>
 8000e50:	62b8      	str	r0, [r7, #40]	; 0x28
      while (__x != 0)
 8000e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d04c      	beq.n	8000ef2 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11equal_rangeERS2_+0xbc>
	  if (_M_impl._M_key_compare(_S_key(__x), __k))
 8000e58:	68bc      	ldr	r4, [r7, #8]
 8000e5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e5c:	f7ff ff62 	bl	8000d24 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 8000e60:	4603      	mov	r3, r0
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	4619      	mov	r1, r3
 8000e66:	4620      	mov	r0, r4
 8000e68:	f000 fa1f 	bl	80012aa <_ZNKSt4lessIKP17InterruptAccessorEclERS2_S4_>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d004      	beq.n	8000e7c <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11equal_rangeERS2_+0x46>
	    __x = _S_right(__x);
 8000e72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e74:	f000 fa3a 	bl	80012ec <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
 8000e78:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000e7a:	e7ea      	b.n	8000e52 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11equal_rangeERS2_+0x1c>
	  else if (_M_impl._M_key_compare(__k, _S_key(__x)))
 8000e7c:	68bc      	ldr	r4, [r7, #8]
 8000e7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e80:	f7ff ff50 	bl	8000d24 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 8000e84:	4603      	mov	r3, r0
 8000e86:	461a      	mov	r2, r3
 8000e88:	6879      	ldr	r1, [r7, #4]
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	f000 fa0d 	bl	80012aa <_ZNKSt4lessIKP17InterruptAccessorEclERS2_S4_>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d006      	beq.n	8000ea4 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11equal_rangeERS2_+0x6e>
	    __y = __x, __x = _S_left(__x);
 8000e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e9c:	f000 fa1a 	bl	80012d4 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
 8000ea0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000ea2:	e7d6      	b.n	8000e52 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11equal_rangeERS2_+0x1c>
	      _Link_type __xu(__x);
 8000ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
	      _Base_ptr __yu(__y);
 8000ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eaa:	623b      	str	r3, [r7, #32]
	      __y = __x, __x = _S_left(__x);
 8000eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
 8000eb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000eb2:	f000 fa0f 	bl	80012d4 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
 8000eb6:	62f8      	str	r0, [r7, #44]	; 0x2c
	      __xu = _S_right(__xu);
 8000eb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000eba:	f000 fa17 	bl	80012ec <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
 8000ebe:	6278      	str	r0, [r7, #36]	; 0x24
			  iterator>(_M_lower_bound(__x, __y, __k),
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ec4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000ec6:	68b8      	ldr	r0, [r7, #8]
 8000ec8:	f000 fae4 	bl	8001494 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS2_>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	613b      	str	r3, [r7, #16]
				    _M_upper_bound(__xu, __yu, __k));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a3a      	ldr	r2, [r7, #32]
 8000ed4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ed6:	68b8      	ldr	r0, [r7, #8]
 8000ed8:	f000 fb0d 	bl	80014f6 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_upper_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS2_>
 8000edc:	4603      	mov	r3, r0
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	f107 0214 	add.w	r2, r7, #20
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	4619      	mov	r1, r3
 8000eea:	68f8      	ldr	r0, [r7, #12]
 8000eec:	f000 fb31 	bl	8001552 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKP17InterruptAccessorKSt8functionIFvvEEEES9_EC1IS9_S9_Lb1EEEOT_OT0_>
    }
 8000ef0:	e013      	b.n	8000f1a <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11equal_rangeERS2_+0xe4>
      return pair<iterator, iterator>(iterator(__y),
 8000ef2:	f107 0318 	add.w	r3, r7, #24
 8000ef6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff8d 	bl	8000e18 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEC1EPSt18_Rb_tree_node_base>
				      iterator(__y));
 8000efe:	f107 031c 	add.w	r3, r7, #28
 8000f02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff87 	bl	8000e18 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEC1EPSt18_Rb_tree_node_base>
 8000f0a:	f107 021c 	add.w	r2, r7, #28
 8000f0e:	f107 0318 	add.w	r3, r7, #24
 8000f12:	4619      	mov	r1, r3
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f000 fb1c 	bl	8001552 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKP17InterruptAccessorKSt8functionIFvvEEEES9_EC1IS9_S9_Lb1EEEOT_OT0_>
    }
 8000f1a:	68f8      	ldr	r0, [r7, #12]
 8000f1c:	3734      	adds	r7, #52	; 0x34
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd90      	pop	{r4, r7, pc}

08000f22 <_ZNKSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEC1ERKSt17_Rb_tree_iteratorIS8_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS8_ESG_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b088      	sub	sp, #32
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	60f8      	str	r0, [r7, #12]
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
      if (__first == begin() && __last == end())
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	f000 f9cc 	bl	8001304 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE5beginEv>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	f107 0214 	add.w	r2, r7, #20
 8000f74:	f107 0310 	add.w	r3, r7, #16
 8000f78:	4611      	mov	r1, r2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff ffdd 	bl	8000f3a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEC1ERKSt17_Rb_tree_iteratorIS8_E>
 8000f80:	f107 0210 	add.w	r2, r7, #16
 8000f84:	f107 0308 	add.w	r3, r7, #8
 8000f88:	4611      	mov	r1, r2
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 fafa 	bl	8001584 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEESB_>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d018      	beq.n	8000fc8 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS8_ESG_+0x6e>
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f000 fb08 	bl	80015ac <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE3endEv>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	f107 021c 	add.w	r2, r7, #28
 8000fa4:	f107 0318 	add.w	r3, r7, #24
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ffc5 	bl	8000f3a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEC1ERKSt17_Rb_tree_iteratorIS8_E>
 8000fb0:	f107 0218 	add.w	r2, r7, #24
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 fae3 	bl	8001584 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEESB_>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS8_ESG_+0x6e>
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e000      	b.n	8000fca <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS8_ESG_+0x70>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS8_ESG_+0x7c>
	clear();
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f000 fafd 	bl	80015ce <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE5clearEv>
    }
 8000fd4:	e015      	b.n	8001002 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS8_ESG_+0xa8>
	while (__first != __last)
 8000fd6:	1d3a      	adds	r2, r7, #4
 8000fd8:	f107 0308 	add.w	r3, r7, #8
 8000fdc:	4611      	mov	r1, r2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 fb0a 	bl	80015f8 <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEESB_>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d00b      	beq.n	8001002 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS8_ESG_+0xa8>
	  _M_erase_aux(__first++);
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 fb15 	bl	8001620 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEppEi>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f000 fb25 	bl	800164a <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS8_E>
	while (__first != __last)
 8001000:	e7e9      	b.n	8000fd6 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS8_ESG_+0x7c>
    }
 8001002:	bf00      	nop
 8001004:	3720      	adds	r7, #32
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E15_M_init_functorERSt9_Any_dataOS1_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800100a:	b590      	push	{r4, r7, lr}
 800100c:	b085      	sub	sp, #20
 800100e:	af00      	add	r7, sp, #0
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8001016:	68b8      	ldr	r0, [r7, #8]
 8001018:	f7ff fd5a 	bl	8000ad0 <_ZSt4moveIRZ4mainEUlvE_EONSt16remove_referenceIT_E4typeEOS3_>
 800101c:	4604      	mov	r4, r0
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f7ff f8de 	bl	80001e0 <_ZNSt9_Any_data9_M_accessEv>
 8001024:	4603      	mov	r3, r0
 8001026:	4619      	mov	r1, r3
 8001028:	2004      	movs	r0, #4
 800102a:	f7ff f8cd 	bl	80001c8 <_ZnwjPv>
 800102e:	4602      	mov	r2, r0
 8001030:	6823      	ldr	r3, [r4, #0]
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	bf00      	nop
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	bd90      	pop	{r4, r7, pc}

0800103c <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 fb1a 	bl	800167e <_ZNKSt9_Any_data9_M_accessIZ4mainEUlvE_EERKT_v>
 800104a:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f000 fb22 	bl	8001696 <_ZSt11__addressofIKZ4mainEUlvE_EPT_RS2_>
 8001052:	4603      	mov	r3, r0
 8001054:	bf00      	nop
	}
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <_ZSt10__invoke_rIvRZ4mainEUlvE_JEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES5_E4typeEOS8_DpOS9_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800105e:	b590      	push	{r4, r7, lr}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 fb20 	bl	80016ac <_ZSt7forwardIRZ4mainEUlvE_EOT_RNSt16remove_referenceIS2_E4typeE>
 800106c:	4603      	mov	r3, r0
 800106e:	4619      	mov	r1, r3
 8001070:	4620      	mov	r0, r4
 8001072:	f000 fb26 	bl	80016c2 <_ZSt13__invoke_implIvRZ4mainEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	bd90      	pop	{r4, r7, pc}

0800107e <_ZNSt9_Any_data9_M_accessIPZ4mainEUlvE_EERT_v>:
      _M_access()
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff f8aa 	bl	80001e0 <_ZNSt9_Any_data9_M_accessEv>
 800108c:	4603      	mov	r3, r0
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8001096:	b5b0      	push	{r4, r5, r7, lr}
 8001098:	b084      	sub	sp, #16
 800109a:	af00      	add	r7, sp, #0
 800109c:	60f8      	str	r0, [r7, #12]
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	4613      	mov	r3, r2
 80010a2:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	2b03      	cmp	r3, #3
 80010a8:	d016      	beq.n	80010d8 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x42>
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	dc19      	bgt.n	80010e2 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d002      	beq.n	80010b8 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x22>
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d00a      	beq.n	80010cc <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x36>
 80010b6:	e014      	b.n	80010e2 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f7ff ffe0 	bl	800107e <_ZNSt9_Any_data9_M_accessIPZ4mainEUlvE_EERT_v>
 80010be:	4604      	mov	r4, r0
 80010c0:	68b8      	ldr	r0, [r7, #8]
 80010c2:	f7ff ffbb 	bl	800103c <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E14_M_get_pointerERKSt9_Any_data>
 80010c6:	4603      	mov	r3, r0
 80010c8:	6023      	str	r3, [r4, #0]
	      break;
 80010ca:	e00a      	b.n	80010e2 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 80010cc:	462a      	mov	r2, r5
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	68f8      	ldr	r0, [r7, #12]
 80010d2:	f000 fb06 	bl	80016e2 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E8_M_cloneERSt9_Any_dataRKS3_St17integral_constantIbLb1EE>
	      break;
 80010d6:	e004      	b.n	80010e2 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 80010d8:	4621      	mov	r1, r4
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f000 fb1a 	bl	8001714 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80010e0:	bf00      	nop
	  return false;
 80010e2:	2300      	movs	r3, #0
	}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bdb0      	pop	{r4, r5, r7, pc}

080010ec <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8001102:	b580      	push	{r7, lr}
 8001104:	b084      	sub	sp, #16
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ffed 	bl	80010ec <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001112:	4602      	mov	r2, r0
 8001114:	f107 0308 	add.w	r3, r7, #8
 8001118:	e892 0003 	ldmia.w	r2, {r0, r1}
 800111c:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8001120:	6838      	ldr	r0, [r7, #0]
 8001122:	f7ff ffe3 	bl	80010ec <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001126:	4602      	mov	r2, r0
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800112e:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ffd8 	bl	80010ec <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800113c:	4602      	mov	r2, r0
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001144:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8001148:	bf00      	nop
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8001166:	b580      	push	{r7, lr}
 8001168:	b084      	sub	sp, #16
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ffed 	bl	8001150 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8001176:	4603      	mov	r3, r0
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800117c:	6838      	ldr	r0, [r7, #0]
 800117e:	f7ff ffe7 	bl	8001150 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8001182:	4603      	mov	r3, r0
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ffde 	bl	8001150 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8001194:	4603      	mov	r3, r0
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	601a      	str	r2, [r3, #0]
    }
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4618      	mov	r0, r3
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b084      	sub	sp, #16
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff ffed 	bl	80011a4 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80011ca:	4603      	mov	r3, r0
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80011d0:	6838      	ldr	r0, [r7, #0]
 80011d2:	f7ff ffe7 	bl	80011a4 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80011d6:	4603      	mov	r3, r0
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ffde 	bl	80011a4 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80011e8:	4603      	mov	r3, r0
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	601a      	str	r2, [r3, #0]
    }
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f823 	bl	800024e <_ZNKSt14_Function_base8_M_emptyEv>
 8001208:	4603      	mov	r3, r0
 800120a:	f083 0301 	eor.w	r3, r3, #1
 800120e:	b2db      	uxtb	r3, r3
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11_M_get_nodeEv>:
      _M_get_node()
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 fa83 	bl	800172c <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE21_M_get_Node_allocatorEv>
 8001226:	4603      	mov	r3, r0
 8001228:	2101      	movs	r1, #1
 800122a:	4618      	mov	r0, r3
 800122c:	f000 fa89 	bl	8001742 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEE8allocateERSB_j>
 8001230:	4603      	mov	r3, r0
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE17_M_construct_nodeIJS3_IS1_S6_EEEEvPSt13_Rb_tree_nodeIS8_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800123a:	b5b0      	push	{r4, r5, r7, lr}
 800123c:	b084      	sub	sp, #16
 800123e:	af00      	add	r7, sp, #0
 8001240:	60f8      	str	r0, [r7, #12]
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	4619      	mov	r1, r3
 800124a:	2024      	movs	r0, #36	; 0x24
 800124c:	f7fe ffbc 	bl	80001c8 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8001250:	68f8      	ldr	r0, [r7, #12]
 8001252:	f000 fa6b 	bl	800172c <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE21_M_get_Node_allocatorEv>
 8001256:	4604      	mov	r4, r0
 8001258:	68b8      	ldr	r0, [r7, #8]
 800125a:	f000 fa81 	bl	8001760 <_ZNSt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEE9_M_valptrEv>
 800125e:	4605      	mov	r5, r0
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff fba5 	bl	80009b0 <_ZSt7forwardISt4pairIP17InterruptAccessorSt8functionIFvvEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	4629      	mov	r1, r5
 800126c:	4620      	mov	r0, r4
 800126e:	f000 fa85 	bl	800177c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEE9constructIS9_JS1_IS3_S7_EEEEvRSB_PT_DpOT0_>
	}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bdb0      	pop	{r4, r5, r7, pc}

0800127a <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3304      	adds	r3, #4
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <_ZNKSt4lessIKP17InterruptAccessorEclERS2_S4_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 80012aa:	b480      	push	{r7}
 80012ac:	b085      	sub	sp, #20
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	60f8      	str	r0, [r7, #12]
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	429a      	cmp	r2, r3
 80012c0:	bf34      	ite	cc
 80012c2:	2301      	movcc	r3, #1
 80012c4:	2300      	movcs	r3, #0
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	4618      	mov	r0, r3
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68da      	ldr	r2, [r3, #12]
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	4611      	mov	r1, r2
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fd7e 	bl	8000e18 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEC1EPSt18_Rb_tree_node_base>
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEESB_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	429a      	cmp	r2, r3
 800133a:	bf0c      	ite	eq
 800133c:	2301      	moveq	r3, #1
 800133e:	2300      	movne	r3, #0
 8001340:	b2db      	uxtb	r3, r3
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP17InterruptAccessorKSt8functionIFvvEEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800134e:	b580      	push	{r7, lr}
 8001350:	b084      	sub	sp, #16
 8001352:	af00      	add	r7, sp, #0
 8001354:	60f8      	str	r0, [r7, #12]
 8001356:	60b9      	str	r1, [r7, #8]
 8001358:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800135a:	68b8      	ldr	r0, [r7, #8]
 800135c:	f000 fa21 	bl	80017a2 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEOT_RNSt16remove_referenceISD_E4typeE>
 8001360:	4603      	mov	r3, r0
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f000 fa25 	bl	80017b8 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800136e:	4603      	mov	r3, r0
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4618      	mov	r0, r3
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f004 fcd2 	bl	8005d36 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8001392:	4602      	mov	r2, r0
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	601a      	str	r2, [r3, #0]
	return *this;
 8001398:	687b      	ldr	r3, [r7, #4]
      }
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff fcba 	bl	8000d24 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	60f8      	str	r0, [r7, #12]
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 80013c6:	68b8      	ldr	r0, [r7, #8]
 80013c8:	f000 f9f6 	bl	80017b8 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80013cc:	4603      	mov	r3, r0
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4618      	mov	r0, r3
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <_ZNKSt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEE9_M_valptrEv>:
      _M_valptr() const
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	3310      	adds	r3, #16
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 f9eb 	bl	80017ce <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEE6_M_ptrEv>
 80013f8:	4603      	mov	r3, r0
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <_ZNKSt10_Select1stISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEclERKS8_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS8_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001446:	b590      	push	{r4, r7, lr}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f000 f96b 	bl	800172c <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE21_M_get_Node_allocatorEv>
 8001456:	4604      	mov	r4, r0
 8001458:	6838      	ldr	r0, [r7, #0]
 800145a:	f000 f981 	bl	8001760 <_ZNSt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEE9_M_valptrEv>
 800145e:	4603      	mov	r3, r0
 8001460:	4619      	mov	r1, r3
 8001462:	4620      	mov	r0, r4
 8001464:	f000 f9bf 	bl	80017e6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEE7destroyIS9_EEvRSB_PT_>
      }
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	bd90      	pop	{r4, r7, pc}

08001470 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 f956 	bl	800172c <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE21_M_get_Node_allocatorEv>
 8001480:	4603      	mov	r3, r0
 8001482:	2201      	movs	r2, #1
 8001484:	6839      	ldr	r1, [r7, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f000 f9ba 	bl	8001800 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEE10deallocateERSB_PSA_j>
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b087      	sub	sp, #28
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
 80014a0:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d01b      	beq.n	80014e0 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS2_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80014a8:	68fc      	ldr	r4, [r7, #12]
 80014aa:	68b8      	ldr	r0, [r7, #8]
 80014ac:	f7ff fc3a 	bl	8000d24 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 80014b0:	4603      	mov	r3, r0
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	4620      	mov	r0, r4
 80014b8:	f7ff fef7 	bl	80012aa <_ZNKSt4lessIKP17InterruptAccessorEclERS2_S4_>
 80014bc:	4603      	mov	r3, r0
 80014be:	f083 0301 	eor.w	r3, r3, #1
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d006      	beq.n	80014d6 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS2_+0x42>
	  __y = __x, __x = _S_left(__x);
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	68b8      	ldr	r0, [r7, #8]
 80014ce:	f7ff ff01 	bl	80012d4 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
 80014d2:	60b8      	str	r0, [r7, #8]
 80014d4:	e7e5      	b.n	80014a2 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS2_+0xe>
	  __x = _S_right(__x);
 80014d6:	68b8      	ldr	r0, [r7, #8]
 80014d8:	f7ff ff08 	bl	80012ec <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
 80014dc:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80014de:	e7e0      	b.n	80014a2 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS2_+0xe>
      return iterator(__y);
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fc96 	bl	8000e18 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEC1EPSt18_Rb_tree_node_base>
 80014ec:	697b      	ldr	r3, [r7, #20]
    }
 80014ee:	4618      	mov	r0, r3
 80014f0:	371c      	adds	r7, #28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd90      	pop	{r4, r7, pc}

080014f6 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_upper_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80014f6:	b590      	push	{r4, r7, lr}
 80014f8:	b087      	sub	sp, #28
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	60f8      	str	r0, [r7, #12]
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d018      	beq.n	800153c <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_upper_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS2_+0x46>
	if (_M_impl._M_key_compare(__k, _S_key(__x)))
 800150a:	68fc      	ldr	r4, [r7, #12]
 800150c:	68b8      	ldr	r0, [r7, #8]
 800150e:	f7ff fc09 	bl	8000d24 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 8001512:	4603      	mov	r3, r0
 8001514:	461a      	mov	r2, r3
 8001516:	6839      	ldr	r1, [r7, #0]
 8001518:	4620      	mov	r0, r4
 800151a:	f7ff fec6 	bl	80012aa <_ZNKSt4lessIKP17InterruptAccessorEclERS2_S4_>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d006      	beq.n	8001532 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_upper_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS2_+0x3c>
	  __y = __x, __x = _S_left(__x);
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	68b8      	ldr	r0, [r7, #8]
 800152a:	f7ff fed3 	bl	80012d4 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
 800152e:	60b8      	str	r0, [r7, #8]
 8001530:	e7e8      	b.n	8001504 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_upper_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS2_+0xe>
	  __x = _S_right(__x);
 8001532:	68b8      	ldr	r0, [r7, #8]
 8001534:	f7ff feda 	bl	80012ec <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001538:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 800153a:	e7e3      	b.n	8001504 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_upper_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS2_+0xe>
      return iterator(__y);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	6879      	ldr	r1, [r7, #4]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fc68 	bl	8000e18 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEC1EPSt18_Rb_tree_node_base>
 8001548:	697b      	ldr	r3, [r7, #20]
    }
 800154a:	4618      	mov	r0, r3
 800154c:	371c      	adds	r7, #28
 800154e:	46bd      	mov	sp, r7
 8001550:	bd90      	pop	{r4, r7, pc}

08001552 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKP17InterruptAccessorKSt8functionIFvvEEEES9_EC1IS9_S9_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8001552:	b580      	push	{r7, lr}
 8001554:	b084      	sub	sp, #16
 8001556:	af00      	add	r7, sp, #0
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800155e:	68b8      	ldr	r0, [r7, #8]
 8001560:	f7ff ff5b 	bl	800141a <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEOT_RNSt16remove_referenceISB_E4typeE>
 8001564:	4602      	mov	r2, r0
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6812      	ldr	r2, [r2, #0]
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff54 	bl	800141a <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEOT_RNSt16remove_referenceISB_E4typeE>
 8001572:	4602      	mov	r2, r0
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6812      	ldr	r2, [r2, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4618      	mov	r0, r3
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEESB_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	bf0c      	ite	eq
 800159a:	2301      	moveq	r3, #1
 800159c:	2300      	movne	r3, #0
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	1d1a      	adds	r2, r3, #4
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	4611      	mov	r1, r2
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fc2a 	bl	8000e18 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEC1EPSt18_Rb_tree_node_base>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
	_M_erase(_M_begin());
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff fe4f 	bl	800127a <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_beginEv>
 80015dc:	4603      	mov	r3, r0
 80015de:	4619      	mov	r1, r3
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f000 f91c 	bl	800181e <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
	_M_impl._M_reset();
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3304      	adds	r3, #4
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7fe fe93 	bl	8000316 <_ZNSt15_Rb_tree_header8_M_resetEv>
      }
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <_ZStneRKSt23_Rb_tree_const_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEESB_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	bf14      	ite	ne
 800160e:	2301      	movne	r3, #1
 8001610:	2300      	moveq	r3, #0
 8001612:	b2db      	uxtb	r3, r3
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEppEi>:
      operator++(int) _GLIBCXX_NOEXCEPT
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
	_Self __tmp = *this;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	60fb      	str	r3, [r7, #12]
	_M_node = _Rb_tree_increment(_M_node);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f004 fb7c 	bl	8005d32 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>
 800163a:	4602      	mov	r2, r0
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	601a      	str	r2, [r3, #0]
	return __tmp;
 8001640:	68fb      	ldr	r3, [r7, #12]
      }
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS8_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800164a:	b580      	push	{r7, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	6039      	str	r1, [r7, #0]
				(const_cast<_Base_ptr>(__position._M_node),
 8001654:	683a      	ldr	r2, [r7, #0]
				 this->_M_impl._M_header));
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3304      	adds	r3, #4
				(const_cast<_Base_ptr>(__position._M_node),
 800165a:	4619      	mov	r1, r3
 800165c:	4610      	mov	r0, r2
 800165e:	f004 fbc7 	bl	8005df0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>
 8001662:	60f8      	str	r0, [r7, #12]
      _M_drop_node(__y);
 8001664:	68f9      	ldr	r1, [r7, #12]
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff fbc5 	bl	8000df6 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>
      --_M_impl._M_node_count;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	1e5a      	subs	r2, r3, #1
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	615a      	str	r2, [r3, #20]
    }
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <_ZNKSt9_Any_data9_M_accessIZ4mainEUlvE_EERKT_v>:
      _M_access() const
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7fe fdb5 	bl	80001f6 <_ZNKSt9_Any_data9_M_accessEv>
 800168c:	4603      	mov	r3, r0
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <_ZSt11__addressofIKZ4mainEUlvE_EPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4618      	mov	r0, r3
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <_ZSt7forwardIRZ4mainEUlvE_EOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <_ZSt13__invoke_implIvRZ4mainEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	7138      	strb	r0, [r7, #4]
 80016ca:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80016cc:	6838      	ldr	r0, [r7, #0]
 80016ce:	f7ff ffed 	bl	80016ac <_ZSt7forwardIRZ4mainEUlvE_EOT_RNSt16remove_referenceIS2_E4typeE>
 80016d2:	4603      	mov	r3, r0
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe fea3 	bl	8000420 <_ZZ4mainENKUlvE_clEv>
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E8_M_cloneERSt9_Any_dataRKS3_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 80016e2:	b590      	push	{r4, r7, lr}
 80016e4:	b085      	sub	sp, #20
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	60f8      	str	r0, [r7, #12]
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80016ee:	68b8      	ldr	r0, [r7, #8]
 80016f0:	f7ff ffc5 	bl	800167e <_ZNKSt9_Any_data9_M_accessIZ4mainEUlvE_EERKT_v>
 80016f4:	4604      	mov	r4, r0
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f7fe fd72 	bl	80001e0 <_ZNSt9_Any_data9_M_accessEv>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4619      	mov	r1, r3
 8001700:	2004      	movs	r0, #4
 8001702:	f7fe fd61 	bl	80001c8 <_ZnwjPv>
 8001706:	4602      	mov	r2, r0
 8001708:	6823      	ldr	r3, [r4, #0]
 800170a:	6013      	str	r3, [r2, #0]
	}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	bd90      	pop	{r4, r7, pc}

08001714 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f89c 	bl	800185c <_ZNSt9_Any_data9_M_accessIZ4mainEUlvE_EERT_v>
	}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4618      	mov	r0, r3
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEE8allocateERSB_j>:
       *  @param  __n  The number of objects to allocate space for.
       *
       *  Calls @c a.allocate(n)
      */
      _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
      allocate(allocator_type& __a, size_type __n)
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800174c:	2200      	movs	r2, #0
 800174e:	6839      	ldr	r1, [r7, #0]
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 f88f 	bl	8001874 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEE8allocateEjPKv>
 8001756:	4603      	mov	r3, r0
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <_ZNSt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEE9_M_valptrEv>:
      _M_valptr()
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3310      	adds	r3, #16
 800176c:	4618      	mov	r0, r3
 800176e:	f000 f8a2 	bl	80018b6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEE6_M_ptrEv>
 8001772:	4603      	mov	r3, r0
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEE9constructIS9_JS1_IS3_S7_EEEEvRSB_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff f911 	bl	80009b0 <_ZSt7forwardISt4pairIP17InterruptAccessorSt8functionIFvvEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800178e:	4603      	mov	r3, r0
 8001790:	461a      	mov	r2, r3
 8001792:	68b9      	ldr	r1, [r7, #8]
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f000 f89a 	bl	80018ce <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEE9constructISA_JS2_IS4_S8_EEEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEOT_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEE6_M_ptrEv>:
      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 f891 	bl	80018fe <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEE7_M_addrEv>
 80017dc:	4603      	mov	r3, r0
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEE7destroyIS9_EEvRSB_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 80017f0:	6839      	ldr	r1, [r7, #0]
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f89c 	bl	8001930 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEE7destroyISA_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEE10deallocateERSB_PSA_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	68b9      	ldr	r1, [r7, #8]
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f000 f899 	bl	8001948 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEE10deallocateEPSB_j>
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800181e:	b580      	push	{r7, lr}
 8001820:	b084      	sub	sp, #16
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d012      	beq.n	8001854 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x36>
	  _M_erase(_S_right(__x));
 800182e:	6838      	ldr	r0, [r7, #0]
 8001830:	f7ff fd5c 	bl	80012ec <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001834:	4603      	mov	r3, r0
 8001836:	4619      	mov	r1, r3
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff fff0 	bl	800181e <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
	  _Link_type __y = _S_left(__x);
 800183e:	6838      	ldr	r0, [r7, #0]
 8001840:	f7ff fd48 	bl	80012d4 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001844:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8001846:	6839      	ldr	r1, [r7, #0]
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff fad4 	bl	8000df6 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>
	  __x = __y;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001852:	e7e9      	b.n	8001828 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0xa>
    }
 8001854:	bf00      	nop
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <_ZNSt9_Any_data9_M_accessIZ4mainEUlvE_EERT_v>:
      _M_access()
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7fe fcbb 	bl	80001e0 <_ZNSt9_Any_data9_M_accessEv>
 800186a:	4603      	mov	r3, r0
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEE8allocateEjPKv>:
#endif

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
	 // 3308. std::allocator<void>().allocate(n)
	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
#endif

	if (__n > this->_M_max_size())
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f000 f875 	bl	8001970 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEE11_M_max_sizeEv>
 8001886:	4602      	mov	r2, r0
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	4293      	cmp	r3, r2
 800188c:	bf8c      	ite	hi
 800188e:	2301      	movhi	r3, #1
 8001890:	2300      	movls	r3, #0
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8001898:	f004 fb8e 	bl	8005fb8 <_ZSt17__throw_bad_allocv>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800189c:	68ba      	ldr	r2, [r7, #8]
 800189e:	4613      	mov	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	4413      	add	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f004 f9dc 	bl	8005c64 <_Znwj>
 80018ac:	4603      	mov	r3, r0
      }
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEE6_M_ptrEv>:
      _M_ptr() noexcept
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 f864 	bl	800198c <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEE7_M_addrEv>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEE9constructISA_JS2_IS4_S8_EEEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80018ce:	b590      	push	{r4, r7, lr}
 80018d0:	b085      	sub	sp, #20
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff f868 	bl	80009b0 <_ZSt7forwardISt4pairIP17InterruptAccessorSt8functionIFvvEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80018e0:	4604      	mov	r4, r0
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	4619      	mov	r1, r3
 80018e6:	2014      	movs	r0, #20
 80018e8:	f7fe fc6e 	bl	80001c8 <_ZnwjPv>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4621      	mov	r1, r4
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 f856 	bl	80019a2 <_ZNSt4pairIKP17InterruptAccessorKSt8functionIFvvEEEC1IS1_S5_Lb1EEEOS_IT_T0_E>
 80018f6:	bf00      	nop
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd90      	pop	{r4, r7, pc}

080018fe <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEE7_M_addrEv>:
      _M_addr() const noexcept
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <_ZNSt4pairIKP17InterruptAccessorKSt8functionIFvvEEED1Ev>:
    struct pair
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3304      	adds	r3, #4
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fd0e 	bl	8000342 <_ZNSt8functionIFvvEED1Ev>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEE7destroyISA_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 800193a:	6838      	ldr	r0, [r7, #0]
 800193c:	f7ff ffea 	bl	8001914 <_ZNSt4pairIKP17InterruptAccessorKSt8functionIFvvEEED1Ev>
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEE10deallocateEPSB_j>:
      deallocate(_Tp* __p, size_type __t)
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	4413      	add	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4619      	mov	r1, r3
 8001960:	68b8      	ldr	r0, [r7, #8]
 8001962:	f004 f97d 	bl	8005c60 <_ZdlPvj>
      }
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001978:	4b03      	ldr	r3, [pc, #12]	; (8001988 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	038e38e3 	.word	0x038e38e3

0800198c <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEE7_M_addrEv>:
      _M_addr() noexcept
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <_ZNSt4pairIKP17InterruptAccessorKSt8functionIFvvEEEC1IS1_S5_Lb1EEEOS_IT_T0_E>:
	constexpr pair(pair<_U1, _U2>&& __p)
 80019a2:	b590      	push	{r4, r7, lr}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
	: first(std::forward<_U1>(__p.first)),
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe ffd0 	bl	8000954 <_ZSt7forwardIP17InterruptAccessorEOT_RNSt16remove_referenceIS2_E4typeE>
 80019b4:	4603      	mov	r3, r0
	  second(std::forward<_U2>(__p.second)) { }
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	1d1c      	adds	r4, r3, #4
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	3304      	adds	r3, #4
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 f80a 	bl	80019de <_ZSt7forwardISt8functionIFvvEEEOT_RNSt16remove_referenceIS3_E4typeE>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4619      	mov	r1, r3
 80019ce:	4620      	mov	r0, r4
 80019d0:	f7fe ffae 	bl	8000930 <_ZNSt8functionIFvvEEC1EOS1_>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd90      	pop	{r4, r7, pc}

080019de <_ZSt7forwardISt8functionIFvvEEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fa:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <HAL_MspInit+0x44>)
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	4a0e      	ldr	r2, [pc, #56]	; (8001a38 <HAL_MspInit+0x44>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6193      	str	r3, [r2, #24]
 8001a06:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <HAL_MspInit+0x44>)
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_MspInit+0x44>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	4a08      	ldr	r2, [pc, #32]	; (8001a38 <HAL_MspInit+0x44>)
 8001a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	61d3      	str	r3, [r2, #28]
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_MspInit+0x44>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40021000 	.word	0x40021000

08001a3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a0a      	ldr	r2, [pc, #40]	; (8001a74 <HAL_TIM_Base_MspInit+0x38>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d10b      	bne.n	8001a66 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <HAL_TIM_Base_MspInit+0x3c>)
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	4a09      	ldr	r2, [pc, #36]	; (8001a78 <HAL_TIM_Base_MspInit+0x3c>)
 8001a54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a58:	6193      	str	r3, [r2, #24]
 8001a5a:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <HAL_TIM_Base_MspInit+0x3c>)
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a66:	bf00      	nop
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	40012c00 	.word	0x40012c00
 8001a78:	40021000 	.word	0x40021000

08001a7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a12      	ldr	r2, [pc, #72]	; (8001ae4 <HAL_TIM_MspPostInit+0x68>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d11d      	bne.n	8001ada <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <HAL_TIM_MspPostInit+0x6c>)
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	4a11      	ldr	r2, [pc, #68]	; (8001ae8 <HAL_TIM_MspPostInit+0x6c>)
 8001aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa8:	6153      	str	r3, [r2, #20]
 8001aaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <HAL_TIM_MspPostInit+0x6c>)
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ab6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001aba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abc:	2302      	movs	r3, #2
 8001abe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001ac8:	2306      	movs	r3, #6
 8001aca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001acc:	f107 030c 	add.w	r3, r7, #12
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad6:	f000 fc93 	bl	8002400 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ada:	bf00      	nop
 8001adc:	3720      	adds	r7, #32
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40012c00 	.word	0x40012c00
 8001ae8:	40021000 	.word	0x40021000

08001aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08a      	sub	sp, #40	; 0x28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a1b      	ldr	r2, [pc, #108]	; (8001b78 <HAL_UART_MspInit+0x8c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d12f      	bne.n	8001b6e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b0e:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <HAL_UART_MspInit+0x90>)
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	4a1a      	ldr	r2, [pc, #104]	; (8001b7c <HAL_UART_MspInit+0x90>)
 8001b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b18:	6193      	str	r3, [r2, #24]
 8001b1a:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <HAL_UART_MspInit+0x90>)
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_UART_MspInit+0x90>)
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <HAL_UART_MspInit+0x90>)
 8001b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b30:	6153      	str	r3, [r2, #20]
 8001b32:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_UART_MspInit+0x90>)
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = LIDER_TX_Pin|LIDER_RX_Pin;
 8001b3e:	23c0      	movs	r3, #192	; 0xc0
 8001b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b42:	2312      	movs	r3, #18
 8001b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b46:	2301      	movs	r3, #1
 8001b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b4e:	2307      	movs	r3, #7
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	4619      	mov	r1, r3
 8001b58:	4809      	ldr	r0, [pc, #36]	; (8001b80 <HAL_UART_MspInit+0x94>)
 8001b5a:	f000 fc51 	bl	8002400 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2100      	movs	r1, #0
 8001b62:	2025      	movs	r0, #37	; 0x25
 8001b64:	f000 fb9f 	bl	80022a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b68:	2025      	movs	r0, #37	; 0x25
 8001b6a:	f000 fbb8 	bl	80022de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b6e:	bf00      	nop
 8001b70:	3728      	adds	r7, #40	; 0x28
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40013800 	.word	0x40013800
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	48000400 	.word	0x48000400

08001b84 <_ZNSt15_Rb_tree_headerC1Ev>:
    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
      _M_header._M_color = _S_red;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7fe fbbf 	bl	8000316 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE13_Rb_tree_implISC_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f8b5 	bl	8001d1a <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEED1Ev>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EEC1Ev>:
      _Rb_tree() = default;
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 f893 	bl	8001cf0 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE13_Rb_tree_implISC_Lb1EEC1Ev>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <_ZNSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEEC1Ev>:
      map() = default;
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff ffeb 	bl	8001bba <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EEC1Ev>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bf2:	e7fe      	b.n	8001bf2 <NMI_Handler+0x4>

08001bf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <HardFault_Handler+0x4>

08001bfa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bfe:	e7fe      	b.n	8001bfe <MemManage_Handler+0x4>

08001c00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <BusFault_Handler+0x4>

08001c06 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c0a:	e7fe      	b.n	8001c0a <UsageFault_Handler+0x4>

08001c0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <_ZNSt4pairIKP17InterruptAccessorKSt8functionIFvvEEEC1ERKS7_>:
      constexpr pair(const pair&) = default;	///< Copy constructor
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	1d1a      	adds	r2, r3, #4
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	3304      	adds	r3, #4
 8001c50:	4619      	mov	r1, r3
 8001c52:	4610      	mov	r0, r2
 8001c54:	f7fe ffa8 	bl	8000ba8 <_ZNSt8functionIFvvEEC1ERKS1_>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  for(auto i : SysTick_Accessor) i.second();
 8001c6a:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <SysTick_Handler+0x74>)
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	69f8      	ldr	r0, [r7, #28]
 8001c70:	f000 f874 	bl	8001d5c <_ZNSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEE5beginEv>
 8001c74:	4603      	mov	r3, r0
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	69f8      	ldr	r0, [r7, #28]
 8001c7a:	f000 f87c 	bl	8001d76 <_ZNSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEE3endEv>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	463a      	mov	r2, r7
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f000 f881 	bl	8001d90 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEESB_>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d01a      	beq.n	8001cca <SysTick_Handler+0x66>
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 f89f 	bl	8001dda <_ZNKSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEdeEv>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	f107 0308 	add.w	r3, r7, #8
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ffc6 	bl	8001c36 <_ZNSt4pairIKP17InterruptAccessorKSt8functionIFvvEEEC1ERKS7_>
 8001caa:	f107 0308 	add.w	r3, r7, #8
 8001cae:	3304      	adds	r3, #4
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 f8a0 	bl	8001df6 <_ZNKSt8functionIFvvEEclEv>
 8001cb6:	f107 0308 	add.w	r3, r7, #8
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fe2a 	bl	8001914 <_ZNSt4pairIKP17InterruptAccessorKSt8functionIFvvEEED1Ev>
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 f878 	bl	8001db8 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEppEv>
 8001cc8:	e7db      	b.n	8001c82 <SysTick_Handler+0x1e>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cca:	f000 f9f1 	bl	80020b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	3720      	adds	r7, #32
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000160 	.word	0x20000160

08001cdc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	//for(auto& i : USART1_IRQ_Accessor) i.second();

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ce0:	4802      	ldr	r0, [pc, #8]	; (8001cec <USART1_IRQHandler+0x10>)
 8001ce2:	f003 f92d 	bl	8004f40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200000d8 	.word	0x200000d8

08001cf0 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE13_Rb_tree_implISC_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f892 	bl	8001e22 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEC1Ev>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 f89a 	bl	8001e3a <_ZNSt20_Rb_tree_key_compareISt4lessIKP17InterruptAccessorEEC1Ev>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff ff3a 	bl	8001b84 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f894 	bl	8001e50 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEED1Ev>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff fa9d 	bl	800127a <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_beginEv>
 8001d40:	4603      	mov	r3, r0
 8001d42:	4619      	mov	r1, r3
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff fd6a 	bl	800181e <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff28 	bl	8001ba2 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE13_Rb_tree_implISC_Lb1EED1Ev>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <_ZNSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
      { return _M_t.begin(); }
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff facc 	bl	8001304 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE5beginEv>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <_ZNSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fc13 	bl	80015ac <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE3endEv>
 8001d86:	4603      	mov	r3, r0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEESB_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	bf14      	ite	ne
 8001da6:	2301      	movne	r3, #1
 8001da8:	2300      	moveq	r3, #0
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f003 ffb2 	bl	8005d2e <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	601a      	str	r2, [r3, #0]
	return *this;
 8001dd0:	687b      	ldr	r3, [r7, #4]
      }
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <_ZNKSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fcba 	bl	8001760 <_ZNSt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEE9_M_valptrEv>
 8001dec:	4603      	mov	r3, r0
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <_ZNKSt8functionIFvvEEclEv>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe fa24 	bl	800024e <_ZNKSt14_Function_base8_M_emptyEv>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <_ZNKSt8functionIFvvEEclEv+0x1a>
	__throw_bad_function_call();
 8001e0c:	f004 f8d7 	bl	8005fbe <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	4610      	mov	r0, r2
 8001e18:	4798      	blx	r3
 8001e1a:	bf00      	nop
    }
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f81b 	bl	8001e66 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEC1Ev>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <_ZNSt20_Rb_tree_key_compareISt4lessIKP17InterruptAccessorEEC1Ev>:
      _Rb_tree_key_compare()
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
      { }
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4618      	mov	r0, r3
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4618      	mov	r0, r3
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <_ZNSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEED1Ev>:
      ~map() = default;
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff ff53 	bl	8001d32 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EED1Ev>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <_Z41__static_initialization_and_destruction_0ii>:
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d107      	bne.n	8001eb8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d102      	bne.n	8001eb8 <_Z41__static_initialization_and_destruction_0ii+0x20>
InterruptAccessor::Map SysTick_Accessor;
 8001eb2:	4809      	ldr	r0, [pc, #36]	; (8001ed8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001eb4:	f7ff fe8e 	bl	8001bd4 <_ZNSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEEC1Ev>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d107      	bne.n	8001ece <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d102      	bne.n	8001ece <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001ec8:	4803      	ldr	r0, [pc, #12]	; (8001ed8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001eca:	f7ff ffd7 	bl	8001e7c <_ZNSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEED1Ev>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000160 	.word	0x20000160

08001edc <_GLOBAL__sub_I_SysTick_Accessor>:
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	f7ff ffd7 	bl	8001e98 <_Z41__static_initialization_and_destruction_0ii>
 8001eea:	bd80      	pop	{r7, pc}

08001eec <_GLOBAL__sub_D_SysTick_Accessor>:
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7ff ffcf 	bl	8001e98 <_Z41__static_initialization_and_destruction_0ii>
 8001efa:	bd80      	pop	{r7, pc}

08001efc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
	return 1;
 8001f00:	2301      	movs	r3, #1
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <_kill>:

int _kill(int pid, int sig)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f16:	f004 f867 	bl	8005fe8 <__errno>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2216      	movs	r2, #22
 8001f1e:	601a      	str	r2, [r3, #0]
	return -1;
 8001f20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <_exit>:

void _exit (int status)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f34:	f04f 31ff 	mov.w	r1, #4294967295
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff ffe7 	bl	8001f0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f3e:	e7fe      	b.n	8001f3e <_exit+0x12>

08001f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f48:	4a14      	ldr	r2, [pc, #80]	; (8001f9c <_sbrk+0x5c>)
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <_sbrk+0x60>)
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f54:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <_sbrk+0x64>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d102      	bne.n	8001f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <_sbrk+0x64>)
 8001f5e:	4a12      	ldr	r2, [pc, #72]	; (8001fa8 <_sbrk+0x68>)
 8001f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f62:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <_sbrk+0x64>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d207      	bcs.n	8001f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f70:	f004 f83a 	bl	8005fe8 <__errno>
 8001f74:	4603      	mov	r3, r0
 8001f76:	220c      	movs	r2, #12
 8001f78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7e:	e009      	b.n	8001f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f80:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <_sbrk+0x64>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f86:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <_sbrk+0x64>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	4a05      	ldr	r2, [pc, #20]	; (8001fa4 <_sbrk+0x64>)
 8001f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f92:	68fb      	ldr	r3, [r7, #12]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20003000 	.word	0x20003000
 8001fa0:	00000400 	.word	0x00000400
 8001fa4:	20000178 	.word	0x20000178
 8001fa8:	20000198 	.word	0x20000198

08001fac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <SystemInit+0x20>)
 8001fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb6:	4a05      	ldr	r2, [pc, #20]	; (8001fcc <SystemInit+0x20>)
 8001fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002008 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fd4:	480d      	ldr	r0, [pc, #52]	; (800200c <LoopForever+0x6>)
  ldr r1, =_edata
 8001fd6:	490e      	ldr	r1, [pc, #56]	; (8002010 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fd8:	4a0e      	ldr	r2, [pc, #56]	; (8002014 <LoopForever+0xe>)
  movs r3, #0
 8001fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fdc:	e002      	b.n	8001fe4 <LoopCopyDataInit>

08001fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fe2:	3304      	adds	r3, #4

08001fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe8:	d3f9      	bcc.n	8001fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fea:	4a0b      	ldr	r2, [pc, #44]	; (8002018 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fec:	4c0b      	ldr	r4, [pc, #44]	; (800201c <LoopForever+0x16>)
  movs r3, #0
 8001fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff0:	e001      	b.n	8001ff6 <LoopFillZerobss>

08001ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff4:	3204      	adds	r2, #4

08001ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff8:	d3fb      	bcc.n	8001ff2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ffa:	f7ff ffd7 	bl	8001fac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ffe:	f003 fff9 	bl	8005ff4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002002:	f7fe fa51 	bl	80004a8 <main>

08002006 <LoopForever>:

LoopForever:
    b LoopForever
 8002006:	e7fe      	b.n	8002006 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002008:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800200c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002010:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002014:	08006360 	.word	0x08006360
  ldr r2, =_sbss
 8002018:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800201c:	20000194 	.word	0x20000194

08002020 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002020:	e7fe      	b.n	8002020 <ADC1_2_IRQHandler>
	...

08002024 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002028:	4b08      	ldr	r3, [pc, #32]	; (800204c <HAL_Init+0x28>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a07      	ldr	r2, [pc, #28]	; (800204c <HAL_Init+0x28>)
 800202e:	f043 0310 	orr.w	r3, r3, #16
 8002032:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002034:	2003      	movs	r0, #3
 8002036:	f000 f92b 	bl	8002290 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800203a:	2001      	movs	r0, #1
 800203c:	f000 f808 	bl	8002050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002040:	f7ff fcd8 	bl	80019f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40022000 	.word	0x40022000

08002050 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002058:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <HAL_InitTick+0x54>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <HAL_InitTick+0x58>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	4619      	mov	r1, r3
 8002062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002066:	fbb3 f3f1 	udiv	r3, r3, r1
 800206a:	fbb2 f3f3 	udiv	r3, r2, r3
 800206e:	4618      	mov	r0, r3
 8002070:	f000 f943 	bl	80022fa <HAL_SYSTICK_Config>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e00e      	b.n	800209c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b0f      	cmp	r3, #15
 8002082:	d80a      	bhi.n	800209a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002084:	2200      	movs	r2, #0
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	f000 f90b 	bl	80022a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002090:	4a06      	ldr	r2, [pc, #24]	; (80020ac <HAL_InitTick+0x5c>)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	e000      	b.n	800209c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20000000 	.word	0x20000000
 80020a8:	20000008 	.word	0x20000008
 80020ac:	20000004 	.word	0x20000004

080020b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_IncTick+0x20>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	461a      	mov	r2, r3
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_IncTick+0x24>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4413      	add	r3, r2
 80020c0:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <HAL_IncTick+0x24>)
 80020c2:	6013      	str	r3, [r2, #0]
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	20000008 	.word	0x20000008
 80020d4:	2000017c 	.word	0x2000017c

080020d8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return uwTick;  
 80020dc:	4b03      	ldr	r3, [pc, #12]	; (80020ec <HAL_GetTick+0x14>)
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	2000017c 	.word	0x2000017c

080020f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <__NVIC_SetPriorityGrouping+0x44>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800210c:	4013      	ands	r3, r2
 800210e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002118:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800211c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002122:	4a04      	ldr	r2, [pc, #16]	; (8002134 <__NVIC_SetPriorityGrouping+0x44>)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	60d3      	str	r3, [r2, #12]
}
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800213c:	4b04      	ldr	r3, [pc, #16]	; (8002150 <__NVIC_GetPriorityGrouping+0x18>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	0a1b      	lsrs	r3, r3, #8
 8002142:	f003 0307 	and.w	r3, r3, #7
}
 8002146:	4618      	mov	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	2b00      	cmp	r3, #0
 8002164:	db0b      	blt.n	800217e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	f003 021f 	and.w	r2, r3, #31
 800216c:	4907      	ldr	r1, [pc, #28]	; (800218c <__NVIC_EnableIRQ+0x38>)
 800216e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002172:	095b      	lsrs	r3, r3, #5
 8002174:	2001      	movs	r0, #1
 8002176:	fa00 f202 	lsl.w	r2, r0, r2
 800217a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	e000e100 	.word	0xe000e100

08002190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	6039      	str	r1, [r7, #0]
 800219a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800219c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	db0a      	blt.n	80021ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	490c      	ldr	r1, [pc, #48]	; (80021dc <__NVIC_SetPriority+0x4c>)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	0112      	lsls	r2, r2, #4
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	440b      	add	r3, r1
 80021b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b8:	e00a      	b.n	80021d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	4908      	ldr	r1, [pc, #32]	; (80021e0 <__NVIC_SetPriority+0x50>)
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	3b04      	subs	r3, #4
 80021c8:	0112      	lsls	r2, r2, #4
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	440b      	add	r3, r1
 80021ce:	761a      	strb	r2, [r3, #24]
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000e100 	.word	0xe000e100
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b089      	sub	sp, #36	; 0x24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f1c3 0307 	rsb	r3, r3, #7
 80021fe:	2b04      	cmp	r3, #4
 8002200:	bf28      	it	cs
 8002202:	2304      	movcs	r3, #4
 8002204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3304      	adds	r3, #4
 800220a:	2b06      	cmp	r3, #6
 800220c:	d902      	bls.n	8002214 <NVIC_EncodePriority+0x30>
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3b03      	subs	r3, #3
 8002212:	e000      	b.n	8002216 <NVIC_EncodePriority+0x32>
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002218:	f04f 32ff 	mov.w	r2, #4294967295
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43da      	mvns	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	401a      	ands	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800222c:	f04f 31ff 	mov.w	r1, #4294967295
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	fa01 f303 	lsl.w	r3, r1, r3
 8002236:	43d9      	mvns	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800223c:	4313      	orrs	r3, r2
         );
}
 800223e:	4618      	mov	r0, r3
 8002240:	3724      	adds	r7, #36	; 0x24
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3b01      	subs	r3, #1
 8002258:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800225c:	d301      	bcc.n	8002262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800225e:	2301      	movs	r3, #1
 8002260:	e00f      	b.n	8002282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002262:	4a0a      	ldr	r2, [pc, #40]	; (800228c <SysTick_Config+0x40>)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3b01      	subs	r3, #1
 8002268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800226a:	210f      	movs	r1, #15
 800226c:	f04f 30ff 	mov.w	r0, #4294967295
 8002270:	f7ff ff8e 	bl	8002190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <SysTick_Config+0x40>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800227a:	4b04      	ldr	r3, [pc, #16]	; (800228c <SysTick_Config+0x40>)
 800227c:	2207      	movs	r2, #7
 800227e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	e000e010 	.word	0xe000e010

08002290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff ff29 	bl	80020f0 <__NVIC_SetPriorityGrouping>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b086      	sub	sp, #24
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	4603      	mov	r3, r0
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
 80022b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022b8:	f7ff ff3e 	bl	8002138 <__NVIC_GetPriorityGrouping>
 80022bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	68b9      	ldr	r1, [r7, #8]
 80022c2:	6978      	ldr	r0, [r7, #20]
 80022c4:	f7ff ff8e 	bl	80021e4 <NVIC_EncodePriority>
 80022c8:	4602      	mov	r2, r0
 80022ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff5d 	bl	8002190 <__NVIC_SetPriority>
}
 80022d6:	bf00      	nop
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	4603      	mov	r3, r0
 80022e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff ff31 	bl	8002154 <__NVIC_EnableIRQ>
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff ffa2 	bl	800224c <SysTick_Config>
 8002308:	4603      	mov	r3, r0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002320:	2b02      	cmp	r3, #2
 8002322:	d008      	beq.n	8002336 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2204      	movs	r2, #4
 8002328:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e020      	b.n	8002378 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 020e 	bic.w	r2, r2, #14
 8002344:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0201 	bic.w	r2, r2, #1
 8002354:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235e:	2101      	movs	r1, #1
 8002360:	fa01 f202 	lsl.w	r2, r1, r2
 8002364:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002396:	2b02      	cmp	r3, #2
 8002398:	d005      	beq.n	80023a6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2204      	movs	r2, #4
 800239e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
 80023a4:	e027      	b.n	80023f6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 020e 	bic.w	r2, r2, #14
 80023b4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0201 	bic.w	r2, r2, #1
 80023c4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ce:	2101      	movs	r1, #1
 80023d0:	fa01 f202 	lsl.w	r2, r1, r2
 80023d4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	4798      	blx	r3
    } 
  }
  return status;
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002400:	b480      	push	{r7}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800240e:	e14e      	b.n	80026ae <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	2101      	movs	r1, #1
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	fa01 f303 	lsl.w	r3, r1, r3
 800241c:	4013      	ands	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 8140 	beq.w	80026a8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	2b01      	cmp	r3, #1
 8002432:	d005      	beq.n	8002440 <HAL_GPIO_Init+0x40>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d130      	bne.n	80024a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	2203      	movs	r2, #3
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4013      	ands	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4313      	orrs	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002476:	2201      	movs	r2, #1
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4013      	ands	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	091b      	lsrs	r3, r3, #4
 800248c:	f003 0201 	and.w	r2, r3, #1
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d017      	beq.n	80024de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	2203      	movs	r2, #3
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4013      	ands	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d123      	bne.n	8002532 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	08da      	lsrs	r2, r3, #3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3208      	adds	r2, #8
 80024f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	220f      	movs	r2, #15
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4013      	ands	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	691a      	ldr	r2, [r3, #16]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	08da      	lsrs	r2, r3, #3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3208      	adds	r2, #8
 800252c:	6939      	ldr	r1, [r7, #16]
 800252e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	2203      	movs	r2, #3
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43db      	mvns	r3, r3
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4013      	ands	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 0203 	and.w	r2, r3, #3
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 809a 	beq.w	80026a8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002574:	4b55      	ldr	r3, [pc, #340]	; (80026cc <HAL_GPIO_Init+0x2cc>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	4a54      	ldr	r2, [pc, #336]	; (80026cc <HAL_GPIO_Init+0x2cc>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	6193      	str	r3, [r2, #24]
 8002580:	4b52      	ldr	r3, [pc, #328]	; (80026cc <HAL_GPIO_Init+0x2cc>)
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800258c:	4a50      	ldr	r2, [pc, #320]	; (80026d0 <HAL_GPIO_Init+0x2d0>)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	089b      	lsrs	r3, r3, #2
 8002592:	3302      	adds	r3, #2
 8002594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002598:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	220f      	movs	r2, #15
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4013      	ands	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025b6:	d013      	beq.n	80025e0 <HAL_GPIO_Init+0x1e0>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a46      	ldr	r2, [pc, #280]	; (80026d4 <HAL_GPIO_Init+0x2d4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d00d      	beq.n	80025dc <HAL_GPIO_Init+0x1dc>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a45      	ldr	r2, [pc, #276]	; (80026d8 <HAL_GPIO_Init+0x2d8>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d007      	beq.n	80025d8 <HAL_GPIO_Init+0x1d8>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a44      	ldr	r2, [pc, #272]	; (80026dc <HAL_GPIO_Init+0x2dc>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d101      	bne.n	80025d4 <HAL_GPIO_Init+0x1d4>
 80025d0:	2303      	movs	r3, #3
 80025d2:	e006      	b.n	80025e2 <HAL_GPIO_Init+0x1e2>
 80025d4:	2305      	movs	r3, #5
 80025d6:	e004      	b.n	80025e2 <HAL_GPIO_Init+0x1e2>
 80025d8:	2302      	movs	r3, #2
 80025da:	e002      	b.n	80025e2 <HAL_GPIO_Init+0x1e2>
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <HAL_GPIO_Init+0x1e2>
 80025e0:	2300      	movs	r3, #0
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	f002 0203 	and.w	r2, r2, #3
 80025e8:	0092      	lsls	r2, r2, #2
 80025ea:	4093      	lsls	r3, r2
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025f2:	4937      	ldr	r1, [pc, #220]	; (80026d0 <HAL_GPIO_Init+0x2d0>)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	089b      	lsrs	r3, r3, #2
 80025f8:	3302      	adds	r3, #2
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002600:	4b37      	ldr	r3, [pc, #220]	; (80026e0 <HAL_GPIO_Init+0x2e0>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	43db      	mvns	r3, r3
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4013      	ands	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d003      	beq.n	8002624 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	4313      	orrs	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002624:	4a2e      	ldr	r2, [pc, #184]	; (80026e0 <HAL_GPIO_Init+0x2e0>)
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800262a:	4b2d      	ldr	r3, [pc, #180]	; (80026e0 <HAL_GPIO_Init+0x2e0>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	43db      	mvns	r3, r3
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	4013      	ands	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4313      	orrs	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800264e:	4a24      	ldr	r2, [pc, #144]	; (80026e0 <HAL_GPIO_Init+0x2e0>)
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002654:	4b22      	ldr	r3, [pc, #136]	; (80026e0 <HAL_GPIO_Init+0x2e0>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	43db      	mvns	r3, r3
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	4013      	ands	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	4313      	orrs	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002678:	4a19      	ldr	r2, [pc, #100]	; (80026e0 <HAL_GPIO_Init+0x2e0>)
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800267e:	4b18      	ldr	r3, [pc, #96]	; (80026e0 <HAL_GPIO_Init+0x2e0>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	43db      	mvns	r3, r3
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	4013      	ands	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4313      	orrs	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80026a2:	4a0f      	ldr	r2, [pc, #60]	; (80026e0 <HAL_GPIO_Init+0x2e0>)
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	3301      	adds	r3, #1
 80026ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	fa22 f303 	lsr.w	r3, r2, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f47f aea9 	bne.w	8002410 <HAL_GPIO_Init+0x10>
  }
}
 80026be:	bf00      	nop
 80026c0:	bf00      	nop
 80026c2:	371c      	adds	r7, #28
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40010000 	.word	0x40010000
 80026d4:	48000400 	.word	0x48000400
 80026d8:	48000800 	.word	0x48000800
 80026dc:	48000c00 	.word	0x48000c00
 80026e0:	40010400 	.word	0x40010400

080026e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026f4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d102      	bne.n	800270a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	f001 b823 	b.w	8003750 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800270a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 817d 	beq.w	8002a1a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002720:	4bbc      	ldr	r3, [pc, #752]	; (8002a14 <HAL_RCC_OscConfig+0x330>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 030c 	and.w	r3, r3, #12
 8002728:	2b04      	cmp	r3, #4
 800272a:	d00c      	beq.n	8002746 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800272c:	4bb9      	ldr	r3, [pc, #740]	; (8002a14 <HAL_RCC_OscConfig+0x330>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 030c 	and.w	r3, r3, #12
 8002734:	2b08      	cmp	r3, #8
 8002736:	d15c      	bne.n	80027f2 <HAL_RCC_OscConfig+0x10e>
 8002738:	4bb6      	ldr	r3, [pc, #728]	; (8002a14 <HAL_RCC_OscConfig+0x330>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002744:	d155      	bne.n	80027f2 <HAL_RCC_OscConfig+0x10e>
 8002746:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800274a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800275a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	095b      	lsrs	r3, r3, #5
 8002766:	b2db      	uxtb	r3, r3
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b01      	cmp	r3, #1
 8002770:	d102      	bne.n	8002778 <HAL_RCC_OscConfig+0x94>
 8002772:	4ba8      	ldr	r3, [pc, #672]	; (8002a14 <HAL_RCC_OscConfig+0x330>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	e015      	b.n	80027a4 <HAL_RCC_OscConfig+0xc0>
 8002778:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800277c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002780:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002784:	fa93 f3a3 	rbit	r3, r3
 8002788:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800278c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002790:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002794:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002798:	fa93 f3a3 	rbit	r3, r3
 800279c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80027a0:	4b9c      	ldr	r3, [pc, #624]	; (8002a14 <HAL_RCC_OscConfig+0x330>)
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027a8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80027ac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80027b0:	fa92 f2a2 	rbit	r2, r2
 80027b4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80027b8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80027bc:	fab2 f282 	clz	r2, r2
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	f042 0220 	orr.w	r2, r2, #32
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	f002 021f 	and.w	r2, r2, #31
 80027cc:	2101      	movs	r1, #1
 80027ce:	fa01 f202 	lsl.w	r2, r1, r2
 80027d2:	4013      	ands	r3, r2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 811f 	beq.w	8002a18 <HAL_RCC_OscConfig+0x334>
 80027da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f040 8116 	bne.w	8002a18 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	f000 bfaf 	b.w	8003750 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002802:	d106      	bne.n	8002812 <HAL_RCC_OscConfig+0x12e>
 8002804:	4b83      	ldr	r3, [pc, #524]	; (8002a14 <HAL_RCC_OscConfig+0x330>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a82      	ldr	r2, [pc, #520]	; (8002a14 <HAL_RCC_OscConfig+0x330>)
 800280a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	e036      	b.n	8002880 <HAL_RCC_OscConfig+0x19c>
 8002812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002816:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10c      	bne.n	800283c <HAL_RCC_OscConfig+0x158>
 8002822:	4b7c      	ldr	r3, [pc, #496]	; (8002a14 <HAL_RCC_OscConfig+0x330>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a7b      	ldr	r2, [pc, #492]	; (8002a14 <HAL_RCC_OscConfig+0x330>)
 8002828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	4b79      	ldr	r3, [pc, #484]	; (8002a14 <HAL_RCC_OscConfig+0x330>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a78      	ldr	r2, [pc, #480]	; (8002a14 <HAL_RCC_OscConfig+0x330>)
 8002834:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	e021      	b.n	8002880 <HAL_RCC_OscConfig+0x19c>
 800283c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002840:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800284c:	d10c      	bne.n	8002868 <HAL_RCC_OscConfig+0x184>
 800284e:	4b71      	ldr	r3, [pc, #452]	; (8002a14 <HAL_RCC_OscConfig+0x330>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a70      	ldr	r2, [pc, #448]	; (8002a14 <HAL_RCC_OscConfig+0x330>)
 8002854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	4b6e      	ldr	r3, [pc, #440]	; (8002a14 <HAL_RCC_OscConfig+0x330>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a6d      	ldr	r2, [pc, #436]	; (8002a14 <HAL_RCC_OscConfig+0x330>)
 8002860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	e00b      	b.n	8002880 <HAL_RCC_OscConfig+0x19c>
 8002868:	4b6a      	ldr	r3, [pc, #424]	; (8002a14 <HAL_RCC_OscConfig+0x330>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a69      	ldr	r2, [pc, #420]	; (8002a14 <HAL_RCC_OscConfig+0x330>)
 800286e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	4b67      	ldr	r3, [pc, #412]	; (8002a14 <HAL_RCC_OscConfig+0x330>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a66      	ldr	r2, [pc, #408]	; (8002a14 <HAL_RCC_OscConfig+0x330>)
 800287a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800287e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002880:	4b64      	ldr	r3, [pc, #400]	; (8002a14 <HAL_RCC_OscConfig+0x330>)
 8002882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002884:	f023 020f 	bic.w	r2, r3, #15
 8002888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	495f      	ldr	r1, [pc, #380]	; (8002a14 <HAL_RCC_OscConfig+0x330>)
 8002896:	4313      	orrs	r3, r2
 8002898:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800289a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d059      	beq.n	800295e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028aa:	f7ff fc15 	bl	80020d8 <HAL_GetTick>
 80028ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028b4:	f7ff fc10 	bl	80020d8 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b64      	cmp	r3, #100	; 0x64
 80028c2:	d902      	bls.n	80028ca <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	f000 bf43 	b.w	8003750 <HAL_RCC_OscConfig+0x106c>
 80028ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028ce:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80028d6:	fa93 f3a3 	rbit	r3, r3
 80028da:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80028de:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e2:	fab3 f383 	clz	r3, r3
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	095b      	lsrs	r3, r3, #5
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d102      	bne.n	80028fc <HAL_RCC_OscConfig+0x218>
 80028f6:	4b47      	ldr	r3, [pc, #284]	; (8002a14 <HAL_RCC_OscConfig+0x330>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	e015      	b.n	8002928 <HAL_RCC_OscConfig+0x244>
 80028fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002900:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002904:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002908:	fa93 f3a3 	rbit	r3, r3
 800290c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002910:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002914:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002918:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800291c:	fa93 f3a3 	rbit	r3, r3
 8002920:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002924:	4b3b      	ldr	r3, [pc, #236]	; (8002a14 <HAL_RCC_OscConfig+0x330>)
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800292c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002930:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002934:	fa92 f2a2 	rbit	r2, r2
 8002938:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800293c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002940:	fab2 f282 	clz	r2, r2
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	f042 0220 	orr.w	r2, r2, #32
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	f002 021f 	and.w	r2, r2, #31
 8002950:	2101      	movs	r1, #1
 8002952:	fa01 f202 	lsl.w	r2, r1, r2
 8002956:	4013      	ands	r3, r2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0ab      	beq.n	80028b4 <HAL_RCC_OscConfig+0x1d0>
 800295c:	e05d      	b.n	8002a1a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295e:	f7ff fbbb 	bl	80020d8 <HAL_GetTick>
 8002962:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002966:	e00a      	b.n	800297e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002968:	f7ff fbb6 	bl	80020d8 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b64      	cmp	r3, #100	; 0x64
 8002976:	d902      	bls.n	800297e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	f000 bee9 	b.w	8003750 <HAL_RCC_OscConfig+0x106c>
 800297e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002982:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800298a:	fa93 f3a3 	rbit	r3, r3
 800298e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002992:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002996:	fab3 f383 	clz	r3, r3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	095b      	lsrs	r3, r3, #5
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d102      	bne.n	80029b0 <HAL_RCC_OscConfig+0x2cc>
 80029aa:	4b1a      	ldr	r3, [pc, #104]	; (8002a14 <HAL_RCC_OscConfig+0x330>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	e015      	b.n	80029dc <HAL_RCC_OscConfig+0x2f8>
 80029b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029b4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80029bc:	fa93 f3a3 	rbit	r3, r3
 80029c0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80029c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029c8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80029cc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80029d0:	fa93 f3a3 	rbit	r3, r3
 80029d4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80029d8:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <HAL_RCC_OscConfig+0x330>)
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029e0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80029e4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80029e8:	fa92 f2a2 	rbit	r2, r2
 80029ec:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80029f0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80029f4:	fab2 f282 	clz	r2, r2
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	f042 0220 	orr.w	r2, r2, #32
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	f002 021f 	and.w	r2, r2, #31
 8002a04:	2101      	movs	r1, #1
 8002a06:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1ab      	bne.n	8002968 <HAL_RCC_OscConfig+0x284>
 8002a10:	e003      	b.n	8002a1a <HAL_RCC_OscConfig+0x336>
 8002a12:	bf00      	nop
 8002a14:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 817d 	beq.w	8002d2a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a30:	4ba6      	ldr	r3, [pc, #664]	; (8002ccc <HAL_RCC_OscConfig+0x5e8>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 030c 	and.w	r3, r3, #12
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00b      	beq.n	8002a54 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a3c:	4ba3      	ldr	r3, [pc, #652]	; (8002ccc <HAL_RCC_OscConfig+0x5e8>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 030c 	and.w	r3, r3, #12
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d172      	bne.n	8002b2e <HAL_RCC_OscConfig+0x44a>
 8002a48:	4ba0      	ldr	r3, [pc, #640]	; (8002ccc <HAL_RCC_OscConfig+0x5e8>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d16c      	bne.n	8002b2e <HAL_RCC_OscConfig+0x44a>
 8002a54:	2302      	movs	r3, #2
 8002a56:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002a5e:	fa93 f3a3 	rbit	r3, r3
 8002a62:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002a66:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6a:	fab3 f383 	clz	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	095b      	lsrs	r3, r3, #5
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d102      	bne.n	8002a84 <HAL_RCC_OscConfig+0x3a0>
 8002a7e:	4b93      	ldr	r3, [pc, #588]	; (8002ccc <HAL_RCC_OscConfig+0x5e8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	e013      	b.n	8002aac <HAL_RCC_OscConfig+0x3c8>
 8002a84:	2302      	movs	r3, #2
 8002a86:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002a8e:	fa93 f3a3 	rbit	r3, r3
 8002a92:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002a96:	2302      	movs	r3, #2
 8002a98:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002a9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002aa0:	fa93 f3a3 	rbit	r3, r3
 8002aa4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002aa8:	4b88      	ldr	r3, [pc, #544]	; (8002ccc <HAL_RCC_OscConfig+0x5e8>)
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	2202      	movs	r2, #2
 8002aae:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002ab2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002ab6:	fa92 f2a2 	rbit	r2, r2
 8002aba:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002abe:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002ac2:	fab2 f282 	clz	r2, r2
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	f042 0220 	orr.w	r2, r2, #32
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	f002 021f 	and.w	r2, r2, #31
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00a      	beq.n	8002af4 <HAL_RCC_OscConfig+0x410>
 8002ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d002      	beq.n	8002af4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	f000 be2e 	b.w	8003750 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af4:	4b75      	ldr	r3, [pc, #468]	; (8002ccc <HAL_RCC_OscConfig+0x5e8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	21f8      	movs	r1, #248	; 0xf8
 8002b0a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002b12:	fa91 f1a1 	rbit	r1, r1
 8002b16:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002b1a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002b1e:	fab1 f181 	clz	r1, r1
 8002b22:	b2c9      	uxtb	r1, r1
 8002b24:	408b      	lsls	r3, r1
 8002b26:	4969      	ldr	r1, [pc, #420]	; (8002ccc <HAL_RCC_OscConfig+0x5e8>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2c:	e0fd      	b.n	8002d2a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 8088 	beq.w	8002c50 <HAL_RCC_OscConfig+0x56c>
 8002b40:	2301      	movs	r3, #1
 8002b42:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b46:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002b4a:	fa93 f3a3 	rbit	r3, r3
 8002b4e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002b52:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b56:	fab3 f383 	clz	r3, r3
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	461a      	mov	r2, r3
 8002b68:	2301      	movs	r3, #1
 8002b6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6c:	f7ff fab4 	bl	80020d8 <HAL_GetTick>
 8002b70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b74:	e00a      	b.n	8002b8c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b76:	f7ff faaf 	bl	80020d8 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d902      	bls.n	8002b8c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	f000 bde2 	b.w	8003750 <HAL_RCC_OscConfig+0x106c>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002b9e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba2:	fab3 f383 	clz	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	095b      	lsrs	r3, r3, #5
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d102      	bne.n	8002bbc <HAL_RCC_OscConfig+0x4d8>
 8002bb6:	4b45      	ldr	r3, [pc, #276]	; (8002ccc <HAL_RCC_OscConfig+0x5e8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	e013      	b.n	8002be4 <HAL_RCC_OscConfig+0x500>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002bc6:	fa93 f3a3 	rbit	r3, r3
 8002bca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002bce:	2302      	movs	r3, #2
 8002bd0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002bd4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002bd8:	fa93 f3a3 	rbit	r3, r3
 8002bdc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002be0:	4b3a      	ldr	r3, [pc, #232]	; (8002ccc <HAL_RCC_OscConfig+0x5e8>)
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	2202      	movs	r2, #2
 8002be6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002bea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002bee:	fa92 f2a2 	rbit	r2, r2
 8002bf2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002bf6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002bfa:	fab2 f282 	clz	r2, r2
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	f042 0220 	orr.w	r2, r2, #32
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	f002 021f 	and.w	r2, r2, #31
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0af      	beq.n	8002b76 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c16:	4b2d      	ldr	r3, [pc, #180]	; (8002ccc <HAL_RCC_OscConfig+0x5e8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	21f8      	movs	r1, #248	; 0xf8
 8002c2c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c30:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002c34:	fa91 f1a1 	rbit	r1, r1
 8002c38:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002c3c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002c40:	fab1 f181 	clz	r1, r1
 8002c44:	b2c9      	uxtb	r1, r1
 8002c46:	408b      	lsls	r3, r1
 8002c48:	4920      	ldr	r1, [pc, #128]	; (8002ccc <HAL_RCC_OscConfig+0x5e8>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]
 8002c4e:	e06c      	b.n	8002d2a <HAL_RCC_OscConfig+0x646>
 8002c50:	2301      	movs	r3, #1
 8002c52:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c56:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002c5a:	fa93 f3a3 	rbit	r3, r3
 8002c5e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002c62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c66:	fab3 f383 	clz	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	461a      	mov	r2, r3
 8002c78:	2300      	movs	r3, #0
 8002c7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7c:	f7ff fa2c 	bl	80020d8 <HAL_GetTick>
 8002c80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c84:	e00a      	b.n	8002c9c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c86:	f7ff fa27 	bl	80020d8 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d902      	bls.n	8002c9c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	f000 bd5a 	b.w	8003750 <HAL_RCC_OscConfig+0x106c>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002cae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb2:	fab3 f383 	clz	r3, r3
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	095b      	lsrs	r3, r3, #5
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d104      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x5ec>
 8002cc6:	4b01      	ldr	r3, [pc, #4]	; (8002ccc <HAL_RCC_OscConfig+0x5e8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	e015      	b.n	8002cf8 <HAL_RCC_OscConfig+0x614>
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002cda:	fa93 f3a3 	rbit	r3, r3
 8002cde:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002ce8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002cec:	fa93 f3a3 	rbit	r3, r3
 8002cf0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002cf4:	4bc8      	ldr	r3, [pc, #800]	; (8003018 <HAL_RCC_OscConfig+0x934>)
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002cfe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002d02:	fa92 f2a2 	rbit	r2, r2
 8002d06:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002d0a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002d0e:	fab2 f282 	clz	r2, r2
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	f042 0220 	orr.w	r2, r2, #32
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	f002 021f 	and.w	r2, r2, #31
 8002d1e:	2101      	movs	r1, #1
 8002d20:	fa01 f202 	lsl.w	r2, r1, r2
 8002d24:	4013      	ands	r3, r2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1ad      	bne.n	8002c86 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 8110 	beq.w	8002f60 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d079      	beq.n	8002e44 <HAL_RCC_OscConfig+0x760>
 8002d50:	2301      	movs	r3, #1
 8002d52:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d56:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002d5a:	fa93 f3a3 	rbit	r3, r3
 8002d5e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d66:	fab3 f383 	clz	r3, r3
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4bab      	ldr	r3, [pc, #684]	; (800301c <HAL_RCC_OscConfig+0x938>)
 8002d70:	4413      	add	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	461a      	mov	r2, r3
 8002d76:	2301      	movs	r3, #1
 8002d78:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7a:	f7ff f9ad 	bl	80020d8 <HAL_GetTick>
 8002d7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d82:	e00a      	b.n	8002d9a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d84:	f7ff f9a8 	bl	80020d8 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d902      	bls.n	8002d9a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	f000 bcdb 	b.w	8003750 <HAL_RCC_OscConfig+0x106c>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002db4:	2202      	movs	r2, #2
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dbc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	fa93 f2a3 	rbit	r2, r3
 8002dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002dd8:	2202      	movs	r2, #2
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	fa93 f2a3 	rbit	r2, r3
 8002dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002df2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df4:	4b88      	ldr	r3, [pc, #544]	; (8003018 <HAL_RCC_OscConfig+0x934>)
 8002df6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e00:	2102      	movs	r1, #2
 8002e02:	6019      	str	r1, [r3, #0]
 8002e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e08:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	fa93 f1a3 	rbit	r1, r3
 8002e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e16:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e1a:	6019      	str	r1, [r3, #0]
  return result;
 8002e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e20:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	fab3 f383 	clz	r3, r3
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	f003 031f 	and.w	r3, r3, #31
 8002e36:	2101      	movs	r1, #1
 8002e38:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0a0      	beq.n	8002d84 <HAL_RCC_OscConfig+0x6a0>
 8002e42:	e08d      	b.n	8002f60 <HAL_RCC_OscConfig+0x87c>
 8002e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e48:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e54:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	fa93 f2a3 	rbit	r2, r3
 8002e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e62:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e66:	601a      	str	r2, [r3, #0]
  return result;
 8002e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e6c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e70:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e72:	fab3 f383 	clz	r3, r3
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4b68      	ldr	r3, [pc, #416]	; (800301c <HAL_RCC_OscConfig+0x938>)
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	461a      	mov	r2, r3
 8002e82:	2300      	movs	r3, #0
 8002e84:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e86:	f7ff f927 	bl	80020d8 <HAL_GetTick>
 8002e8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e90:	f7ff f922 	bl	80020d8 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d902      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	f000 bc55 	b.w	8003750 <HAL_RCC_OscConfig+0x106c>
 8002ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eaa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002eae:	2202      	movs	r2, #2
 8002eb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	fa93 f2a3 	rbit	r2, r3
 8002ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ece:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eda:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	fa93 f2a3 	rbit	r2, r3
 8002ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	fa93 f2a3 	rbit	r2, r3
 8002f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002f10:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f12:	4b41      	ldr	r3, [pc, #260]	; (8003018 <HAL_RCC_OscConfig+0x934>)
 8002f14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002f1e:	2102      	movs	r1, #2
 8002f20:	6019      	str	r1, [r3, #0]
 8002f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f26:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	fa93 f1a3 	rbit	r1, r3
 8002f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f34:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002f38:	6019      	str	r1, [r3, #0]
  return result;
 8002f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	fab3 f383 	clz	r3, r3
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	2101      	movs	r1, #1
 8002f56:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d197      	bne.n	8002e90 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 81a1 	beq.w	80032b8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f76:	2300      	movs	r3, #0
 8002f78:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f7c:	4b26      	ldr	r3, [pc, #152]	; (8003018 <HAL_RCC_OscConfig+0x934>)
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d116      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f88:	4b23      	ldr	r3, [pc, #140]	; (8003018 <HAL_RCC_OscConfig+0x934>)
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	4a22      	ldr	r2, [pc, #136]	; (8003018 <HAL_RCC_OscConfig+0x934>)
 8002f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f92:	61d3      	str	r3, [r2, #28]
 8002f94:	4b20      	ldr	r3, [pc, #128]	; (8003018 <HAL_RCC_OscConfig+0x934>)
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002faa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002fae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb6:	4b1a      	ldr	r3, [pc, #104]	; (8003020 <HAL_RCC_OscConfig+0x93c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d11a      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fc2:	4b17      	ldr	r3, [pc, #92]	; (8003020 <HAL_RCC_OscConfig+0x93c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a16      	ldr	r2, [pc, #88]	; (8003020 <HAL_RCC_OscConfig+0x93c>)
 8002fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fcc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fce:	f7ff f883 	bl	80020d8 <HAL_GetTick>
 8002fd2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd6:	e009      	b.n	8002fec <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd8:	f7ff f87e 	bl	80020d8 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b64      	cmp	r3, #100	; 0x64
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e3b1      	b.n	8003750 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fec:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <HAL_RCC_OscConfig+0x93c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0ef      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ffc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d10d      	bne.n	8003024 <HAL_RCC_OscConfig+0x940>
 8003008:	4b03      	ldr	r3, [pc, #12]	; (8003018 <HAL_RCC_OscConfig+0x934>)
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	4a02      	ldr	r2, [pc, #8]	; (8003018 <HAL_RCC_OscConfig+0x934>)
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	6213      	str	r3, [r2, #32]
 8003014:	e03c      	b.n	8003090 <HAL_RCC_OscConfig+0x9ac>
 8003016:	bf00      	nop
 8003018:	40021000 	.word	0x40021000
 800301c:	10908120 	.word	0x10908120
 8003020:	40007000 	.word	0x40007000
 8003024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003028:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10c      	bne.n	800304e <HAL_RCC_OscConfig+0x96a>
 8003034:	4bc1      	ldr	r3, [pc, #772]	; (800333c <HAL_RCC_OscConfig+0xc58>)
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	4ac0      	ldr	r2, [pc, #768]	; (800333c <HAL_RCC_OscConfig+0xc58>)
 800303a:	f023 0301 	bic.w	r3, r3, #1
 800303e:	6213      	str	r3, [r2, #32]
 8003040:	4bbe      	ldr	r3, [pc, #760]	; (800333c <HAL_RCC_OscConfig+0xc58>)
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	4abd      	ldr	r2, [pc, #756]	; (800333c <HAL_RCC_OscConfig+0xc58>)
 8003046:	f023 0304 	bic.w	r3, r3, #4
 800304a:	6213      	str	r3, [r2, #32]
 800304c:	e020      	b.n	8003090 <HAL_RCC_OscConfig+0x9ac>
 800304e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003052:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	2b05      	cmp	r3, #5
 800305c:	d10c      	bne.n	8003078 <HAL_RCC_OscConfig+0x994>
 800305e:	4bb7      	ldr	r3, [pc, #732]	; (800333c <HAL_RCC_OscConfig+0xc58>)
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	4ab6      	ldr	r2, [pc, #728]	; (800333c <HAL_RCC_OscConfig+0xc58>)
 8003064:	f043 0304 	orr.w	r3, r3, #4
 8003068:	6213      	str	r3, [r2, #32]
 800306a:	4bb4      	ldr	r3, [pc, #720]	; (800333c <HAL_RCC_OscConfig+0xc58>)
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	4ab3      	ldr	r2, [pc, #716]	; (800333c <HAL_RCC_OscConfig+0xc58>)
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	6213      	str	r3, [r2, #32]
 8003076:	e00b      	b.n	8003090 <HAL_RCC_OscConfig+0x9ac>
 8003078:	4bb0      	ldr	r3, [pc, #704]	; (800333c <HAL_RCC_OscConfig+0xc58>)
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	4aaf      	ldr	r2, [pc, #700]	; (800333c <HAL_RCC_OscConfig+0xc58>)
 800307e:	f023 0301 	bic.w	r3, r3, #1
 8003082:	6213      	str	r3, [r2, #32]
 8003084:	4bad      	ldr	r3, [pc, #692]	; (800333c <HAL_RCC_OscConfig+0xc58>)
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	4aac      	ldr	r2, [pc, #688]	; (800333c <HAL_RCC_OscConfig+0xc58>)
 800308a:	f023 0304 	bic.w	r3, r3, #4
 800308e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003094:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 8081 	beq.w	80031a4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a2:	f7ff f819 	bl	80020d8 <HAL_GetTick>
 80030a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030aa:	e00b      	b.n	80030c4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ac:	f7ff f814 	bl	80020d8 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030bc:	4293      	cmp	r3, r2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e345      	b.n	8003750 <HAL_RCC_OscConfig+0x106c>
 80030c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80030cc:	2202      	movs	r2, #2
 80030ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	fa93 f2a3 	rbit	r2, r3
 80030de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80030f0:	2202      	movs	r2, #2
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	fa93 f2a3 	rbit	r2, r3
 8003102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003106:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800310a:	601a      	str	r2, [r3, #0]
  return result;
 800310c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003110:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003114:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003116:	fab3 f383 	clz	r3, r3
 800311a:	b2db      	uxtb	r3, r3
 800311c:	095b      	lsrs	r3, r3, #5
 800311e:	b2db      	uxtb	r3, r3
 8003120:	f043 0302 	orr.w	r3, r3, #2
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d102      	bne.n	8003130 <HAL_RCC_OscConfig+0xa4c>
 800312a:	4b84      	ldr	r3, [pc, #528]	; (800333c <HAL_RCC_OscConfig+0xc58>)
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	e013      	b.n	8003158 <HAL_RCC_OscConfig+0xa74>
 8003130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003134:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003138:	2202      	movs	r2, #2
 800313a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003140:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	fa93 f2a3 	rbit	r2, r3
 800314a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	4b79      	ldr	r3, [pc, #484]	; (800333c <HAL_RCC_OscConfig+0xc58>)
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800315c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003160:	2102      	movs	r1, #2
 8003162:	6011      	str	r1, [r2, #0]
 8003164:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003168:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800316c:	6812      	ldr	r2, [r2, #0]
 800316e:	fa92 f1a2 	rbit	r1, r2
 8003172:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003176:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800317a:	6011      	str	r1, [r2, #0]
  return result;
 800317c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003180:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003184:	6812      	ldr	r2, [r2, #0]
 8003186:	fab2 f282 	clz	r2, r2
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	f002 021f 	and.w	r2, r2, #31
 8003196:	2101      	movs	r1, #1
 8003198:	fa01 f202 	lsl.w	r2, r1, r2
 800319c:	4013      	ands	r3, r2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d084      	beq.n	80030ac <HAL_RCC_OscConfig+0x9c8>
 80031a2:	e07f      	b.n	80032a4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a4:	f7fe ff98 	bl	80020d8 <HAL_GetTick>
 80031a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ac:	e00b      	b.n	80031c6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ae:	f7fe ff93 	bl	80020d8 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e2c4      	b.n	8003750 <HAL_RCC_OscConfig+0x106c>
 80031c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80031ce:	2202      	movs	r2, #2
 80031d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	fa93 f2a3 	rbit	r2, r3
 80031e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80031f2:	2202      	movs	r2, #2
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	fa93 f2a3 	rbit	r2, r3
 8003204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003208:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800320c:	601a      	str	r2, [r3, #0]
  return result;
 800320e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003212:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003216:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003218:	fab3 f383 	clz	r3, r3
 800321c:	b2db      	uxtb	r3, r3
 800321e:	095b      	lsrs	r3, r3, #5
 8003220:	b2db      	uxtb	r3, r3
 8003222:	f043 0302 	orr.w	r3, r3, #2
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d102      	bne.n	8003232 <HAL_RCC_OscConfig+0xb4e>
 800322c:	4b43      	ldr	r3, [pc, #268]	; (800333c <HAL_RCC_OscConfig+0xc58>)
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	e013      	b.n	800325a <HAL_RCC_OscConfig+0xb76>
 8003232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003236:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800323a:	2202      	movs	r2, #2
 800323c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003242:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	fa93 f2a3 	rbit	r2, r3
 800324c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003250:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	4b39      	ldr	r3, [pc, #228]	; (800333c <HAL_RCC_OscConfig+0xc58>)
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800325e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003262:	2102      	movs	r1, #2
 8003264:	6011      	str	r1, [r2, #0]
 8003266:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800326a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800326e:	6812      	ldr	r2, [r2, #0]
 8003270:	fa92 f1a2 	rbit	r1, r2
 8003274:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003278:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800327c:	6011      	str	r1, [r2, #0]
  return result;
 800327e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003282:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003286:	6812      	ldr	r2, [r2, #0]
 8003288:	fab2 f282 	clz	r2, r2
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	f002 021f 	and.w	r2, r2, #31
 8003298:	2101      	movs	r1, #1
 800329a:	fa01 f202 	lsl.w	r2, r1, r2
 800329e:	4013      	ands	r3, r2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d184      	bne.n	80031ae <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032a4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d105      	bne.n	80032b8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ac:	4b23      	ldr	r3, [pc, #140]	; (800333c <HAL_RCC_OscConfig+0xc58>)
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	4a22      	ldr	r2, [pc, #136]	; (800333c <HAL_RCC_OscConfig+0xc58>)
 80032b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032b6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 8242 	beq.w	800374e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ca:	4b1c      	ldr	r3, [pc, #112]	; (800333c <HAL_RCC_OscConfig+0xc58>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f003 030c 	and.w	r3, r3, #12
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	f000 8213 	beq.w	80036fe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	f040 8162 	bne.w	80035ae <HAL_RCC_OscConfig+0xeca>
 80032ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ee:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80032f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	fa93 f2a3 	rbit	r2, r3
 8003306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800330e:	601a      	str	r2, [r3, #0]
  return result;
 8003310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003314:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003318:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800331a:	fab3 f383 	clz	r3, r3
 800331e:	b2db      	uxtb	r3, r3
 8003320:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003324:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	461a      	mov	r2, r3
 800332c:	2300      	movs	r3, #0
 800332e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003330:	f7fe fed2 	bl	80020d8 <HAL_GetTick>
 8003334:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003338:	e00c      	b.n	8003354 <HAL_RCC_OscConfig+0xc70>
 800333a:	bf00      	nop
 800333c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003340:	f7fe feca 	bl	80020d8 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e1fd      	b.n	8003750 <HAL_RCC_OscConfig+0x106c>
 8003354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003358:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800335c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003360:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003366:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	fa93 f2a3 	rbit	r2, r3
 8003370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003374:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003378:	601a      	str	r2, [r3, #0]
  return result;
 800337a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003382:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003384:	fab3 f383 	clz	r3, r3
 8003388:	b2db      	uxtb	r3, r3
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	b2db      	uxtb	r3, r3
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b01      	cmp	r3, #1
 8003396:	d102      	bne.n	800339e <HAL_RCC_OscConfig+0xcba>
 8003398:	4bb0      	ldr	r3, [pc, #704]	; (800365c <HAL_RCC_OscConfig+0xf78>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	e027      	b.n	80033ee <HAL_RCC_OscConfig+0xd0a>
 800339e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80033a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	fa93 f2a3 	rbit	r2, r3
 80033ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033be:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80033cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	fa93 f2a3 	rbit	r2, r3
 80033e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	4b9c      	ldr	r3, [pc, #624]	; (800365c <HAL_RCC_OscConfig+0xf78>)
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033f2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80033f6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033fa:	6011      	str	r1, [r2, #0]
 80033fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003400:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003404:	6812      	ldr	r2, [r2, #0]
 8003406:	fa92 f1a2 	rbit	r1, r2
 800340a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800340e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003412:	6011      	str	r1, [r2, #0]
  return result;
 8003414:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003418:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800341c:	6812      	ldr	r2, [r2, #0]
 800341e:	fab2 f282 	clz	r2, r2
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	f042 0220 	orr.w	r2, r2, #32
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	f002 021f 	and.w	r2, r2, #31
 800342e:	2101      	movs	r1, #1
 8003430:	fa01 f202 	lsl.w	r2, r1, r2
 8003434:	4013      	ands	r3, r2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d182      	bne.n	8003340 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800343a:	4b88      	ldr	r3, [pc, #544]	; (800365c <HAL_RCC_OscConfig+0xf78>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003446:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800344e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003452:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	430b      	orrs	r3, r1
 800345c:	497f      	ldr	r1, [pc, #508]	; (800365c <HAL_RCC_OscConfig+0xf78>)
 800345e:	4313      	orrs	r3, r2
 8003460:	604b      	str	r3, [r1, #4]
 8003462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003466:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800346a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800346e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003474:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	fa93 f2a3 	rbit	r2, r3
 800347e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003482:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003486:	601a      	str	r2, [r3, #0]
  return result;
 8003488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003490:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003492:	fab3 f383 	clz	r3, r3
 8003496:	b2db      	uxtb	r3, r3
 8003498:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800349c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	461a      	mov	r2, r3
 80034a4:	2301      	movs	r3, #1
 80034a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a8:	f7fe fe16 	bl	80020d8 <HAL_GetTick>
 80034ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034b0:	e009      	b.n	80034c6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b2:	f7fe fe11 	bl	80020d8 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e144      	b.n	8003750 <HAL_RCC_OscConfig+0x106c>
 80034c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ca:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80034ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	fa93 f2a3 	rbit	r2, r3
 80034e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80034ea:	601a      	str	r2, [r3, #0]
  return result;
 80034ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80034f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034f6:	fab3 f383 	clz	r3, r3
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	095b      	lsrs	r3, r3, #5
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b01      	cmp	r3, #1
 8003508:	d102      	bne.n	8003510 <HAL_RCC_OscConfig+0xe2c>
 800350a:	4b54      	ldr	r3, [pc, #336]	; (800365c <HAL_RCC_OscConfig+0xf78>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	e027      	b.n	8003560 <HAL_RCC_OscConfig+0xe7c>
 8003510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003514:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003518:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800351c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003522:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	fa93 f2a3 	rbit	r2, r3
 800352c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003530:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800353e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003548:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	fa93 f2a3 	rbit	r2, r3
 8003552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003556:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	4b3f      	ldr	r3, [pc, #252]	; (800365c <HAL_RCC_OscConfig+0xf78>)
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003564:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003568:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800356c:	6011      	str	r1, [r2, #0]
 800356e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003572:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003576:	6812      	ldr	r2, [r2, #0]
 8003578:	fa92 f1a2 	rbit	r1, r2
 800357c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003580:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003584:	6011      	str	r1, [r2, #0]
  return result;
 8003586:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800358a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800358e:	6812      	ldr	r2, [r2, #0]
 8003590:	fab2 f282 	clz	r2, r2
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	f042 0220 	orr.w	r2, r2, #32
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	f002 021f 	and.w	r2, r2, #31
 80035a0:	2101      	movs	r1, #1
 80035a2:	fa01 f202 	lsl.w	r2, r1, r2
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d082      	beq.n	80034b2 <HAL_RCC_OscConfig+0xdce>
 80035ac:	e0cf      	b.n	800374e <HAL_RCC_OscConfig+0x106a>
 80035ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80035b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	fa93 f2a3 	rbit	r2, r3
 80035ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ce:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80035d2:	601a      	str	r2, [r3, #0]
  return result;
 80035d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80035dc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035de:	fab3 f383 	clz	r3, r3
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	461a      	mov	r2, r3
 80035f0:	2300      	movs	r3, #0
 80035f2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f4:	f7fe fd70 	bl	80020d8 <HAL_GetTick>
 80035f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035fc:	e009      	b.n	8003612 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035fe:	f7fe fd6b 	bl	80020d8 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e09e      	b.n	8003750 <HAL_RCC_OscConfig+0x106c>
 8003612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003616:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800361a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800361e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003624:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	fa93 f2a3 	rbit	r2, r3
 800362e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003632:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003636:	601a      	str	r2, [r3, #0]
  return result;
 8003638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800363c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003640:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003642:	fab3 f383 	clz	r3, r3
 8003646:	b2db      	uxtb	r3, r3
 8003648:	095b      	lsrs	r3, r3, #5
 800364a:	b2db      	uxtb	r3, r3
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b01      	cmp	r3, #1
 8003654:	d104      	bne.n	8003660 <HAL_RCC_OscConfig+0xf7c>
 8003656:	4b01      	ldr	r3, [pc, #4]	; (800365c <HAL_RCC_OscConfig+0xf78>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	e029      	b.n	80036b0 <HAL_RCC_OscConfig+0xfcc>
 800365c:	40021000 	.word	0x40021000
 8003660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003664:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003668:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800366c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003672:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	fa93 f2a3 	rbit	r2, r3
 800367c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003680:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800368a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800368e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003698:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	fa93 f2a3 	rbit	r2, r3
 80036a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	4b2b      	ldr	r3, [pc, #172]	; (800375c <HAL_RCC_OscConfig+0x1078>)
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036b4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80036b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036bc:	6011      	str	r1, [r2, #0]
 80036be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036c2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80036c6:	6812      	ldr	r2, [r2, #0]
 80036c8:	fa92 f1a2 	rbit	r1, r2
 80036cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036d0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80036d4:	6011      	str	r1, [r2, #0]
  return result;
 80036d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036da:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80036de:	6812      	ldr	r2, [r2, #0]
 80036e0:	fab2 f282 	clz	r2, r2
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	f042 0220 	orr.w	r2, r2, #32
 80036ea:	b2d2      	uxtb	r2, r2
 80036ec:	f002 021f 	and.w	r2, r2, #31
 80036f0:	2101      	movs	r1, #1
 80036f2:	fa01 f202 	lsl.w	r2, r1, r2
 80036f6:	4013      	ands	r3, r2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d180      	bne.n	80035fe <HAL_RCC_OscConfig+0xf1a>
 80036fc:	e027      	b.n	800374e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003702:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e01e      	b.n	8003750 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003712:	4b12      	ldr	r3, [pc, #72]	; (800375c <HAL_RCC_OscConfig+0x1078>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800371a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800371e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003726:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	429a      	cmp	r2, r3
 8003730:	d10b      	bne.n	800374a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003732:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003736:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800373a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800373e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003746:	429a      	cmp	r2, r3
 8003748:	d001      	beq.n	800374e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40021000 	.word	0x40021000

08003760 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b09e      	sub	sp, #120	; 0x78
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800376a:	2300      	movs	r3, #0
 800376c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e162      	b.n	8003a3e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003778:	4b90      	ldr	r3, [pc, #576]	; (80039bc <HAL_RCC_ClockConfig+0x25c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d910      	bls.n	80037a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003786:	4b8d      	ldr	r3, [pc, #564]	; (80039bc <HAL_RCC_ClockConfig+0x25c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f023 0207 	bic.w	r2, r3, #7
 800378e:	498b      	ldr	r1, [pc, #556]	; (80039bc <HAL_RCC_ClockConfig+0x25c>)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	4313      	orrs	r3, r2
 8003794:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003796:	4b89      	ldr	r3, [pc, #548]	; (80039bc <HAL_RCC_ClockConfig+0x25c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d001      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e14a      	b.n	8003a3e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d008      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b4:	4b82      	ldr	r3, [pc, #520]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	497f      	ldr	r1, [pc, #508]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 80dc 	beq.w	800398c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d13c      	bne.n	8003856 <HAL_RCC_ClockConfig+0xf6>
 80037dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037e4:	fa93 f3a3 	rbit	r3, r3
 80037e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80037ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ec:	fab3 f383 	clz	r3, r3
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	095b      	lsrs	r3, r3, #5
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	f043 0301 	orr.w	r3, r3, #1
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d102      	bne.n	8003806 <HAL_RCC_ClockConfig+0xa6>
 8003800:	4b6f      	ldr	r3, [pc, #444]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	e00f      	b.n	8003826 <HAL_RCC_ClockConfig+0xc6>
 8003806:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800380a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800380e:	fa93 f3a3 	rbit	r3, r3
 8003812:	667b      	str	r3, [r7, #100]	; 0x64
 8003814:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003818:	663b      	str	r3, [r7, #96]	; 0x60
 800381a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800381c:	fa93 f3a3 	rbit	r3, r3
 8003820:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003822:	4b67      	ldr	r3, [pc, #412]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800382a:	65ba      	str	r2, [r7, #88]	; 0x58
 800382c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800382e:	fa92 f2a2 	rbit	r2, r2
 8003832:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003834:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003836:	fab2 f282 	clz	r2, r2
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	f042 0220 	orr.w	r2, r2, #32
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	f002 021f 	and.w	r2, r2, #31
 8003846:	2101      	movs	r1, #1
 8003848:	fa01 f202 	lsl.w	r2, r1, r2
 800384c:	4013      	ands	r3, r2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d17b      	bne.n	800394a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e0f3      	b.n	8003a3e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b02      	cmp	r3, #2
 800385c:	d13c      	bne.n	80038d8 <HAL_RCC_ClockConfig+0x178>
 800385e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003862:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003866:	fa93 f3a3 	rbit	r3, r3
 800386a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800386c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386e:	fab3 f383 	clz	r3, r3
 8003872:	b2db      	uxtb	r3, r3
 8003874:	095b      	lsrs	r3, r3, #5
 8003876:	b2db      	uxtb	r3, r3
 8003878:	f043 0301 	orr.w	r3, r3, #1
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b01      	cmp	r3, #1
 8003880:	d102      	bne.n	8003888 <HAL_RCC_ClockConfig+0x128>
 8003882:	4b4f      	ldr	r3, [pc, #316]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	e00f      	b.n	80038a8 <HAL_RCC_ClockConfig+0x148>
 8003888:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800388c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003890:	fa93 f3a3 	rbit	r3, r3
 8003894:	647b      	str	r3, [r7, #68]	; 0x44
 8003896:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800389a:	643b      	str	r3, [r7, #64]	; 0x40
 800389c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800389e:	fa93 f3a3 	rbit	r3, r3
 80038a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038a4:	4b46      	ldr	r3, [pc, #280]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038ac:	63ba      	str	r2, [r7, #56]	; 0x38
 80038ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038b0:	fa92 f2a2 	rbit	r2, r2
 80038b4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80038b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038b8:	fab2 f282 	clz	r2, r2
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	f042 0220 	orr.w	r2, r2, #32
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	f002 021f 	and.w	r2, r2, #31
 80038c8:	2101      	movs	r1, #1
 80038ca:	fa01 f202 	lsl.w	r2, r1, r2
 80038ce:	4013      	ands	r3, r2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d13a      	bne.n	800394a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0b2      	b.n	8003a3e <HAL_RCC_ClockConfig+0x2de>
 80038d8:	2302      	movs	r3, #2
 80038da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038de:	fa93 f3a3 	rbit	r3, r3
 80038e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e6:	fab3 f383 	clz	r3, r3
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	095b      	lsrs	r3, r3, #5
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d102      	bne.n	8003900 <HAL_RCC_ClockConfig+0x1a0>
 80038fa:	4b31      	ldr	r3, [pc, #196]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	e00d      	b.n	800391c <HAL_RCC_ClockConfig+0x1bc>
 8003900:	2302      	movs	r3, #2
 8003902:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003906:	fa93 f3a3 	rbit	r3, r3
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
 800390c:	2302      	movs	r3, #2
 800390e:	623b      	str	r3, [r7, #32]
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	fa93 f3a3 	rbit	r3, r3
 8003916:	61fb      	str	r3, [r7, #28]
 8003918:	4b29      	ldr	r3, [pc, #164]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	2202      	movs	r2, #2
 800391e:	61ba      	str	r2, [r7, #24]
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	fa92 f2a2 	rbit	r2, r2
 8003926:	617a      	str	r2, [r7, #20]
  return result;
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	fab2 f282 	clz	r2, r2
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	f042 0220 	orr.w	r2, r2, #32
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	f002 021f 	and.w	r2, r2, #31
 800393a:	2101      	movs	r1, #1
 800393c:	fa01 f202 	lsl.w	r2, r1, r2
 8003940:	4013      	ands	r3, r2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e079      	b.n	8003a3e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800394a:	4b1d      	ldr	r3, [pc, #116]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f023 0203 	bic.w	r2, r3, #3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	491a      	ldr	r1, [pc, #104]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 8003958:	4313      	orrs	r3, r2
 800395a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800395c:	f7fe fbbc 	bl	80020d8 <HAL_GetTick>
 8003960:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003962:	e00a      	b.n	800397a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003964:	f7fe fbb8 	bl	80020d8 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003972:	4293      	cmp	r3, r2
 8003974:	d901      	bls.n	800397a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e061      	b.n	8003a3e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397a:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <HAL_RCC_ClockConfig+0x260>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f003 020c 	and.w	r2, r3, #12
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	429a      	cmp	r2, r3
 800398a:	d1eb      	bne.n	8003964 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800398c:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <HAL_RCC_ClockConfig+0x25c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d214      	bcs.n	80039c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399a:	4b08      	ldr	r3, [pc, #32]	; (80039bc <HAL_RCC_ClockConfig+0x25c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f023 0207 	bic.w	r2, r3, #7
 80039a2:	4906      	ldr	r1, [pc, #24]	; (80039bc <HAL_RCC_ClockConfig+0x25c>)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039aa:	4b04      	ldr	r3, [pc, #16]	; (80039bc <HAL_RCC_ClockConfig+0x25c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d005      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e040      	b.n	8003a3e <HAL_RCC_ClockConfig+0x2de>
 80039bc:	40022000 	.word	0x40022000
 80039c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d0:	4b1d      	ldr	r3, [pc, #116]	; (8003a48 <HAL_RCC_ClockConfig+0x2e8>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	491a      	ldr	r1, [pc, #104]	; (8003a48 <HAL_RCC_ClockConfig+0x2e8>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d009      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ee:	4b16      	ldr	r3, [pc, #88]	; (8003a48 <HAL_RCC_ClockConfig+0x2e8>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	4912      	ldr	r1, [pc, #72]	; (8003a48 <HAL_RCC_ClockConfig+0x2e8>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a02:	f000 f829 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 8003a06:	4601      	mov	r1, r0
 8003a08:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <HAL_RCC_ClockConfig+0x2e8>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a10:	22f0      	movs	r2, #240	; 0xf0
 8003a12:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	fa92 f2a2 	rbit	r2, r2
 8003a1a:	60fa      	str	r2, [r7, #12]
  return result;
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	fab2 f282 	clz	r2, r2
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	40d3      	lsrs	r3, r2
 8003a26:	4a09      	ldr	r2, [pc, #36]	; (8003a4c <HAL_RCC_ClockConfig+0x2ec>)
 8003a28:	5cd3      	ldrb	r3, [r2, r3]
 8003a2a:	fa21 f303 	lsr.w	r3, r1, r3
 8003a2e:	4a08      	ldr	r2, [pc, #32]	; (8003a50 <HAL_RCC_ClockConfig+0x2f0>)
 8003a30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a32:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <HAL_RCC_ClockConfig+0x2f4>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fe fb0a 	bl	8002050 <HAL_InitTick>
  
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3778      	adds	r7, #120	; 0x78
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	08006318 	.word	0x08006318
 8003a50:	20000000 	.word	0x20000000
 8003a54:	20000004 	.word	0x20000004

08003a58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b08b      	sub	sp, #44	; 0x2c
 8003a5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61fb      	str	r3, [r7, #28]
 8003a62:	2300      	movs	r3, #0
 8003a64:	61bb      	str	r3, [r7, #24]
 8003a66:	2300      	movs	r3, #0
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003a72:	4b29      	ldr	r3, [pc, #164]	; (8003b18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d002      	beq.n	8003a88 <HAL_RCC_GetSysClockFreq+0x30>
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d003      	beq.n	8003a8e <HAL_RCC_GetSysClockFreq+0x36>
 8003a86:	e03c      	b.n	8003b02 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a88:	4b24      	ldr	r3, [pc, #144]	; (8003b1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a8a:	623b      	str	r3, [r7, #32]
      break;
 8003a8c:	e03c      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003a94:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003a98:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	fa92 f2a2 	rbit	r2, r2
 8003aa0:	607a      	str	r2, [r7, #4]
  return result;
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	fab2 f282 	clz	r2, r2
 8003aa8:	b2d2      	uxtb	r2, r2
 8003aaa:	40d3      	lsrs	r3, r2
 8003aac:	4a1c      	ldr	r2, [pc, #112]	; (8003b20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003aae:	5cd3      	ldrb	r3, [r2, r3]
 8003ab0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003ab2:	4b19      	ldr	r3, [pc, #100]	; (8003b18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	220f      	movs	r2, #15
 8003abc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	fa92 f2a2 	rbit	r2, r2
 8003ac4:	60fa      	str	r2, [r7, #12]
  return result;
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	fab2 f282 	clz	r2, r2
 8003acc:	b2d2      	uxtb	r2, r2
 8003ace:	40d3      	lsrs	r3, r2
 8003ad0:	4a14      	ldr	r2, [pc, #80]	; (8003b24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003ad2:	5cd3      	ldrb	r3, [r2, r3]
 8003ad4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ae0:	4a0e      	ldr	r2, [pc, #56]	; (8003b1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	fb02 f303 	mul.w	r3, r2, r3
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
 8003af0:	e004      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	4a0c      	ldr	r2, [pc, #48]	; (8003b28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003af6:	fb02 f303 	mul.w	r3, r2, r3
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	623b      	str	r3, [r7, #32]
      break;
 8003b00:	e002      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b02:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b04:	623b      	str	r3, [r7, #32]
      break;
 8003b06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b08:	6a3b      	ldr	r3, [r7, #32]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	372c      	adds	r7, #44	; 0x2c
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	007a1200 	.word	0x007a1200
 8003b20:	08006330 	.word	0x08006330
 8003b24:	08006340 	.word	0x08006340
 8003b28:	003d0900 	.word	0x003d0900

08003b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b30:	4b03      	ldr	r3, [pc, #12]	; (8003b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b32:	681b      	ldr	r3, [r3, #0]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	20000000 	.word	0x20000000

08003b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003b4a:	f7ff ffef 	bl	8003b2c <HAL_RCC_GetHCLKFreq>
 8003b4e:	4601      	mov	r1, r0
 8003b50:	4b0b      	ldr	r3, [pc, #44]	; (8003b80 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b58:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b5c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	fa92 f2a2 	rbit	r2, r2
 8003b64:	603a      	str	r2, [r7, #0]
  return result;
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	fab2 f282 	clz	r2, r2
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	40d3      	lsrs	r3, r2
 8003b70:	4a04      	ldr	r2, [pc, #16]	; (8003b84 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003b72:	5cd3      	ldrb	r3, [r2, r3]
 8003b74:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40021000 	.word	0x40021000
 8003b84:	08006328 	.word	0x08006328

08003b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003b8e:	f7ff ffcd 	bl	8003b2c <HAL_RCC_GetHCLKFreq>
 8003b92:	4601      	mov	r1, r0
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003b9c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003ba0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	fa92 f2a2 	rbit	r2, r2
 8003ba8:	603a      	str	r2, [r7, #0]
  return result;
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	fab2 f282 	clz	r2, r2
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	40d3      	lsrs	r3, r2
 8003bb4:	4a04      	ldr	r2, [pc, #16]	; (8003bc8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003bb6:	5cd3      	ldrb	r3, [r2, r3]
 8003bb8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	08006328 	.word	0x08006328

08003bcc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b092      	sub	sp, #72	; 0x48
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 80cd 	beq.w	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bf0:	4b86      	ldr	r3, [pc, #536]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10e      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bfc:	4b83      	ldr	r3, [pc, #524]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	4a82      	ldr	r2, [pc, #520]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c06:	61d3      	str	r3, [r2, #28]
 8003c08:	4b80      	ldr	r3, [pc, #512]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c10:	60bb      	str	r3, [r7, #8]
 8003c12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c14:	2301      	movs	r3, #1
 8003c16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1a:	4b7d      	ldr	r3, [pc, #500]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d118      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c26:	4b7a      	ldr	r3, [pc, #488]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a79      	ldr	r2, [pc, #484]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c30:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c32:	f7fe fa51 	bl	80020d8 <HAL_GetTick>
 8003c36:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c38:	e008      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c3a:	f7fe fa4d 	bl	80020d8 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b64      	cmp	r3, #100	; 0x64
 8003c46:	d901      	bls.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e0db      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4c:	4b70      	ldr	r3, [pc, #448]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0f0      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c58:	4b6c      	ldr	r3, [pc, #432]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c60:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d07d      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d076      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c76:	4b65      	ldr	r3, [pc, #404]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c84:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c88:	fa93 f3a3 	rbit	r3, r3
 8003c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c90:	fab3 f383 	clz	r3, r3
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	461a      	mov	r2, r3
 8003c98:	4b5e      	ldr	r3, [pc, #376]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ca8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cac:	fa93 f3a3 	rbit	r3, r3
 8003cb0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cb4:	fab3 f383 	clz	r3, r3
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	4b55      	ldr	r3, [pc, #340]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003cbe:	4413      	add	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cc8:	4a50      	ldr	r2, [pc, #320]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ccc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d045      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd8:	f7fe f9fe 	bl	80020d8 <HAL_GetTick>
 8003cdc:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cde:	e00a      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce0:	f7fe f9fa 	bl	80020d8 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e086      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfc:	fa93 f3a3 	rbit	r3, r3
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
 8003d02:	2302      	movs	r3, #2
 8003d04:	623b      	str	r3, [r7, #32]
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	fa93 f3a3 	rbit	r3, r3
 8003d0c:	61fb      	str	r3, [r7, #28]
  return result;
 8003d0e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d10:	fab3 f383 	clz	r3, r3
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	f043 0302 	orr.w	r3, r3, #2
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d102      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003d24:	4b39      	ldr	r3, [pc, #228]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	e007      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	fa93 f3a3 	rbit	r3, r3
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	4b35      	ldr	r3, [pc, #212]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	613a      	str	r2, [r7, #16]
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	fa92 f2a2 	rbit	r2, r2
 8003d44:	60fa      	str	r2, [r7, #12]
  return result;
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	fab2 f282 	clz	r2, r2
 8003d4c:	b2d2      	uxtb	r2, r2
 8003d4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	f002 021f 	and.w	r2, r2, #31
 8003d58:	2101      	movs	r1, #1
 8003d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d5e:	4013      	ands	r3, r2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0bd      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d64:	4b29      	ldr	r3, [pc, #164]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	4926      	ldr	r1, [pc, #152]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d76:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d105      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d7e:	4b23      	ldr	r3, [pc, #140]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	4a22      	ldr	r2, [pc, #136]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d88:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d008      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d96:	4b1d      	ldr	r3, [pc, #116]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	f023 0203 	bic.w	r2, r3, #3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	491a      	ldr	r1, [pc, #104]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d008      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003db4:	4b15      	ldr	r3, [pc, #84]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db8:	f023 0210 	bic.w	r2, r3, #16
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	4912      	ldr	r1, [pc, #72]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d008      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003dd2:	4b0e      	ldr	r3, [pc, #56]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	490b      	ldr	r1, [pc, #44]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003df0:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	4903      	ldr	r1, [pc, #12]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3748      	adds	r7, #72	; 0x48
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	40007000 	.word	0x40007000
 8003e14:	10908100 	.word	0x10908100

08003e18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e049      	b.n	8003ebe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d106      	bne.n	8003e44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7fd fdfc 	bl	8001a3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3304      	adds	r3, #4
 8003e54:	4619      	mov	r1, r3
 8003e56:	4610      	mov	r0, r2
 8003e58:	f000 fb60 	bl	800451c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b082      	sub	sp, #8
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e049      	b.n	8003f6c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d106      	bne.n	8003ef2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f841 	bl	8003f74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3304      	adds	r3, #4
 8003f02:	4619      	mov	r1, r3
 8003f04:	4610      	mov	r0, r2
 8003f06:	f000 fb09 	bl	800451c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d109      	bne.n	8003fac <HAL_TIM_PWM_Start+0x24>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	bf14      	ite	ne
 8003fa4:	2301      	movne	r3, #1
 8003fa6:	2300      	moveq	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	e03c      	b.n	8004026 <HAL_TIM_PWM_Start+0x9e>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d109      	bne.n	8003fc6 <HAL_TIM_PWM_Start+0x3e>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	bf14      	ite	ne
 8003fbe:	2301      	movne	r3, #1
 8003fc0:	2300      	moveq	r3, #0
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	e02f      	b.n	8004026 <HAL_TIM_PWM_Start+0x9e>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d109      	bne.n	8003fe0 <HAL_TIM_PWM_Start+0x58>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	bf14      	ite	ne
 8003fd8:	2301      	movne	r3, #1
 8003fda:	2300      	moveq	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	e022      	b.n	8004026 <HAL_TIM_PWM_Start+0x9e>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	2b0c      	cmp	r3, #12
 8003fe4:	d109      	bne.n	8003ffa <HAL_TIM_PWM_Start+0x72>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	bf14      	ite	ne
 8003ff2:	2301      	movne	r3, #1
 8003ff4:	2300      	moveq	r3, #0
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	e015      	b.n	8004026 <HAL_TIM_PWM_Start+0x9e>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b10      	cmp	r3, #16
 8003ffe:	d109      	bne.n	8004014 <HAL_TIM_PWM_Start+0x8c>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b01      	cmp	r3, #1
 800400a:	bf14      	ite	ne
 800400c:	2301      	movne	r3, #1
 800400e:	2300      	moveq	r3, #0
 8004010:	b2db      	uxtb	r3, r3
 8004012:	e008      	b.n	8004026 <HAL_TIM_PWM_Start+0x9e>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b01      	cmp	r3, #1
 800401e:	bf14      	ite	ne
 8004020:	2301      	movne	r3, #1
 8004022:	2300      	moveq	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e088      	b.n	8004140 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d104      	bne.n	800403e <HAL_TIM_PWM_Start+0xb6>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800403c:	e023      	b.n	8004086 <HAL_TIM_PWM_Start+0xfe>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b04      	cmp	r3, #4
 8004042:	d104      	bne.n	800404e <HAL_TIM_PWM_Start+0xc6>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800404c:	e01b      	b.n	8004086 <HAL_TIM_PWM_Start+0xfe>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b08      	cmp	r3, #8
 8004052:	d104      	bne.n	800405e <HAL_TIM_PWM_Start+0xd6>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800405c:	e013      	b.n	8004086 <HAL_TIM_PWM_Start+0xfe>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b0c      	cmp	r3, #12
 8004062:	d104      	bne.n	800406e <HAL_TIM_PWM_Start+0xe6>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800406c:	e00b      	b.n	8004086 <HAL_TIM_PWM_Start+0xfe>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b10      	cmp	r3, #16
 8004072:	d104      	bne.n	800407e <HAL_TIM_PWM_Start+0xf6>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800407c:	e003      	b.n	8004086 <HAL_TIM_PWM_Start+0xfe>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2202      	movs	r2, #2
 8004082:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2201      	movs	r2, #1
 800408c:	6839      	ldr	r1, [r7, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fdfc 	bl	8004c8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a2b      	ldr	r2, [pc, #172]	; (8004148 <HAL_TIM_PWM_Start+0x1c0>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00e      	beq.n	80040bc <HAL_TIM_PWM_Start+0x134>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a2a      	ldr	r2, [pc, #168]	; (800414c <HAL_TIM_PWM_Start+0x1c4>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d009      	beq.n	80040bc <HAL_TIM_PWM_Start+0x134>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a28      	ldr	r2, [pc, #160]	; (8004150 <HAL_TIM_PWM_Start+0x1c8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d004      	beq.n	80040bc <HAL_TIM_PWM_Start+0x134>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a27      	ldr	r2, [pc, #156]	; (8004154 <HAL_TIM_PWM_Start+0x1cc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d101      	bne.n	80040c0 <HAL_TIM_PWM_Start+0x138>
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <HAL_TIM_PWM_Start+0x13a>
 80040c0:	2300      	movs	r3, #0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d007      	beq.n	80040d6 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a1b      	ldr	r2, [pc, #108]	; (8004148 <HAL_TIM_PWM_Start+0x1c0>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d00e      	beq.n	80040fe <HAL_TIM_PWM_Start+0x176>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e8:	d009      	beq.n	80040fe <HAL_TIM_PWM_Start+0x176>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a1a      	ldr	r2, [pc, #104]	; (8004158 <HAL_TIM_PWM_Start+0x1d0>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d004      	beq.n	80040fe <HAL_TIM_PWM_Start+0x176>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a14      	ldr	r2, [pc, #80]	; (800414c <HAL_TIM_PWM_Start+0x1c4>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d115      	bne.n	800412a <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	4b15      	ldr	r3, [pc, #84]	; (800415c <HAL_TIM_PWM_Start+0x1d4>)
 8004106:	4013      	ands	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2b06      	cmp	r3, #6
 800410e:	d015      	beq.n	800413c <HAL_TIM_PWM_Start+0x1b4>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004116:	d011      	beq.n	800413c <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004128:	e008      	b.n	800413c <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f042 0201 	orr.w	r2, r2, #1
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	e000      	b.n	800413e <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800413c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40012c00 	.word	0x40012c00
 800414c:	40014000 	.word	0x40014000
 8004150:	40014400 	.word	0x40014400
 8004154:	40014800 	.word	0x40014800
 8004158:	40000400 	.word	0x40000400
 800415c:	00010007 	.word	0x00010007

08004160 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800417a:	2302      	movs	r3, #2
 800417c:	e0ff      	b.n	800437e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b14      	cmp	r3, #20
 800418a:	f200 80f0 	bhi.w	800436e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800418e:	a201      	add	r2, pc, #4	; (adr r2, 8004194 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004194:	080041e9 	.word	0x080041e9
 8004198:	0800436f 	.word	0x0800436f
 800419c:	0800436f 	.word	0x0800436f
 80041a0:	0800436f 	.word	0x0800436f
 80041a4:	08004229 	.word	0x08004229
 80041a8:	0800436f 	.word	0x0800436f
 80041ac:	0800436f 	.word	0x0800436f
 80041b0:	0800436f 	.word	0x0800436f
 80041b4:	0800426b 	.word	0x0800426b
 80041b8:	0800436f 	.word	0x0800436f
 80041bc:	0800436f 	.word	0x0800436f
 80041c0:	0800436f 	.word	0x0800436f
 80041c4:	080042ab 	.word	0x080042ab
 80041c8:	0800436f 	.word	0x0800436f
 80041cc:	0800436f 	.word	0x0800436f
 80041d0:	0800436f 	.word	0x0800436f
 80041d4:	080042ed 	.word	0x080042ed
 80041d8:	0800436f 	.word	0x0800436f
 80041dc:	0800436f 	.word	0x0800436f
 80041e0:	0800436f 	.word	0x0800436f
 80041e4:	0800432d 	.word	0x0800432d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68b9      	ldr	r1, [r7, #8]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 fa0c 	bl	800460c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699a      	ldr	r2, [r3, #24]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0208 	orr.w	r2, r2, #8
 8004202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699a      	ldr	r2, [r3, #24]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0204 	bic.w	r2, r2, #4
 8004212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6999      	ldr	r1, [r3, #24]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	619a      	str	r2, [r3, #24]
      break;
 8004226:	e0a5      	b.n	8004374 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68b9      	ldr	r1, [r7, #8]
 800422e:	4618      	mov	r0, r3
 8004230:	f000 fa72 	bl	8004718 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004242:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	699a      	ldr	r2, [r3, #24]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004252:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6999      	ldr	r1, [r3, #24]
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	021a      	lsls	r2, r3, #8
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	619a      	str	r2, [r3, #24]
      break;
 8004268:	e084      	b.n	8004374 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68b9      	ldr	r1, [r7, #8]
 8004270:	4618      	mov	r0, r3
 8004272:	f000 fad1 	bl	8004818 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69da      	ldr	r2, [r3, #28]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f042 0208 	orr.w	r2, r2, #8
 8004284:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69da      	ldr	r2, [r3, #28]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0204 	bic.w	r2, r2, #4
 8004294:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	69d9      	ldr	r1, [r3, #28]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	61da      	str	r2, [r3, #28]
      break;
 80042a8:	e064      	b.n	8004374 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68b9      	ldr	r1, [r7, #8]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 fb2f 	bl	8004914 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	69da      	ldr	r2, [r3, #28]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69da      	ldr	r2, [r3, #28]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69d9      	ldr	r1, [r3, #28]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	021a      	lsls	r2, r3, #8
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	61da      	str	r2, [r3, #28]
      break;
 80042ea:	e043      	b.n	8004374 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68b9      	ldr	r1, [r7, #8]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fb72 	bl	80049dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 0208 	orr.w	r2, r2, #8
 8004306:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0204 	bic.w	r2, r2, #4
 8004316:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	691a      	ldr	r2, [r3, #16]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800432a:	e023      	b.n	8004374 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68b9      	ldr	r1, [r7, #8]
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fbb0 	bl	8004a98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004346:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004356:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	021a      	lsls	r2, r3, #8
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800436c:	e002      	b.n	8004374 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	75fb      	strb	r3, [r7, #23]
      break;
 8004372:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800437c:	7dfb      	ldrb	r3, [r7, #23]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop

08004388 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004392:	2300      	movs	r3, #0
 8004394:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <HAL_TIM_ConfigClockSource+0x1c>
 80043a0:	2302      	movs	r3, #2
 80043a2:	e0b6      	b.n	8004512 <HAL_TIM_ConfigClockSource+0x18a>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e0:	d03e      	beq.n	8004460 <HAL_TIM_ConfigClockSource+0xd8>
 80043e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e6:	f200 8087 	bhi.w	80044f8 <HAL_TIM_ConfigClockSource+0x170>
 80043ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ee:	f000 8086 	beq.w	80044fe <HAL_TIM_ConfigClockSource+0x176>
 80043f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f6:	d87f      	bhi.n	80044f8 <HAL_TIM_ConfigClockSource+0x170>
 80043f8:	2b70      	cmp	r3, #112	; 0x70
 80043fa:	d01a      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0xaa>
 80043fc:	2b70      	cmp	r3, #112	; 0x70
 80043fe:	d87b      	bhi.n	80044f8 <HAL_TIM_ConfigClockSource+0x170>
 8004400:	2b60      	cmp	r3, #96	; 0x60
 8004402:	d050      	beq.n	80044a6 <HAL_TIM_ConfigClockSource+0x11e>
 8004404:	2b60      	cmp	r3, #96	; 0x60
 8004406:	d877      	bhi.n	80044f8 <HAL_TIM_ConfigClockSource+0x170>
 8004408:	2b50      	cmp	r3, #80	; 0x50
 800440a:	d03c      	beq.n	8004486 <HAL_TIM_ConfigClockSource+0xfe>
 800440c:	2b50      	cmp	r3, #80	; 0x50
 800440e:	d873      	bhi.n	80044f8 <HAL_TIM_ConfigClockSource+0x170>
 8004410:	2b40      	cmp	r3, #64	; 0x40
 8004412:	d058      	beq.n	80044c6 <HAL_TIM_ConfigClockSource+0x13e>
 8004414:	2b40      	cmp	r3, #64	; 0x40
 8004416:	d86f      	bhi.n	80044f8 <HAL_TIM_ConfigClockSource+0x170>
 8004418:	2b30      	cmp	r3, #48	; 0x30
 800441a:	d064      	beq.n	80044e6 <HAL_TIM_ConfigClockSource+0x15e>
 800441c:	2b30      	cmp	r3, #48	; 0x30
 800441e:	d86b      	bhi.n	80044f8 <HAL_TIM_ConfigClockSource+0x170>
 8004420:	2b20      	cmp	r3, #32
 8004422:	d060      	beq.n	80044e6 <HAL_TIM_ConfigClockSource+0x15e>
 8004424:	2b20      	cmp	r3, #32
 8004426:	d867      	bhi.n	80044f8 <HAL_TIM_ConfigClockSource+0x170>
 8004428:	2b00      	cmp	r3, #0
 800442a:	d05c      	beq.n	80044e6 <HAL_TIM_ConfigClockSource+0x15e>
 800442c:	2b10      	cmp	r3, #16
 800442e:	d05a      	beq.n	80044e6 <HAL_TIM_ConfigClockSource+0x15e>
 8004430:	e062      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6818      	ldr	r0, [r3, #0]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	6899      	ldr	r1, [r3, #8]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f000 fc03 	bl	8004c4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004454:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	609a      	str	r2, [r3, #8]
      break;
 800445e:	e04f      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6818      	ldr	r0, [r3, #0]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	6899      	ldr	r1, [r3, #8]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f000 fbec 	bl	8004c4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004482:	609a      	str	r2, [r3, #8]
      break;
 8004484:	e03c      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6818      	ldr	r0, [r3, #0]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	6859      	ldr	r1, [r3, #4]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	461a      	mov	r2, r3
 8004494:	f000 fb60 	bl	8004b58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2150      	movs	r1, #80	; 0x50
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fbb9 	bl	8004c16 <TIM_ITRx_SetConfig>
      break;
 80044a4:	e02c      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6818      	ldr	r0, [r3, #0]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	6859      	ldr	r1, [r3, #4]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	461a      	mov	r2, r3
 80044b4:	f000 fb7f 	bl	8004bb6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2160      	movs	r1, #96	; 0x60
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 fba9 	bl	8004c16 <TIM_ITRx_SetConfig>
      break;
 80044c4:	e01c      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6818      	ldr	r0, [r3, #0]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	6859      	ldr	r1, [r3, #4]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	461a      	mov	r2, r3
 80044d4:	f000 fb40 	bl	8004b58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2140      	movs	r1, #64	; 0x40
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 fb99 	bl	8004c16 <TIM_ITRx_SetConfig>
      break;
 80044e4:	e00c      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4619      	mov	r1, r3
 80044f0:	4610      	mov	r0, r2
 80044f2:	f000 fb90 	bl	8004c16 <TIM_ITRx_SetConfig>
      break;
 80044f6:	e003      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	73fb      	strb	r3, [r7, #15]
      break;
 80044fc:	e000      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80044fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004510:	7bfb      	ldrb	r3, [r7, #15]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a32      	ldr	r2, [pc, #200]	; (80045f8 <TIM_Base_SetConfig+0xdc>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d007      	beq.n	8004544 <TIM_Base_SetConfig+0x28>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800453a:	d003      	beq.n	8004544 <TIM_Base_SetConfig+0x28>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a2f      	ldr	r2, [pc, #188]	; (80045fc <TIM_Base_SetConfig+0xe0>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d108      	bne.n	8004556 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	4313      	orrs	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a27      	ldr	r2, [pc, #156]	; (80045f8 <TIM_Base_SetConfig+0xdc>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d013      	beq.n	8004586 <TIM_Base_SetConfig+0x6a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004564:	d00f      	beq.n	8004586 <TIM_Base_SetConfig+0x6a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a24      	ldr	r2, [pc, #144]	; (80045fc <TIM_Base_SetConfig+0xe0>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d00b      	beq.n	8004586 <TIM_Base_SetConfig+0x6a>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a23      	ldr	r2, [pc, #140]	; (8004600 <TIM_Base_SetConfig+0xe4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d007      	beq.n	8004586 <TIM_Base_SetConfig+0x6a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a22      	ldr	r2, [pc, #136]	; (8004604 <TIM_Base_SetConfig+0xe8>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d003      	beq.n	8004586 <TIM_Base_SetConfig+0x6a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a21      	ldr	r2, [pc, #132]	; (8004608 <TIM_Base_SetConfig+0xec>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d108      	bne.n	8004598 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800458c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	4313      	orrs	r3, r2
 8004596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a0e      	ldr	r2, [pc, #56]	; (80045f8 <TIM_Base_SetConfig+0xdc>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d00b      	beq.n	80045dc <TIM_Base_SetConfig+0xc0>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a0e      	ldr	r2, [pc, #56]	; (8004600 <TIM_Base_SetConfig+0xe4>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d007      	beq.n	80045dc <TIM_Base_SetConfig+0xc0>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a0d      	ldr	r2, [pc, #52]	; (8004604 <TIM_Base_SetConfig+0xe8>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d003      	beq.n	80045dc <TIM_Base_SetConfig+0xc0>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a0c      	ldr	r2, [pc, #48]	; (8004608 <TIM_Base_SetConfig+0xec>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d103      	bne.n	80045e4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	691a      	ldr	r2, [r3, #16]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	615a      	str	r2, [r3, #20]
}
 80045ea:	bf00      	nop
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	40012c00 	.word	0x40012c00
 80045fc:	40000400 	.word	0x40000400
 8004600:	40014000 	.word	0x40014000
 8004604:	40014400 	.word	0x40014400
 8004608:	40014800 	.word	0x40014800

0800460c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f023 0201 	bic.w	r2, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800463a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0303 	bic.w	r3, r3, #3
 8004646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	4313      	orrs	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f023 0302 	bic.w	r3, r3, #2
 8004658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4313      	orrs	r3, r2
 8004662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a28      	ldr	r2, [pc, #160]	; (8004708 <TIM_OC1_SetConfig+0xfc>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00b      	beq.n	8004684 <TIM_OC1_SetConfig+0x78>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a27      	ldr	r2, [pc, #156]	; (800470c <TIM_OC1_SetConfig+0x100>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d007      	beq.n	8004684 <TIM_OC1_SetConfig+0x78>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a26      	ldr	r2, [pc, #152]	; (8004710 <TIM_OC1_SetConfig+0x104>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d003      	beq.n	8004684 <TIM_OC1_SetConfig+0x78>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a25      	ldr	r2, [pc, #148]	; (8004714 <TIM_OC1_SetConfig+0x108>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d10c      	bne.n	800469e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f023 0308 	bic.w	r3, r3, #8
 800468a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	4313      	orrs	r3, r2
 8004694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f023 0304 	bic.w	r3, r3, #4
 800469c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a19      	ldr	r2, [pc, #100]	; (8004708 <TIM_OC1_SetConfig+0xfc>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d00b      	beq.n	80046be <TIM_OC1_SetConfig+0xb2>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a18      	ldr	r2, [pc, #96]	; (800470c <TIM_OC1_SetConfig+0x100>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d007      	beq.n	80046be <TIM_OC1_SetConfig+0xb2>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a17      	ldr	r2, [pc, #92]	; (8004710 <TIM_OC1_SetConfig+0x104>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d003      	beq.n	80046be <TIM_OC1_SetConfig+0xb2>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a16      	ldr	r2, [pc, #88]	; (8004714 <TIM_OC1_SetConfig+0x108>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d111      	bne.n	80046e2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	4313      	orrs	r3, r2
 80046e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	621a      	str	r2, [r3, #32]
}
 80046fc:	bf00      	nop
 80046fe:	371c      	adds	r7, #28
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	40012c00 	.word	0x40012c00
 800470c:	40014000 	.word	0x40014000
 8004710:	40014400 	.word	0x40014400
 8004714:	40014800 	.word	0x40014800

08004718 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004718:	b480      	push	{r7}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	f023 0210 	bic.w	r2, r3, #16
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800474a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004752:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	021b      	lsls	r3, r3, #8
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	4313      	orrs	r3, r2
 800475e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f023 0320 	bic.w	r3, r3, #32
 8004766:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	011b      	lsls	r3, r3, #4
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	4313      	orrs	r3, r2
 8004772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a24      	ldr	r2, [pc, #144]	; (8004808 <TIM_OC2_SetConfig+0xf0>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d10d      	bne.n	8004798 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	011b      	lsls	r3, r3, #4
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	4313      	orrs	r3, r2
 800478e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004796:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a1b      	ldr	r2, [pc, #108]	; (8004808 <TIM_OC2_SetConfig+0xf0>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d00b      	beq.n	80047b8 <TIM_OC2_SetConfig+0xa0>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a1a      	ldr	r2, [pc, #104]	; (800480c <TIM_OC2_SetConfig+0xf4>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d007      	beq.n	80047b8 <TIM_OC2_SetConfig+0xa0>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a19      	ldr	r2, [pc, #100]	; (8004810 <TIM_OC2_SetConfig+0xf8>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d003      	beq.n	80047b8 <TIM_OC2_SetConfig+0xa0>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a18      	ldr	r2, [pc, #96]	; (8004814 <TIM_OC2_SetConfig+0xfc>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d113      	bne.n	80047e0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047be:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047c6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	4313      	orrs	r3, r2
 80047de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	621a      	str	r2, [r3, #32]
}
 80047fa:	bf00      	nop
 80047fc:	371c      	adds	r7, #28
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	40012c00 	.word	0x40012c00
 800480c:	40014000 	.word	0x40014000
 8004810:	40014400 	.word	0x40014400
 8004814:	40014800 	.word	0x40014800

08004818 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800484a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0303 	bic.w	r3, r3, #3
 8004852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	021b      	lsls	r3, r3, #8
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	4313      	orrs	r3, r2
 8004870:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a23      	ldr	r2, [pc, #140]	; (8004904 <TIM_OC3_SetConfig+0xec>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d10d      	bne.n	8004896 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004880:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	021b      	lsls	r3, r3, #8
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	4313      	orrs	r3, r2
 800488c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004894:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a1a      	ldr	r2, [pc, #104]	; (8004904 <TIM_OC3_SetConfig+0xec>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d00b      	beq.n	80048b6 <TIM_OC3_SetConfig+0x9e>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a19      	ldr	r2, [pc, #100]	; (8004908 <TIM_OC3_SetConfig+0xf0>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d007      	beq.n	80048b6 <TIM_OC3_SetConfig+0x9e>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a18      	ldr	r2, [pc, #96]	; (800490c <TIM_OC3_SetConfig+0xf4>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d003      	beq.n	80048b6 <TIM_OC3_SetConfig+0x9e>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a17      	ldr	r2, [pc, #92]	; (8004910 <TIM_OC3_SetConfig+0xf8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d113      	bne.n	80048de <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	4313      	orrs	r3, r2
 80048dc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	621a      	str	r2, [r3, #32]
}
 80048f8:	bf00      	nop
 80048fa:	371c      	adds	r7, #28
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	40012c00 	.word	0x40012c00
 8004908:	40014000 	.word	0x40014000
 800490c:	40014400 	.word	0x40014400
 8004910:	40014800 	.word	0x40014800

08004914 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004914:	b480      	push	{r7}
 8004916:	b087      	sub	sp, #28
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800494e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	021b      	lsls	r3, r3, #8
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	4313      	orrs	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004962:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	031b      	lsls	r3, r3, #12
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a16      	ldr	r2, [pc, #88]	; (80049cc <TIM_OC4_SetConfig+0xb8>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00b      	beq.n	8004990 <TIM_OC4_SetConfig+0x7c>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a15      	ldr	r2, [pc, #84]	; (80049d0 <TIM_OC4_SetConfig+0xbc>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d007      	beq.n	8004990 <TIM_OC4_SetConfig+0x7c>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a14      	ldr	r2, [pc, #80]	; (80049d4 <TIM_OC4_SetConfig+0xc0>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d003      	beq.n	8004990 <TIM_OC4_SetConfig+0x7c>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a13      	ldr	r2, [pc, #76]	; (80049d8 <TIM_OC4_SetConfig+0xc4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d109      	bne.n	80049a4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004996:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	019b      	lsls	r3, r3, #6
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	621a      	str	r2, [r3, #32]
}
 80049be:	bf00      	nop
 80049c0:	371c      	adds	r7, #28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	40012c00 	.word	0x40012c00
 80049d0:	40014000 	.word	0x40014000
 80049d4:	40014400 	.word	0x40014400
 80049d8:	40014800 	.word	0x40014800

080049dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004a20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	041b      	lsls	r3, r3, #16
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a15      	ldr	r2, [pc, #84]	; (8004a88 <TIM_OC5_SetConfig+0xac>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d00b      	beq.n	8004a4e <TIM_OC5_SetConfig+0x72>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a14      	ldr	r2, [pc, #80]	; (8004a8c <TIM_OC5_SetConfig+0xb0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d007      	beq.n	8004a4e <TIM_OC5_SetConfig+0x72>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a13      	ldr	r2, [pc, #76]	; (8004a90 <TIM_OC5_SetConfig+0xb4>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d003      	beq.n	8004a4e <TIM_OC5_SetConfig+0x72>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a12      	ldr	r2, [pc, #72]	; (8004a94 <TIM_OC5_SetConfig+0xb8>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d109      	bne.n	8004a62 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	021b      	lsls	r3, r3, #8
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	621a      	str	r2, [r3, #32]
}
 8004a7c:	bf00      	nop
 8004a7e:	371c      	adds	r7, #28
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	40012c00 	.word	0x40012c00
 8004a8c:	40014000 	.word	0x40014000
 8004a90:	40014400 	.word	0x40014400
 8004a94:	40014800 	.word	0x40014800

08004a98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	021b      	lsls	r3, r3, #8
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ade:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	051b      	lsls	r3, r3, #20
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a16      	ldr	r2, [pc, #88]	; (8004b48 <TIM_OC6_SetConfig+0xb0>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d00b      	beq.n	8004b0c <TIM_OC6_SetConfig+0x74>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a15      	ldr	r2, [pc, #84]	; (8004b4c <TIM_OC6_SetConfig+0xb4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d007      	beq.n	8004b0c <TIM_OC6_SetConfig+0x74>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a14      	ldr	r2, [pc, #80]	; (8004b50 <TIM_OC6_SetConfig+0xb8>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d003      	beq.n	8004b0c <TIM_OC6_SetConfig+0x74>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a13      	ldr	r2, [pc, #76]	; (8004b54 <TIM_OC6_SetConfig+0xbc>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d109      	bne.n	8004b20 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	029b      	lsls	r3, r3, #10
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	621a      	str	r2, [r3, #32]
}
 8004b3a:	bf00      	nop
 8004b3c:	371c      	adds	r7, #28
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	40012c00 	.word	0x40012c00
 8004b4c:	40014000 	.word	0x40014000
 8004b50:	40014400 	.word	0x40014400
 8004b54:	40014800 	.word	0x40014800

08004b58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b087      	sub	sp, #28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	f023 0201 	bic.w	r2, r3, #1
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f023 030a 	bic.w	r3, r3, #10
 8004b94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	621a      	str	r2, [r3, #32]
}
 8004baa:	bf00      	nop
 8004bac:	371c      	adds	r7, #28
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b087      	sub	sp, #28
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	60f8      	str	r0, [r7, #12]
 8004bbe:	60b9      	str	r1, [r7, #8]
 8004bc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	f023 0210 	bic.w	r2, r3, #16
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004be0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	031b      	lsls	r3, r3, #12
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bf2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	621a      	str	r2, [r3, #32]
}
 8004c0a:	bf00      	nop
 8004c0c:	371c      	adds	r7, #28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b085      	sub	sp, #20
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f043 0307 	orr.w	r3, r3, #7
 8004c38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	609a      	str	r2, [r3, #8]
}
 8004c40:	bf00      	nop
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
 8004c58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	021a      	lsls	r2, r3, #8
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	609a      	str	r2, [r3, #8]
}
 8004c80:	bf00      	nop
 8004c82:	371c      	adds	r7, #28
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b087      	sub	sp, #28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f003 031f 	and.w	r3, r3, #31
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6a1a      	ldr	r2, [r3, #32]
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	43db      	mvns	r3, r3
 8004cae:	401a      	ands	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6a1a      	ldr	r2, [r3, #32]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f003 031f 	and.w	r3, r3, #31
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	621a      	str	r2, [r3, #32]
}
 8004cca:	bf00      	nop
 8004ccc:	371c      	adds	r7, #28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
	...

08004cd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d101      	bne.n	8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cec:	2302      	movs	r3, #2
 8004cee:	e054      	b.n	8004d9a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a24      	ldr	r2, [pc, #144]	; (8004da8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d108      	bne.n	8004d2c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a17      	ldr	r2, [pc, #92]	; (8004da8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d00e      	beq.n	8004d6e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d58:	d009      	beq.n	8004d6e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a13      	ldr	r2, [pc, #76]	; (8004dac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d004      	beq.n	8004d6e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a11      	ldr	r2, [pc, #68]	; (8004db0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d10c      	bne.n	8004d88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	40012c00 	.word	0x40012c00
 8004dac:	40000400 	.word	0x40000400
 8004db0:	40014000 	.word	0x40014000

08004db4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d101      	bne.n	8004dd0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	e060      	b.n	8004e92 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	041b      	lsls	r3, r3, #16
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a14      	ldr	r2, [pc, #80]	; (8004ea0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d115      	bne.n	8004e80 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	051b      	lsls	r3, r3, #20
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	40012c00 	.word	0x40012c00

08004ea4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e040      	b.n	8004f38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7fc fe10 	bl	8001aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2224      	movs	r2, #36	; 0x24
 8004ed0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0201 	bic.w	r2, r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fb2a 	bl	800553c <UART_SetConfig>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d101      	bne.n	8004ef2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e022      	b.n	8004f38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 fc54 	bl	80057a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689a      	ldr	r2, [r3, #8]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0201 	orr.w	r2, r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 fcdb 	bl	80058ec <UART_CheckIdleState>
 8004f36:	4603      	mov	r3, r0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b0ba      	sub	sp, #232	; 0xe8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004f6a:	f640 030f 	movw	r3, #2063	; 0x80f
 8004f6e:	4013      	ands	r3, r2
 8004f70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004f74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d115      	bne.n	8004fa8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f80:	f003 0320 	and.w	r3, r3, #32
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00f      	beq.n	8004fa8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f8c:	f003 0320 	and.w	r3, r3, #32
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d009      	beq.n	8004fa8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 82a3 	beq.w	80054e4 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	4798      	blx	r3
      }
      return;
 8004fa6:	e29d      	b.n	80054e4 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004fa8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 8117 	beq.w	80051e0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004fb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d106      	bne.n	8004fcc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004fbe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004fc2:	4b85      	ldr	r3, [pc, #532]	; (80051d8 <HAL_UART_IRQHandler+0x298>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f000 810a 	beq.w	80051e0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d011      	beq.n	8004ffc <HAL_UART_IRQHandler+0xbc>
 8004fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00b      	beq.n	8004ffc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ff2:	f043 0201 	orr.w	r2, r3, #1
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d011      	beq.n	800502c <HAL_UART_IRQHandler+0xec>
 8005008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00b      	beq.n	800502c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2202      	movs	r2, #2
 800501a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005022:	f043 0204 	orr.w	r2, r3, #4
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800502c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	d011      	beq.n	800505c <HAL_UART_IRQHandler+0x11c>
 8005038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00b      	beq.n	800505c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2204      	movs	r2, #4
 800504a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005052:	f043 0202 	orr.w	r2, r3, #2
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800505c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005060:	f003 0308 	and.w	r3, r3, #8
 8005064:	2b00      	cmp	r3, #0
 8005066:	d017      	beq.n	8005098 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800506c:	f003 0320 	and.w	r3, r3, #32
 8005070:	2b00      	cmp	r3, #0
 8005072:	d105      	bne.n	8005080 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005074:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005078:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00b      	beq.n	8005098 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2208      	movs	r2, #8
 8005086:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800508e:	f043 0208 	orr.w	r2, r3, #8
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800509c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d012      	beq.n	80050ca <HAL_UART_IRQHandler+0x18a>
 80050a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00c      	beq.n	80050ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050c0:	f043 0220 	orr.w	r2, r3, #32
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 8209 	beq.w	80054e8 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80050d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050da:	f003 0320 	and.w	r3, r3, #32
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00d      	beq.n	80050fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80050e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050e6:	f003 0320 	and.w	r3, r3, #32
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d007      	beq.n	80050fe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005104:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005112:	2b40      	cmp	r3, #64	; 0x40
 8005114:	d005      	beq.n	8005122 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005116:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800511a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800511e:	2b00      	cmp	r3, #0
 8005120:	d04f      	beq.n	80051c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fcef 	bl	8005b06 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005132:	2b40      	cmp	r3, #64	; 0x40
 8005134:	d141      	bne.n	80051ba <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	3308      	adds	r3, #8
 800513c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005140:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005144:	e853 3f00 	ldrex	r3, [r3]
 8005148:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800514c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005154:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3308      	adds	r3, #8
 800515e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005162:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005166:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800516e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005172:	e841 2300 	strex	r3, r2, [r1]
 8005176:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800517a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1d9      	bne.n	8005136 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005186:	2b00      	cmp	r3, #0
 8005188:	d013      	beq.n	80051b2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518e:	4a13      	ldr	r2, [pc, #76]	; (80051dc <HAL_UART_IRQHandler+0x29c>)
 8005190:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005196:	4618      	mov	r0, r3
 8005198:	f7fd f8f4 	bl	8002384 <HAL_DMA_Abort_IT>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d017      	beq.n	80051d2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80051ac:	4610      	mov	r0, r2
 80051ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b0:	e00f      	b.n	80051d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f9ac 	bl	8005510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b8:	e00b      	b.n	80051d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f9a8 	bl	8005510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c0:	e007      	b.n	80051d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f9a4 	bl	8005510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80051d0:	e18a      	b.n	80054e8 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d2:	bf00      	nop
    return;
 80051d4:	e188      	b.n	80054e8 <HAL_UART_IRQHandler+0x5a8>
 80051d6:	bf00      	nop
 80051d8:	04000120 	.word	0x04000120
 80051dc:	08005bcd 	.word	0x08005bcd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	f040 8143 	bne.w	8005470 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80051ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ee:	f003 0310 	and.w	r3, r3, #16
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 813c 	beq.w	8005470 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80051f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051fc:	f003 0310 	and.w	r3, r3, #16
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 8135 	beq.w	8005470 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2210      	movs	r2, #16
 800520c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005218:	2b40      	cmp	r3, #64	; 0x40
 800521a:	f040 80b1 	bne.w	8005380 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800522a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 815c 	beq.w	80054ec <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800523a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800523e:	429a      	cmp	r2, r3
 8005240:	f080 8154 	bcs.w	80054ec <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800524a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	2b20      	cmp	r3, #32
 8005256:	f000 8085 	beq.w	8005364 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005262:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005266:	e853 3f00 	ldrex	r3, [r3]
 800526a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800526e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005272:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005276:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	461a      	mov	r2, r3
 8005280:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005284:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005288:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005290:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005294:	e841 2300 	strex	r3, r2, [r1]
 8005298:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800529c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1da      	bne.n	800525a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3308      	adds	r3, #8
 80052aa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052ae:	e853 3f00 	ldrex	r3, [r3]
 80052b2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80052b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052b6:	f023 0301 	bic.w	r3, r3, #1
 80052ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3308      	adds	r3, #8
 80052c4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80052c8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80052cc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ce:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80052d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80052d4:	e841 2300 	strex	r3, r2, [r1]
 80052d8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80052da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1e1      	bne.n	80052a4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3308      	adds	r3, #8
 80052e6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052ea:	e853 3f00 	ldrex	r3, [r3]
 80052ee:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80052f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3308      	adds	r3, #8
 8005300:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005304:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005306:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005308:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800530a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800530c:	e841 2300 	strex	r3, r2, [r1]
 8005310:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005312:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1e3      	bne.n	80052e0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2220      	movs	r2, #32
 800531c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800532c:	e853 3f00 	ldrex	r3, [r3]
 8005330:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005334:	f023 0310 	bic.w	r3, r3, #16
 8005338:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	461a      	mov	r2, r3
 8005342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005346:	65bb      	str	r3, [r7, #88]	; 0x58
 8005348:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800534c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800534e:	e841 2300 	strex	r3, r2, [r1]
 8005352:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1e4      	bne.n	8005324 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535e:	4618      	mov	r0, r3
 8005360:	f7fc ffd7 	bl	8002312 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005370:	b29b      	uxth	r3, r3
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	b29b      	uxth	r3, r3
 8005376:	4619      	mov	r1, r3
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f8d3 	bl	8005524 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800537e:	e0b5      	b.n	80054ec <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800538c:	b29b      	uxth	r3, r3
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800539a:	b29b      	uxth	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 80a7 	beq.w	80054f0 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80053a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f000 80a2 	beq.w	80054f0 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b4:	e853 3f00 	ldrex	r3, [r3]
 80053b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	461a      	mov	r2, r3
 80053ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80053ce:	647b      	str	r3, [r7, #68]	; 0x44
 80053d0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053d6:	e841 2300 	strex	r3, r2, [r1]
 80053da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1e4      	bne.n	80053ac <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3308      	adds	r3, #8
 80053e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	e853 3f00 	ldrex	r3, [r3]
 80053f0:	623b      	str	r3, [r7, #32]
   return(result);
 80053f2:	6a3b      	ldr	r3, [r7, #32]
 80053f4:	f023 0301 	bic.w	r3, r3, #1
 80053f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	3308      	adds	r3, #8
 8005402:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005406:	633a      	str	r2, [r7, #48]	; 0x30
 8005408:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800540c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800540e:	e841 2300 	strex	r3, r2, [r1]
 8005412:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1e3      	bne.n	80053e2 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2220      	movs	r2, #32
 800541e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	e853 3f00 	ldrex	r3, [r3]
 8005438:	60fb      	str	r3, [r7, #12]
   return(result);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f023 0310 	bic.w	r3, r3, #16
 8005440:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	461a      	mov	r2, r3
 800544a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800544e:	61fb      	str	r3, [r7, #28]
 8005450:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005452:	69b9      	ldr	r1, [r7, #24]
 8005454:	69fa      	ldr	r2, [r7, #28]
 8005456:	e841 2300 	strex	r3, r2, [r1]
 800545a:	617b      	str	r3, [r7, #20]
   return(result);
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1e4      	bne.n	800542c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005462:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005466:	4619      	mov	r1, r3
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f85b 	bl	8005524 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800546e:	e03f      	b.n	80054f0 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005474:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00e      	beq.n	800549a <HAL_UART_IRQHandler+0x55a>
 800547c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005480:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d008      	beq.n	800549a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005490:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 fbda 	bl	8005c4c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005498:	e02d      	b.n	80054f6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800549a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800549e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00e      	beq.n	80054c4 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80054a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d008      	beq.n	80054c4 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d01c      	beq.n	80054f4 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	4798      	blx	r3
    }
    return;
 80054c2:	e017      	b.n	80054f4 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80054c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d012      	beq.n	80054f6 <HAL_UART_IRQHandler+0x5b6>
 80054d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00c      	beq.n	80054f6 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fb8b 	bl	8005bf8 <UART_EndTransmit_IT>
    return;
 80054e2:	e008      	b.n	80054f6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80054e4:	bf00      	nop
 80054e6:	e006      	b.n	80054f6 <HAL_UART_IRQHandler+0x5b6>
    return;
 80054e8:	bf00      	nop
 80054ea:	e004      	b.n	80054f6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80054ec:	bf00      	nop
 80054ee:	e002      	b.n	80054f6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80054f0:	bf00      	nop
 80054f2:	e000      	b.n	80054f6 <HAL_UART_IRQHandler+0x5b6>
    return;
 80054f4:	bf00      	nop
  }

}
 80054f6:	37e8      	adds	r7, #232	; 0xe8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	460b      	mov	r3, r1
 800552e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b088      	sub	sp, #32
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005544:	2300      	movs	r3, #0
 8005546:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	431a      	orrs	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	431a      	orrs	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	69db      	ldr	r3, [r3, #28]
 800555c:	4313      	orrs	r3, r2
 800555e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	4b8a      	ldr	r3, [pc, #552]	; (8005790 <UART_SetConfig+0x254>)
 8005568:	4013      	ands	r3, r2
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	6812      	ldr	r2, [r2, #0]
 800556e:	6979      	ldr	r1, [r7, #20]
 8005570:	430b      	orrs	r3, r1
 8005572:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	4313      	orrs	r3, r2
 8005598:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a78      	ldr	r2, [pc, #480]	; (8005794 <UART_SetConfig+0x258>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d120      	bne.n	80055fa <UART_SetConfig+0xbe>
 80055b8:	4b77      	ldr	r3, [pc, #476]	; (8005798 <UART_SetConfig+0x25c>)
 80055ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055bc:	f003 0303 	and.w	r3, r3, #3
 80055c0:	2b03      	cmp	r3, #3
 80055c2:	d817      	bhi.n	80055f4 <UART_SetConfig+0xb8>
 80055c4:	a201      	add	r2, pc, #4	; (adr r2, 80055cc <UART_SetConfig+0x90>)
 80055c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ca:	bf00      	nop
 80055cc:	080055dd 	.word	0x080055dd
 80055d0:	080055e9 	.word	0x080055e9
 80055d4:	080055ef 	.word	0x080055ef
 80055d8:	080055e3 	.word	0x080055e3
 80055dc:	2300      	movs	r3, #0
 80055de:	77fb      	strb	r3, [r7, #31]
 80055e0:	e01d      	b.n	800561e <UART_SetConfig+0xe2>
 80055e2:	2302      	movs	r3, #2
 80055e4:	77fb      	strb	r3, [r7, #31]
 80055e6:	e01a      	b.n	800561e <UART_SetConfig+0xe2>
 80055e8:	2304      	movs	r3, #4
 80055ea:	77fb      	strb	r3, [r7, #31]
 80055ec:	e017      	b.n	800561e <UART_SetConfig+0xe2>
 80055ee:	2308      	movs	r3, #8
 80055f0:	77fb      	strb	r3, [r7, #31]
 80055f2:	e014      	b.n	800561e <UART_SetConfig+0xe2>
 80055f4:	2310      	movs	r3, #16
 80055f6:	77fb      	strb	r3, [r7, #31]
 80055f8:	e011      	b.n	800561e <UART_SetConfig+0xe2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a67      	ldr	r2, [pc, #412]	; (800579c <UART_SetConfig+0x260>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d102      	bne.n	800560a <UART_SetConfig+0xce>
 8005604:	2300      	movs	r3, #0
 8005606:	77fb      	strb	r3, [r7, #31]
 8005608:	e009      	b.n	800561e <UART_SetConfig+0xe2>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a64      	ldr	r2, [pc, #400]	; (80057a0 <UART_SetConfig+0x264>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d102      	bne.n	800561a <UART_SetConfig+0xde>
 8005614:	2300      	movs	r3, #0
 8005616:	77fb      	strb	r3, [r7, #31]
 8005618:	e001      	b.n	800561e <UART_SetConfig+0xe2>
 800561a:	2310      	movs	r3, #16
 800561c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005626:	d15b      	bne.n	80056e0 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005628:	7ffb      	ldrb	r3, [r7, #31]
 800562a:	2b08      	cmp	r3, #8
 800562c:	d827      	bhi.n	800567e <UART_SetConfig+0x142>
 800562e:	a201      	add	r2, pc, #4	; (adr r2, 8005634 <UART_SetConfig+0xf8>)
 8005630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005634:	08005659 	.word	0x08005659
 8005638:	08005661 	.word	0x08005661
 800563c:	08005669 	.word	0x08005669
 8005640:	0800567f 	.word	0x0800567f
 8005644:	0800566f 	.word	0x0800566f
 8005648:	0800567f 	.word	0x0800567f
 800564c:	0800567f 	.word	0x0800567f
 8005650:	0800567f 	.word	0x0800567f
 8005654:	08005677 	.word	0x08005677
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005658:	f7fe fa74 	bl	8003b44 <HAL_RCC_GetPCLK1Freq>
 800565c:	61b8      	str	r0, [r7, #24]
        break;
 800565e:	e013      	b.n	8005688 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005660:	f7fe fa92 	bl	8003b88 <HAL_RCC_GetPCLK2Freq>
 8005664:	61b8      	str	r0, [r7, #24]
        break;
 8005666:	e00f      	b.n	8005688 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005668:	4b4e      	ldr	r3, [pc, #312]	; (80057a4 <UART_SetConfig+0x268>)
 800566a:	61bb      	str	r3, [r7, #24]
        break;
 800566c:	e00c      	b.n	8005688 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800566e:	f7fe f9f3 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 8005672:	61b8      	str	r0, [r7, #24]
        break;
 8005674:	e008      	b.n	8005688 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800567a:	61bb      	str	r3, [r7, #24]
        break;
 800567c:	e004      	b.n	8005688 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800567e:	2300      	movs	r3, #0
 8005680:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	77bb      	strb	r3, [r7, #30]
        break;
 8005686:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d074      	beq.n	8005778 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	005a      	lsls	r2, r3, #1
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	085b      	lsrs	r3, r3, #1
 8005698:	441a      	add	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	2b0f      	cmp	r3, #15
 80056aa:	d916      	bls.n	80056da <UART_SetConfig+0x19e>
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056b2:	d212      	bcs.n	80056da <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	f023 030f 	bic.w	r3, r3, #15
 80056bc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	085b      	lsrs	r3, r3, #1
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	f003 0307 	and.w	r3, r3, #7
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	89fb      	ldrh	r3, [r7, #14]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	89fa      	ldrh	r2, [r7, #14]
 80056d6:	60da      	str	r2, [r3, #12]
 80056d8:	e04e      	b.n	8005778 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	77bb      	strb	r3, [r7, #30]
 80056de:	e04b      	b.n	8005778 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056e0:	7ffb      	ldrb	r3, [r7, #31]
 80056e2:	2b08      	cmp	r3, #8
 80056e4:	d827      	bhi.n	8005736 <UART_SetConfig+0x1fa>
 80056e6:	a201      	add	r2, pc, #4	; (adr r2, 80056ec <UART_SetConfig+0x1b0>)
 80056e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ec:	08005711 	.word	0x08005711
 80056f0:	08005719 	.word	0x08005719
 80056f4:	08005721 	.word	0x08005721
 80056f8:	08005737 	.word	0x08005737
 80056fc:	08005727 	.word	0x08005727
 8005700:	08005737 	.word	0x08005737
 8005704:	08005737 	.word	0x08005737
 8005708:	08005737 	.word	0x08005737
 800570c:	0800572f 	.word	0x0800572f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005710:	f7fe fa18 	bl	8003b44 <HAL_RCC_GetPCLK1Freq>
 8005714:	61b8      	str	r0, [r7, #24]
        break;
 8005716:	e013      	b.n	8005740 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005718:	f7fe fa36 	bl	8003b88 <HAL_RCC_GetPCLK2Freq>
 800571c:	61b8      	str	r0, [r7, #24]
        break;
 800571e:	e00f      	b.n	8005740 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005720:	4b20      	ldr	r3, [pc, #128]	; (80057a4 <UART_SetConfig+0x268>)
 8005722:	61bb      	str	r3, [r7, #24]
        break;
 8005724:	e00c      	b.n	8005740 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005726:	f7fe f997 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 800572a:	61b8      	str	r0, [r7, #24]
        break;
 800572c:	e008      	b.n	8005740 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800572e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005732:	61bb      	str	r3, [r7, #24]
        break;
 8005734:	e004      	b.n	8005740 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	77bb      	strb	r3, [r7, #30]
        break;
 800573e:	bf00      	nop
    }

    if (pclk != 0U)
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d018      	beq.n	8005778 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	085a      	lsrs	r2, r3, #1
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	441a      	add	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	fbb2 f3f3 	udiv	r3, r2, r3
 8005758:	b29b      	uxth	r3, r3
 800575a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	2b0f      	cmp	r3, #15
 8005760:	d908      	bls.n	8005774 <UART_SetConfig+0x238>
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005768:	d204      	bcs.n	8005774 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	60da      	str	r2, [r3, #12]
 8005772:	e001      	b.n	8005778 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005784:	7fbb      	ldrb	r3, [r7, #30]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3720      	adds	r7, #32
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	efff69f3 	.word	0xefff69f3
 8005794:	40013800 	.word	0x40013800
 8005798:	40021000 	.word	0x40021000
 800579c:	40004400 	.word	0x40004400
 80057a0:	40004800 	.word	0x40004800
 80057a4:	007a1200 	.word	0x007a1200

080057a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00a      	beq.n	80057d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00a      	beq.n	8005816 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	f003 0308 	and.w	r3, r3, #8
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00a      	beq.n	8005838 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	f003 0310 	and.w	r3, r3, #16
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00a      	beq.n	800585a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005884:	2b00      	cmp	r3, #0
 8005886:	d01a      	beq.n	80058be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058a6:	d10a      	bne.n	80058be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	430a      	orrs	r2, r1
 80058de:	605a      	str	r2, [r3, #4]
  }
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058fc:	f7fc fbec 	bl	80020d8 <HAL_GetTick>
 8005900:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0308 	and.w	r3, r3, #8
 800590c:	2b08      	cmp	r3, #8
 800590e:	d10e      	bne.n	800592e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005910:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f82d 	bl	800597e <UART_WaitOnFlagUntilTimeout>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e023      	b.n	8005976 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0304 	and.w	r3, r3, #4
 8005938:	2b04      	cmp	r3, #4
 800593a:	d10e      	bne.n	800595a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800593c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f817 	bl	800597e <UART_WaitOnFlagUntilTimeout>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e00d      	b.n	8005976 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2220      	movs	r2, #32
 800595e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2220      	movs	r2, #32
 8005964:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b09c      	sub	sp, #112	; 0x70
 8005982:	af00      	add	r7, sp, #0
 8005984:	60f8      	str	r0, [r7, #12]
 8005986:	60b9      	str	r1, [r7, #8]
 8005988:	603b      	str	r3, [r7, #0]
 800598a:	4613      	mov	r3, r2
 800598c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800598e:	e0a5      	b.n	8005adc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005990:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005996:	f000 80a1 	beq.w	8005adc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800599a:	f7fc fb9d 	bl	80020d8 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d302      	bcc.n	80059b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80059aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d13e      	bne.n	8005a2e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059b8:	e853 3f00 	ldrex	r3, [r3]
 80059bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80059be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059c4:	667b      	str	r3, [r7, #100]	; 0x64
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	461a      	mov	r2, r3
 80059cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059d0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059d6:	e841 2300 	strex	r3, r2, [r1]
 80059da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80059dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1e6      	bne.n	80059b0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	3308      	adds	r3, #8
 80059e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ec:	e853 3f00 	ldrex	r3, [r3]
 80059f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f4:	f023 0301 	bic.w	r3, r3, #1
 80059f8:	663b      	str	r3, [r7, #96]	; 0x60
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	3308      	adds	r3, #8
 8005a00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a02:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a0a:	e841 2300 	strex	r3, r2, [r1]
 8005a0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1e5      	bne.n	80059e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2220      	movs	r2, #32
 8005a1a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e067      	b.n	8005afe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d04f      	beq.n	8005adc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a4a:	d147      	bne.n	8005adc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5e:	e853 3f00 	ldrex	r3, [r3]
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	461a      	mov	r2, r3
 8005a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a74:	637b      	str	r3, [r7, #52]	; 0x34
 8005a76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a7c:	e841 2300 	strex	r3, r2, [r1]
 8005a80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1e6      	bne.n	8005a56 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3308      	adds	r3, #8
 8005a8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	e853 3f00 	ldrex	r3, [r3]
 8005a96:	613b      	str	r3, [r7, #16]
   return(result);
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	f023 0301 	bic.w	r3, r3, #1
 8005a9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3308      	adds	r3, #8
 8005aa6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005aa8:	623a      	str	r2, [r7, #32]
 8005aaa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aac:	69f9      	ldr	r1, [r7, #28]
 8005aae:	6a3a      	ldr	r2, [r7, #32]
 8005ab0:	e841 2300 	strex	r3, r2, [r1]
 8005ab4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1e5      	bne.n	8005a88 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2220      	movs	r2, #32
 8005ac6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2220      	movs	r2, #32
 8005acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e010      	b.n	8005afe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	69da      	ldr	r2, [r3, #28]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	bf0c      	ite	eq
 8005aec:	2301      	moveq	r3, #1
 8005aee:	2300      	movne	r3, #0
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	461a      	mov	r2, r3
 8005af4:	79fb      	ldrb	r3, [r7, #7]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	f43f af4a 	beq.w	8005990 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3770      	adds	r7, #112	; 0x70
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b095      	sub	sp, #84	; 0x54
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b16:	e853 3f00 	ldrex	r3, [r3]
 8005b1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b2c:	643b      	str	r3, [r7, #64]	; 0x40
 8005b2e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b34:	e841 2300 	strex	r3, r2, [r1]
 8005b38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1e6      	bne.n	8005b0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3308      	adds	r3, #8
 8005b46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	e853 3f00 	ldrex	r3, [r3]
 8005b4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	f023 0301 	bic.w	r3, r3, #1
 8005b56:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	3308      	adds	r3, #8
 8005b5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b68:	e841 2300 	strex	r3, r2, [r1]
 8005b6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1e5      	bne.n	8005b40 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d118      	bne.n	8005bae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	e853 3f00 	ldrex	r3, [r3]
 8005b88:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f023 0310 	bic.w	r3, r3, #16
 8005b90:	647b      	str	r3, [r7, #68]	; 0x44
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	461a      	mov	r2, r3
 8005b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b9a:	61bb      	str	r3, [r7, #24]
 8005b9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9e:	6979      	ldr	r1, [r7, #20]
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	e841 2300 	strex	r3, r2, [r1]
 8005ba6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1e6      	bne.n	8005b7c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005bc0:	bf00      	nop
 8005bc2:	3754      	adds	r7, #84	; 0x54
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f7ff fc90 	bl	8005510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bf0:	bf00      	nop
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b088      	sub	sp, #32
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	e853 3f00 	ldrex	r3, [r3]
 8005c0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c14:	61fb      	str	r3, [r7, #28]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	61bb      	str	r3, [r7, #24]
 8005c20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c22:	6979      	ldr	r1, [r7, #20]
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	e841 2300 	strex	r3, r2, [r1]
 8005c2a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1e6      	bne.n	8005c00 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2220      	movs	r2, #32
 8005c36:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7ff fc5c 	bl	80054fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c44:	bf00      	nop
 8005c46:	3720      	adds	r7, #32
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <_ZdlPvj>:
 8005c60:	f000 b9b0 	b.w	8005fc4 <_ZdlPv>

08005c64 <_Znwj>:
 8005c64:	2801      	cmp	r0, #1
 8005c66:	bf38      	it	cc
 8005c68:	2001      	movcc	r0, #1
 8005c6a:	b510      	push	{r4, lr}
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	4620      	mov	r0, r4
 8005c70:	f000 f9e4 	bl	800603c <malloc>
 8005c74:	b930      	cbnz	r0, 8005c84 <_Znwj+0x20>
 8005c76:	f000 f9a7 	bl	8005fc8 <_ZSt15get_new_handlerv>
 8005c7a:	b908      	cbnz	r0, 8005c80 <_Znwj+0x1c>
 8005c7c:	f000 f9ac 	bl	8005fd8 <abort>
 8005c80:	4780      	blx	r0
 8005c82:	e7f4      	b.n	8005c6e <_Znwj+0xa>
 8005c84:	bd10      	pop	{r4, pc}

08005c86 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8005c86:	68c3      	ldr	r3, [r0, #12]
 8005c88:	689a      	ldr	r2, [r3, #8]
 8005c8a:	60c2      	str	r2, [r0, #12]
 8005c8c:	b510      	push	{r4, lr}
 8005c8e:	b102      	cbz	r2, 8005c92 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 8005c90:	6050      	str	r0, [r2, #4]
 8005c92:	6842      	ldr	r2, [r0, #4]
 8005c94:	605a      	str	r2, [r3, #4]
 8005c96:	680c      	ldr	r4, [r1, #0]
 8005c98:	4284      	cmp	r4, r0
 8005c9a:	d103      	bne.n	8005ca4 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8005c9c:	600b      	str	r3, [r1, #0]
 8005c9e:	6098      	str	r0, [r3, #8]
 8005ca0:	6043      	str	r3, [r0, #4]
 8005ca2:	bd10      	pop	{r4, pc}
 8005ca4:	6891      	ldr	r1, [r2, #8]
 8005ca6:	4281      	cmp	r1, r0
 8005ca8:	bf0c      	ite	eq
 8005caa:	6093      	streq	r3, [r2, #8]
 8005cac:	60d3      	strne	r3, [r2, #12]
 8005cae:	e7f6      	b.n	8005c9e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

08005cb0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8005cb0:	6883      	ldr	r3, [r0, #8]
 8005cb2:	68da      	ldr	r2, [r3, #12]
 8005cb4:	6082      	str	r2, [r0, #8]
 8005cb6:	b510      	push	{r4, lr}
 8005cb8:	b102      	cbz	r2, 8005cbc <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8005cba:	6050      	str	r0, [r2, #4]
 8005cbc:	6842      	ldr	r2, [r0, #4]
 8005cbe:	605a      	str	r2, [r3, #4]
 8005cc0:	680c      	ldr	r4, [r1, #0]
 8005cc2:	4284      	cmp	r4, r0
 8005cc4:	d103      	bne.n	8005cce <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8005cc6:	600b      	str	r3, [r1, #0]
 8005cc8:	60d8      	str	r0, [r3, #12]
 8005cca:	6043      	str	r3, [r0, #4]
 8005ccc:	bd10      	pop	{r4, pc}
 8005cce:	68d1      	ldr	r1, [r2, #12]
 8005cd0:	4281      	cmp	r1, r0
 8005cd2:	bf0c      	ite	eq
 8005cd4:	60d3      	streq	r3, [r2, #12]
 8005cd6:	6093      	strne	r3, [r2, #8]
 8005cd8:	e7f6      	b.n	8005cc8 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08005cda <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8005cda:	68c3      	ldr	r3, [r0, #12]
 8005cdc:	b123      	cbz	r3, 8005ce8 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 8005cde:	4618      	mov	r0, r3
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1fb      	bne.n	8005cde <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 8005ce6:	4770      	bx	lr
 8005ce8:	6843      	ldr	r3, [r0, #4]
 8005cea:	68da      	ldr	r2, [r3, #12]
 8005cec:	4282      	cmp	r2, r0
 8005cee:	d102      	bne.n	8005cf6 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	e7f9      	b.n	8005cea <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 8005cf6:	68c2      	ldr	r2, [r0, #12]
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	bf18      	it	ne
 8005cfc:	4618      	movne	r0, r3
 8005cfe:	4770      	bx	lr

08005d00 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8005d00:	7803      	ldrb	r3, [r0, #0]
 8005d02:	b933      	cbnz	r3, 8005d12 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8005d04:	6843      	ldr	r3, [r0, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	4283      	cmp	r3, r0
 8005d0a:	d102      	bne.n	8005d12 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	4770      	bx	lr
 8005d12:	6882      	ldr	r2, [r0, #8]
 8005d14:	b122      	cbz	r2, 8005d20 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8005d16:	4613      	mov	r3, r2
 8005d18:	68d2      	ldr	r2, [r2, #12]
 8005d1a:	2a00      	cmp	r2, #0
 8005d1c:	d1fb      	bne.n	8005d16 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8005d1e:	e7f6      	b.n	8005d0e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8005d20:	6843      	ldr	r3, [r0, #4]
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	4282      	cmp	r2, r0
 8005d26:	d1f2      	bne.n	8005d0e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8005d28:	4618      	mov	r0, r3
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	e7f9      	b.n	8005d22 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08005d2e <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8005d2e:	f7ff bfd4 	b.w	8005cda <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

08005d32 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>:
 8005d32:	f7ff bfd2 	b.w	8005cda <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

08005d36 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8005d36:	f7ff bfe3 	b.w	8005d00 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08005d3a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8005d3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d3e:	461e      	mov	r6, r3
 8005d40:	f103 0804 	add.w	r8, r3, #4
 8005d44:	2300      	movs	r3, #0
 8005d46:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	604a      	str	r2, [r1, #4]
 8005d4e:	700b      	strb	r3, [r1, #0]
 8005d50:	b300      	cbz	r0, 8005d94 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 8005d52:	4296      	cmp	r6, r2
 8005d54:	6091      	str	r1, [r2, #8]
 8005d56:	d118      	bne.n	8005d8a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 8005d58:	6071      	str	r1, [r6, #4]
 8005d5a:	60f4      	str	r4, [r6, #12]
 8005d5c:	2701      	movs	r7, #1
 8005d5e:	f04f 0900 	mov.w	r9, #0
 8005d62:	6873      	ldr	r3, [r6, #4]
 8005d64:	42a3      	cmp	r3, r4
 8005d66:	d03f      	beq.n	8005de8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8005d68:	6860      	ldr	r0, [r4, #4]
 8005d6a:	7802      	ldrb	r2, [r0, #0]
 8005d6c:	2a00      	cmp	r2, #0
 8005d6e:	d13b      	bne.n	8005de8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8005d70:	6845      	ldr	r5, [r0, #4]
 8005d72:	68ab      	ldr	r3, [r5, #8]
 8005d74:	4298      	cmp	r0, r3
 8005d76:	d123      	bne.n	8005dc0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 8005d78:	68eb      	ldr	r3, [r5, #12]
 8005d7a:	b183      	cbz	r3, 8005d9e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8005d7c:	781a      	ldrb	r2, [r3, #0]
 8005d7e:	b972      	cbnz	r2, 8005d9e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8005d80:	7007      	strb	r7, [r0, #0]
 8005d82:	701f      	strb	r7, [r3, #0]
 8005d84:	702a      	strb	r2, [r5, #0]
 8005d86:	462c      	mov	r4, r5
 8005d88:	e7eb      	b.n	8005d62 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 8005d8a:	68b3      	ldr	r3, [r6, #8]
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d1e5      	bne.n	8005d5c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8005d90:	60b1      	str	r1, [r6, #8]
 8005d92:	e7e3      	b.n	8005d5c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8005d94:	60d1      	str	r1, [r2, #12]
 8005d96:	68f3      	ldr	r3, [r6, #12]
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d1df      	bne.n	8005d5c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8005d9c:	e7dd      	b.n	8005d5a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8005d9e:	68c3      	ldr	r3, [r0, #12]
 8005da0:	42a3      	cmp	r3, r4
 8005da2:	d103      	bne.n	8005dac <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 8005da4:	4641      	mov	r1, r8
 8005da6:	f7ff ff6e 	bl	8005c86 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8005daa:	4604      	mov	r4, r0
 8005dac:	6863      	ldr	r3, [r4, #4]
 8005dae:	4641      	mov	r1, r8
 8005db0:	701f      	strb	r7, [r3, #0]
 8005db2:	4628      	mov	r0, r5
 8005db4:	f885 9000 	strb.w	r9, [r5]
 8005db8:	f7ff ff7a 	bl	8005cb0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8005dbc:	4625      	mov	r5, r4
 8005dbe:	e7e2      	b.n	8005d86 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 8005dc0:	b113      	cbz	r3, 8005dc8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 8005dc2:	781a      	ldrb	r2, [r3, #0]
 8005dc4:	2a00      	cmp	r2, #0
 8005dc6:	d0db      	beq.n	8005d80 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 8005dc8:	6883      	ldr	r3, [r0, #8]
 8005dca:	42a3      	cmp	r3, r4
 8005dcc:	d103      	bne.n	8005dd6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 8005dce:	4641      	mov	r1, r8
 8005dd0:	f7ff ff6e 	bl	8005cb0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8005dd4:	4604      	mov	r4, r0
 8005dd6:	6863      	ldr	r3, [r4, #4]
 8005dd8:	4641      	mov	r1, r8
 8005dda:	701f      	strb	r7, [r3, #0]
 8005ddc:	4628      	mov	r0, r5
 8005dde:	f885 9000 	strb.w	r9, [r5]
 8005de2:	f7ff ff50 	bl	8005c86 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8005de6:	e7e9      	b.n	8005dbc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 8005de8:	2201      	movs	r2, #1
 8005dea:	701a      	strb	r2, [r3, #0]
 8005dec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005df0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>:
 8005df0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005df4:	460f      	mov	r7, r1
 8005df6:	e9d0 6102 	ldrd	r6, r1, [r0, #8]
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	2e00      	cmp	r6, #0
 8005dfe:	d03e      	beq.n	8005e7e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x8e>
 8005e00:	2900      	cmp	r1, #0
 8005e02:	d03d      	beq.n	8005e80 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x90>
 8005e04:	460a      	mov	r2, r1
 8005e06:	4613      	mov	r3, r2
 8005e08:	6892      	ldr	r2, [r2, #8]
 8005e0a:	2a00      	cmp	r2, #0
 8005e0c:	d1fb      	bne.n	8005e06 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x16>
 8005e0e:	42a3      	cmp	r3, r4
 8005e10:	68da      	ldr	r2, [r3, #12]
 8005e12:	d04b      	beq.n	8005eac <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xbc>
 8005e14:	4299      	cmp	r1, r3
 8005e16:	6073      	str	r3, [r6, #4]
 8005e18:	609e      	str	r6, [r3, #8]
 8005e1a:	d027      	beq.n	8005e6c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x7c>
 8005e1c:	685d      	ldr	r5, [r3, #4]
 8005e1e:	b102      	cbz	r2, 8005e22 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x32>
 8005e20:	6055      	str	r5, [r2, #4]
 8005e22:	6858      	ldr	r0, [r3, #4]
 8005e24:	6082      	str	r2, [r0, #8]
 8005e26:	60d9      	str	r1, [r3, #12]
 8005e28:	68e1      	ldr	r1, [r4, #12]
 8005e2a:	604b      	str	r3, [r1, #4]
 8005e2c:	6879      	ldr	r1, [r7, #4]
 8005e2e:	42a1      	cmp	r1, r4
 8005e30:	d11e      	bne.n	8005e70 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x80>
 8005e32:	607b      	str	r3, [r7, #4]
 8005e34:	6861      	ldr	r1, [r4, #4]
 8005e36:	7820      	ldrb	r0, [r4, #0]
 8005e38:	6059      	str	r1, [r3, #4]
 8005e3a:	7819      	ldrb	r1, [r3, #0]
 8005e3c:	7018      	strb	r0, [r3, #0]
 8005e3e:	4616      	mov	r6, r2
 8005e40:	7021      	strb	r1, [r4, #0]
 8005e42:	7823      	ldrb	r3, [r4, #0]
 8005e44:	b173      	cbz	r3, 8005e64 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x74>
 8005e46:	1d39      	adds	r1, r7, #4
 8005e48:	f04f 0800 	mov.w	r8, #0
 8005e4c:	f04f 0901 	mov.w	r9, #1
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	42b3      	cmp	r3, r6
 8005e54:	d07b      	beq.n	8005f4e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x15e>
 8005e56:	2e00      	cmp	r6, #0
 8005e58:	d03f      	beq.n	8005eda <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xea>
 8005e5a:	7833      	ldrb	r3, [r6, #0]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d03c      	beq.n	8005eda <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xea>
 8005e60:	2301      	movs	r3, #1
 8005e62:	7033      	strb	r3, [r6, #0]
 8005e64:	4620      	mov	r0, r4
 8005e66:	b003      	add	sp, #12
 8005e68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e6c:	461d      	mov	r5, r3
 8005e6e:	e7dd      	b.n	8005e2c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x3c>
 8005e70:	6861      	ldr	r1, [r4, #4]
 8005e72:	6888      	ldr	r0, [r1, #8]
 8005e74:	42a0      	cmp	r0, r4
 8005e76:	bf0c      	ite	eq
 8005e78:	608b      	streq	r3, [r1, #8]
 8005e7a:	60cb      	strne	r3, [r1, #12]
 8005e7c:	e7da      	b.n	8005e34 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x44>
 8005e7e:	460e      	mov	r6, r1
 8005e80:	6865      	ldr	r5, [r4, #4]
 8005e82:	b106      	cbz	r6, 8005e86 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x96>
 8005e84:	6075      	str	r5, [r6, #4]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	42a3      	cmp	r3, r4
 8005e8a:	d111      	bne.n	8005eb0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xc0>
 8005e8c:	607e      	str	r6, [r7, #4]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	42a3      	cmp	r3, r4
 8005e92:	d103      	bne.n	8005e9c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xac>
 8005e94:	68e3      	ldr	r3, [r4, #12]
 8005e96:	b993      	cbnz	r3, 8005ebe <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xce>
 8005e98:	6863      	ldr	r3, [r4, #4]
 8005e9a:	60bb      	str	r3, [r7, #8]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	42a3      	cmp	r3, r4
 8005ea0:	d1cf      	bne.n	8005e42 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
 8005ea2:	68a3      	ldr	r3, [r4, #8]
 8005ea4:	b993      	cbnz	r3, 8005ecc <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xdc>
 8005ea6:	6863      	ldr	r3, [r4, #4]
 8005ea8:	60fb      	str	r3, [r7, #12]
 8005eaa:	e7ca      	b.n	8005e42 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
 8005eac:	4616      	mov	r6, r2
 8005eae:	e7e7      	b.n	8005e80 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x90>
 8005eb0:	6863      	ldr	r3, [r4, #4]
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	42a2      	cmp	r2, r4
 8005eb6:	bf0c      	ite	eq
 8005eb8:	609e      	streq	r6, [r3, #8]
 8005eba:	60de      	strne	r6, [r3, #12]
 8005ebc:	e7e7      	b.n	8005e8e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x9e>
 8005ebe:	4633      	mov	r3, r6
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1fb      	bne.n	8005ec0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xd0>
 8005ec8:	60ba      	str	r2, [r7, #8]
 8005eca:	e7e7      	b.n	8005e9c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xac>
 8005ecc:	4633      	mov	r3, r6
 8005ece:	461a      	mov	r2, r3
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1fb      	bne.n	8005ece <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xde>
 8005ed6:	60fa      	str	r2, [r7, #12]
 8005ed8:	e7b3      	b.n	8005e42 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
 8005eda:	68a8      	ldr	r0, [r5, #8]
 8005edc:	42b0      	cmp	r0, r6
 8005ede:	d139      	bne.n	8005f54 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x164>
 8005ee0:	68e8      	ldr	r0, [r5, #12]
 8005ee2:	7803      	ldrb	r3, [r0, #0]
 8005ee4:	b943      	cbnz	r3, 8005ef8 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x108>
 8005ee6:	f880 9000 	strb.w	r9, [r0]
 8005eea:	4628      	mov	r0, r5
 8005eec:	702b      	strb	r3, [r5, #0]
 8005eee:	9101      	str	r1, [sp, #4]
 8005ef0:	f7ff fec9 	bl	8005c86 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8005ef4:	68e8      	ldr	r0, [r5, #12]
 8005ef6:	9901      	ldr	r1, [sp, #4]
 8005ef8:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 8005efc:	b122      	cbz	r2, 8005f08 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x118>
 8005efe:	f892 c000 	ldrb.w	ip, [r2]
 8005f02:	f1bc 0f01 	cmp.w	ip, #1
 8005f06:	d10b      	bne.n	8005f20 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x130>
 8005f08:	b123      	cbz	r3, 8005f14 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x124>
 8005f0a:	f893 c000 	ldrb.w	ip, [r3]
 8005f0e:	f1bc 0f01 	cmp.w	ip, #1
 8005f12:	d105      	bne.n	8005f20 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x130>
 8005f14:	686b      	ldr	r3, [r5, #4]
 8005f16:	f880 8000 	strb.w	r8, [r0]
 8005f1a:	462e      	mov	r6, r5
 8005f1c:	461d      	mov	r5, r3
 8005f1e:	e797      	b.n	8005e50 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x60>
 8005f20:	b113      	cbz	r3, 8005f28 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x138>
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d108      	bne.n	8005f3a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x14a>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	7013      	strb	r3, [r2, #0]
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	7003      	strb	r3, [r0, #0]
 8005f30:	9101      	str	r1, [sp, #4]
 8005f32:	f7ff febd 	bl	8005cb0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8005f36:	68e8      	ldr	r0, [r5, #12]
 8005f38:	9901      	ldr	r1, [sp, #4]
 8005f3a:	782b      	ldrb	r3, [r5, #0]
 8005f3c:	7003      	strb	r3, [r0, #0]
 8005f3e:	68c3      	ldr	r3, [r0, #12]
 8005f40:	2201      	movs	r2, #1
 8005f42:	702a      	strb	r2, [r5, #0]
 8005f44:	b103      	cbz	r3, 8005f48 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x158>
 8005f46:	701a      	strb	r2, [r3, #0]
 8005f48:	4628      	mov	r0, r5
 8005f4a:	f7ff fe9c 	bl	8005c86 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8005f4e:	2e00      	cmp	r6, #0
 8005f50:	d186      	bne.n	8005e60 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x70>
 8005f52:	e787      	b.n	8005e64 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x74>
 8005f54:	7803      	ldrb	r3, [r0, #0]
 8005f56:	b943      	cbnz	r3, 8005f6a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x17a>
 8005f58:	f880 9000 	strb.w	r9, [r0]
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	702b      	strb	r3, [r5, #0]
 8005f60:	9101      	str	r1, [sp, #4]
 8005f62:	f7ff fea5 	bl	8005cb0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8005f66:	68a8      	ldr	r0, [r5, #8]
 8005f68:	9901      	ldr	r1, [sp, #4]
 8005f6a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8005f6e:	b122      	cbz	r2, 8005f7a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x18a>
 8005f70:	f892 c000 	ldrb.w	ip, [r2]
 8005f74:	f1bc 0f01 	cmp.w	ip, #1
 8005f78:	d106      	bne.n	8005f88 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x198>
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d0ca      	beq.n	8005f14 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x124>
 8005f7e:	f893 c000 	ldrb.w	ip, [r3]
 8005f82:	f1bc 0f01 	cmp.w	ip, #1
 8005f86:	d0c5      	beq.n	8005f14 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x124>
 8005f88:	b113      	cbz	r3, 8005f90 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1a0>
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d108      	bne.n	8005fa2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1b2>
 8005f90:	2301      	movs	r3, #1
 8005f92:	7013      	strb	r3, [r2, #0]
 8005f94:	2300      	movs	r3, #0
 8005f96:	7003      	strb	r3, [r0, #0]
 8005f98:	9101      	str	r1, [sp, #4]
 8005f9a:	f7ff fe74 	bl	8005c86 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8005f9e:	68a8      	ldr	r0, [r5, #8]
 8005fa0:	9901      	ldr	r1, [sp, #4]
 8005fa2:	782b      	ldrb	r3, [r5, #0]
 8005fa4:	7003      	strb	r3, [r0, #0]
 8005fa6:	6883      	ldr	r3, [r0, #8]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	702a      	strb	r2, [r5, #0]
 8005fac:	b103      	cbz	r3, 8005fb0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1c0>
 8005fae:	701a      	strb	r2, [r3, #0]
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	f7ff fe7d 	bl	8005cb0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8005fb6:	e7ca      	b.n	8005f4e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x15e>

08005fb8 <_ZSt17__throw_bad_allocv>:
 8005fb8:	b508      	push	{r3, lr}
 8005fba:	f000 f80d 	bl	8005fd8 <abort>

08005fbe <_ZSt25__throw_bad_function_callv>:
 8005fbe:	b508      	push	{r3, lr}
 8005fc0:	f000 f80a 	bl	8005fd8 <abort>

08005fc4 <_ZdlPv>:
 8005fc4:	f000 b842 	b.w	800604c <free>

08005fc8 <_ZSt15get_new_handlerv>:
 8005fc8:	4b02      	ldr	r3, [pc, #8]	; (8005fd4 <_ZSt15get_new_handlerv+0xc>)
 8005fca:	6818      	ldr	r0, [r3, #0]
 8005fcc:	f3bf 8f5b 	dmb	ish
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	20000180 	.word	0x20000180

08005fd8 <abort>:
 8005fd8:	b508      	push	{r3, lr}
 8005fda:	2006      	movs	r0, #6
 8005fdc:	f000 f95e 	bl	800629c <raise>
 8005fe0:	2001      	movs	r0, #1
 8005fe2:	f7fb ffa3 	bl	8001f2c <_exit>
	...

08005fe8 <__errno>:
 8005fe8:	4b01      	ldr	r3, [pc, #4]	; (8005ff0 <__errno+0x8>)
 8005fea:	6818      	ldr	r0, [r3, #0]
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	2000000c 	.word	0x2000000c

08005ff4 <__libc_init_array>:
 8005ff4:	b570      	push	{r4, r5, r6, lr}
 8005ff6:	4d0d      	ldr	r5, [pc, #52]	; (800602c <__libc_init_array+0x38>)
 8005ff8:	4c0d      	ldr	r4, [pc, #52]	; (8006030 <__libc_init_array+0x3c>)
 8005ffa:	1b64      	subs	r4, r4, r5
 8005ffc:	10a4      	asrs	r4, r4, #2
 8005ffe:	2600      	movs	r6, #0
 8006000:	42a6      	cmp	r6, r4
 8006002:	d109      	bne.n	8006018 <__libc_init_array+0x24>
 8006004:	4d0b      	ldr	r5, [pc, #44]	; (8006034 <__libc_init_array+0x40>)
 8006006:	4c0c      	ldr	r4, [pc, #48]	; (8006038 <__libc_init_array+0x44>)
 8006008:	f000 f972 	bl	80062f0 <_init>
 800600c:	1b64      	subs	r4, r4, r5
 800600e:	10a4      	asrs	r4, r4, #2
 8006010:	2600      	movs	r6, #0
 8006012:	42a6      	cmp	r6, r4
 8006014:	d105      	bne.n	8006022 <__libc_init_array+0x2e>
 8006016:	bd70      	pop	{r4, r5, r6, pc}
 8006018:	f855 3b04 	ldr.w	r3, [r5], #4
 800601c:	4798      	blx	r3
 800601e:	3601      	adds	r6, #1
 8006020:	e7ee      	b.n	8006000 <__libc_init_array+0xc>
 8006022:	f855 3b04 	ldr.w	r3, [r5], #4
 8006026:	4798      	blx	r3
 8006028:	3601      	adds	r6, #1
 800602a:	e7f2      	b.n	8006012 <__libc_init_array+0x1e>
 800602c:	08006350 	.word	0x08006350
 8006030:	08006350 	.word	0x08006350
 8006034:	08006350 	.word	0x08006350
 8006038:	08006358 	.word	0x08006358

0800603c <malloc>:
 800603c:	4b02      	ldr	r3, [pc, #8]	; (8006048 <malloc+0xc>)
 800603e:	4601      	mov	r1, r0
 8006040:	6818      	ldr	r0, [r3, #0]
 8006042:	f000 b87f 	b.w	8006144 <_malloc_r>
 8006046:	bf00      	nop
 8006048:	2000000c 	.word	0x2000000c

0800604c <free>:
 800604c:	4b02      	ldr	r3, [pc, #8]	; (8006058 <free+0xc>)
 800604e:	4601      	mov	r1, r0
 8006050:	6818      	ldr	r0, [r3, #0]
 8006052:	f000 b80b 	b.w	800606c <_free_r>
 8006056:	bf00      	nop
 8006058:	2000000c 	.word	0x2000000c

0800605c <memset>:
 800605c:	4402      	add	r2, r0
 800605e:	4603      	mov	r3, r0
 8006060:	4293      	cmp	r3, r2
 8006062:	d100      	bne.n	8006066 <memset+0xa>
 8006064:	4770      	bx	lr
 8006066:	f803 1b01 	strb.w	r1, [r3], #1
 800606a:	e7f9      	b.n	8006060 <memset+0x4>

0800606c <_free_r>:
 800606c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800606e:	2900      	cmp	r1, #0
 8006070:	d044      	beq.n	80060fc <_free_r+0x90>
 8006072:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006076:	9001      	str	r0, [sp, #4]
 8006078:	2b00      	cmp	r3, #0
 800607a:	f1a1 0404 	sub.w	r4, r1, #4
 800607e:	bfb8      	it	lt
 8006080:	18e4      	addlt	r4, r4, r3
 8006082:	f000 f927 	bl	80062d4 <__malloc_lock>
 8006086:	4a1e      	ldr	r2, [pc, #120]	; (8006100 <_free_r+0x94>)
 8006088:	9801      	ldr	r0, [sp, #4]
 800608a:	6813      	ldr	r3, [r2, #0]
 800608c:	b933      	cbnz	r3, 800609c <_free_r+0x30>
 800608e:	6063      	str	r3, [r4, #4]
 8006090:	6014      	str	r4, [r2, #0]
 8006092:	b003      	add	sp, #12
 8006094:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006098:	f000 b922 	b.w	80062e0 <__malloc_unlock>
 800609c:	42a3      	cmp	r3, r4
 800609e:	d908      	bls.n	80060b2 <_free_r+0x46>
 80060a0:	6825      	ldr	r5, [r4, #0]
 80060a2:	1961      	adds	r1, r4, r5
 80060a4:	428b      	cmp	r3, r1
 80060a6:	bf01      	itttt	eq
 80060a8:	6819      	ldreq	r1, [r3, #0]
 80060aa:	685b      	ldreq	r3, [r3, #4]
 80060ac:	1949      	addeq	r1, r1, r5
 80060ae:	6021      	streq	r1, [r4, #0]
 80060b0:	e7ed      	b.n	800608e <_free_r+0x22>
 80060b2:	461a      	mov	r2, r3
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	b10b      	cbz	r3, 80060bc <_free_r+0x50>
 80060b8:	42a3      	cmp	r3, r4
 80060ba:	d9fa      	bls.n	80060b2 <_free_r+0x46>
 80060bc:	6811      	ldr	r1, [r2, #0]
 80060be:	1855      	adds	r5, r2, r1
 80060c0:	42a5      	cmp	r5, r4
 80060c2:	d10b      	bne.n	80060dc <_free_r+0x70>
 80060c4:	6824      	ldr	r4, [r4, #0]
 80060c6:	4421      	add	r1, r4
 80060c8:	1854      	adds	r4, r2, r1
 80060ca:	42a3      	cmp	r3, r4
 80060cc:	6011      	str	r1, [r2, #0]
 80060ce:	d1e0      	bne.n	8006092 <_free_r+0x26>
 80060d0:	681c      	ldr	r4, [r3, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	6053      	str	r3, [r2, #4]
 80060d6:	4421      	add	r1, r4
 80060d8:	6011      	str	r1, [r2, #0]
 80060da:	e7da      	b.n	8006092 <_free_r+0x26>
 80060dc:	d902      	bls.n	80060e4 <_free_r+0x78>
 80060de:	230c      	movs	r3, #12
 80060e0:	6003      	str	r3, [r0, #0]
 80060e2:	e7d6      	b.n	8006092 <_free_r+0x26>
 80060e4:	6825      	ldr	r5, [r4, #0]
 80060e6:	1961      	adds	r1, r4, r5
 80060e8:	428b      	cmp	r3, r1
 80060ea:	bf04      	itt	eq
 80060ec:	6819      	ldreq	r1, [r3, #0]
 80060ee:	685b      	ldreq	r3, [r3, #4]
 80060f0:	6063      	str	r3, [r4, #4]
 80060f2:	bf04      	itt	eq
 80060f4:	1949      	addeq	r1, r1, r5
 80060f6:	6021      	streq	r1, [r4, #0]
 80060f8:	6054      	str	r4, [r2, #4]
 80060fa:	e7ca      	b.n	8006092 <_free_r+0x26>
 80060fc:	b003      	add	sp, #12
 80060fe:	bd30      	pop	{r4, r5, pc}
 8006100:	20000184 	.word	0x20000184

08006104 <sbrk_aligned>:
 8006104:	b570      	push	{r4, r5, r6, lr}
 8006106:	4e0e      	ldr	r6, [pc, #56]	; (8006140 <sbrk_aligned+0x3c>)
 8006108:	460c      	mov	r4, r1
 800610a:	6831      	ldr	r1, [r6, #0]
 800610c:	4605      	mov	r5, r0
 800610e:	b911      	cbnz	r1, 8006116 <sbrk_aligned+0x12>
 8006110:	f000 f88c 	bl	800622c <_sbrk_r>
 8006114:	6030      	str	r0, [r6, #0]
 8006116:	4621      	mov	r1, r4
 8006118:	4628      	mov	r0, r5
 800611a:	f000 f887 	bl	800622c <_sbrk_r>
 800611e:	1c43      	adds	r3, r0, #1
 8006120:	d00a      	beq.n	8006138 <sbrk_aligned+0x34>
 8006122:	1cc4      	adds	r4, r0, #3
 8006124:	f024 0403 	bic.w	r4, r4, #3
 8006128:	42a0      	cmp	r0, r4
 800612a:	d007      	beq.n	800613c <sbrk_aligned+0x38>
 800612c:	1a21      	subs	r1, r4, r0
 800612e:	4628      	mov	r0, r5
 8006130:	f000 f87c 	bl	800622c <_sbrk_r>
 8006134:	3001      	adds	r0, #1
 8006136:	d101      	bne.n	800613c <sbrk_aligned+0x38>
 8006138:	f04f 34ff 	mov.w	r4, #4294967295
 800613c:	4620      	mov	r0, r4
 800613e:	bd70      	pop	{r4, r5, r6, pc}
 8006140:	20000188 	.word	0x20000188

08006144 <_malloc_r>:
 8006144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006148:	1ccd      	adds	r5, r1, #3
 800614a:	f025 0503 	bic.w	r5, r5, #3
 800614e:	3508      	adds	r5, #8
 8006150:	2d0c      	cmp	r5, #12
 8006152:	bf38      	it	cc
 8006154:	250c      	movcc	r5, #12
 8006156:	2d00      	cmp	r5, #0
 8006158:	4607      	mov	r7, r0
 800615a:	db01      	blt.n	8006160 <_malloc_r+0x1c>
 800615c:	42a9      	cmp	r1, r5
 800615e:	d905      	bls.n	800616c <_malloc_r+0x28>
 8006160:	230c      	movs	r3, #12
 8006162:	603b      	str	r3, [r7, #0]
 8006164:	2600      	movs	r6, #0
 8006166:	4630      	mov	r0, r6
 8006168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800616c:	4e2e      	ldr	r6, [pc, #184]	; (8006228 <_malloc_r+0xe4>)
 800616e:	f000 f8b1 	bl	80062d4 <__malloc_lock>
 8006172:	6833      	ldr	r3, [r6, #0]
 8006174:	461c      	mov	r4, r3
 8006176:	bb34      	cbnz	r4, 80061c6 <_malloc_r+0x82>
 8006178:	4629      	mov	r1, r5
 800617a:	4638      	mov	r0, r7
 800617c:	f7ff ffc2 	bl	8006104 <sbrk_aligned>
 8006180:	1c43      	adds	r3, r0, #1
 8006182:	4604      	mov	r4, r0
 8006184:	d14d      	bne.n	8006222 <_malloc_r+0xde>
 8006186:	6834      	ldr	r4, [r6, #0]
 8006188:	4626      	mov	r6, r4
 800618a:	2e00      	cmp	r6, #0
 800618c:	d140      	bne.n	8006210 <_malloc_r+0xcc>
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	4631      	mov	r1, r6
 8006192:	4638      	mov	r0, r7
 8006194:	eb04 0803 	add.w	r8, r4, r3
 8006198:	f000 f848 	bl	800622c <_sbrk_r>
 800619c:	4580      	cmp	r8, r0
 800619e:	d13a      	bne.n	8006216 <_malloc_r+0xd2>
 80061a0:	6821      	ldr	r1, [r4, #0]
 80061a2:	3503      	adds	r5, #3
 80061a4:	1a6d      	subs	r5, r5, r1
 80061a6:	f025 0503 	bic.w	r5, r5, #3
 80061aa:	3508      	adds	r5, #8
 80061ac:	2d0c      	cmp	r5, #12
 80061ae:	bf38      	it	cc
 80061b0:	250c      	movcc	r5, #12
 80061b2:	4629      	mov	r1, r5
 80061b4:	4638      	mov	r0, r7
 80061b6:	f7ff ffa5 	bl	8006104 <sbrk_aligned>
 80061ba:	3001      	adds	r0, #1
 80061bc:	d02b      	beq.n	8006216 <_malloc_r+0xd2>
 80061be:	6823      	ldr	r3, [r4, #0]
 80061c0:	442b      	add	r3, r5
 80061c2:	6023      	str	r3, [r4, #0]
 80061c4:	e00e      	b.n	80061e4 <_malloc_r+0xa0>
 80061c6:	6822      	ldr	r2, [r4, #0]
 80061c8:	1b52      	subs	r2, r2, r5
 80061ca:	d41e      	bmi.n	800620a <_malloc_r+0xc6>
 80061cc:	2a0b      	cmp	r2, #11
 80061ce:	d916      	bls.n	80061fe <_malloc_r+0xba>
 80061d0:	1961      	adds	r1, r4, r5
 80061d2:	42a3      	cmp	r3, r4
 80061d4:	6025      	str	r5, [r4, #0]
 80061d6:	bf18      	it	ne
 80061d8:	6059      	strne	r1, [r3, #4]
 80061da:	6863      	ldr	r3, [r4, #4]
 80061dc:	bf08      	it	eq
 80061de:	6031      	streq	r1, [r6, #0]
 80061e0:	5162      	str	r2, [r4, r5]
 80061e2:	604b      	str	r3, [r1, #4]
 80061e4:	4638      	mov	r0, r7
 80061e6:	f104 060b 	add.w	r6, r4, #11
 80061ea:	f000 f879 	bl	80062e0 <__malloc_unlock>
 80061ee:	f026 0607 	bic.w	r6, r6, #7
 80061f2:	1d23      	adds	r3, r4, #4
 80061f4:	1af2      	subs	r2, r6, r3
 80061f6:	d0b6      	beq.n	8006166 <_malloc_r+0x22>
 80061f8:	1b9b      	subs	r3, r3, r6
 80061fa:	50a3      	str	r3, [r4, r2]
 80061fc:	e7b3      	b.n	8006166 <_malloc_r+0x22>
 80061fe:	6862      	ldr	r2, [r4, #4]
 8006200:	42a3      	cmp	r3, r4
 8006202:	bf0c      	ite	eq
 8006204:	6032      	streq	r2, [r6, #0]
 8006206:	605a      	strne	r2, [r3, #4]
 8006208:	e7ec      	b.n	80061e4 <_malloc_r+0xa0>
 800620a:	4623      	mov	r3, r4
 800620c:	6864      	ldr	r4, [r4, #4]
 800620e:	e7b2      	b.n	8006176 <_malloc_r+0x32>
 8006210:	4634      	mov	r4, r6
 8006212:	6876      	ldr	r6, [r6, #4]
 8006214:	e7b9      	b.n	800618a <_malloc_r+0x46>
 8006216:	230c      	movs	r3, #12
 8006218:	603b      	str	r3, [r7, #0]
 800621a:	4638      	mov	r0, r7
 800621c:	f000 f860 	bl	80062e0 <__malloc_unlock>
 8006220:	e7a1      	b.n	8006166 <_malloc_r+0x22>
 8006222:	6025      	str	r5, [r4, #0]
 8006224:	e7de      	b.n	80061e4 <_malloc_r+0xa0>
 8006226:	bf00      	nop
 8006228:	20000184 	.word	0x20000184

0800622c <_sbrk_r>:
 800622c:	b538      	push	{r3, r4, r5, lr}
 800622e:	4d06      	ldr	r5, [pc, #24]	; (8006248 <_sbrk_r+0x1c>)
 8006230:	2300      	movs	r3, #0
 8006232:	4604      	mov	r4, r0
 8006234:	4608      	mov	r0, r1
 8006236:	602b      	str	r3, [r5, #0]
 8006238:	f7fb fe82 	bl	8001f40 <_sbrk>
 800623c:	1c43      	adds	r3, r0, #1
 800623e:	d102      	bne.n	8006246 <_sbrk_r+0x1a>
 8006240:	682b      	ldr	r3, [r5, #0]
 8006242:	b103      	cbz	r3, 8006246 <_sbrk_r+0x1a>
 8006244:	6023      	str	r3, [r4, #0]
 8006246:	bd38      	pop	{r3, r4, r5, pc}
 8006248:	2000018c 	.word	0x2000018c

0800624c <_raise_r>:
 800624c:	291f      	cmp	r1, #31
 800624e:	b538      	push	{r3, r4, r5, lr}
 8006250:	4604      	mov	r4, r0
 8006252:	460d      	mov	r5, r1
 8006254:	d904      	bls.n	8006260 <_raise_r+0x14>
 8006256:	2316      	movs	r3, #22
 8006258:	6003      	str	r3, [r0, #0]
 800625a:	f04f 30ff 	mov.w	r0, #4294967295
 800625e:	bd38      	pop	{r3, r4, r5, pc}
 8006260:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006262:	b112      	cbz	r2, 800626a <_raise_r+0x1e>
 8006264:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006268:	b94b      	cbnz	r3, 800627e <_raise_r+0x32>
 800626a:	4620      	mov	r0, r4
 800626c:	f000 f830 	bl	80062d0 <_getpid_r>
 8006270:	462a      	mov	r2, r5
 8006272:	4601      	mov	r1, r0
 8006274:	4620      	mov	r0, r4
 8006276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800627a:	f000 b817 	b.w	80062ac <_kill_r>
 800627e:	2b01      	cmp	r3, #1
 8006280:	d00a      	beq.n	8006298 <_raise_r+0x4c>
 8006282:	1c59      	adds	r1, r3, #1
 8006284:	d103      	bne.n	800628e <_raise_r+0x42>
 8006286:	2316      	movs	r3, #22
 8006288:	6003      	str	r3, [r0, #0]
 800628a:	2001      	movs	r0, #1
 800628c:	e7e7      	b.n	800625e <_raise_r+0x12>
 800628e:	2400      	movs	r4, #0
 8006290:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006294:	4628      	mov	r0, r5
 8006296:	4798      	blx	r3
 8006298:	2000      	movs	r0, #0
 800629a:	e7e0      	b.n	800625e <_raise_r+0x12>

0800629c <raise>:
 800629c:	4b02      	ldr	r3, [pc, #8]	; (80062a8 <raise+0xc>)
 800629e:	4601      	mov	r1, r0
 80062a0:	6818      	ldr	r0, [r3, #0]
 80062a2:	f7ff bfd3 	b.w	800624c <_raise_r>
 80062a6:	bf00      	nop
 80062a8:	2000000c 	.word	0x2000000c

080062ac <_kill_r>:
 80062ac:	b538      	push	{r3, r4, r5, lr}
 80062ae:	4d07      	ldr	r5, [pc, #28]	; (80062cc <_kill_r+0x20>)
 80062b0:	2300      	movs	r3, #0
 80062b2:	4604      	mov	r4, r0
 80062b4:	4608      	mov	r0, r1
 80062b6:	4611      	mov	r1, r2
 80062b8:	602b      	str	r3, [r5, #0]
 80062ba:	f7fb fe27 	bl	8001f0c <_kill>
 80062be:	1c43      	adds	r3, r0, #1
 80062c0:	d102      	bne.n	80062c8 <_kill_r+0x1c>
 80062c2:	682b      	ldr	r3, [r5, #0]
 80062c4:	b103      	cbz	r3, 80062c8 <_kill_r+0x1c>
 80062c6:	6023      	str	r3, [r4, #0]
 80062c8:	bd38      	pop	{r3, r4, r5, pc}
 80062ca:	bf00      	nop
 80062cc:	2000018c 	.word	0x2000018c

080062d0 <_getpid_r>:
 80062d0:	f7fb be14 	b.w	8001efc <_getpid>

080062d4 <__malloc_lock>:
 80062d4:	4801      	ldr	r0, [pc, #4]	; (80062dc <__malloc_lock+0x8>)
 80062d6:	f000 b809 	b.w	80062ec <__retarget_lock_acquire_recursive>
 80062da:	bf00      	nop
 80062dc:	20000190 	.word	0x20000190

080062e0 <__malloc_unlock>:
 80062e0:	4801      	ldr	r0, [pc, #4]	; (80062e8 <__malloc_unlock+0x8>)
 80062e2:	f000 b804 	b.w	80062ee <__retarget_lock_release_recursive>
 80062e6:	bf00      	nop
 80062e8:	20000190 	.word	0x20000190

080062ec <__retarget_lock_acquire_recursive>:
 80062ec:	4770      	bx	lr

080062ee <__retarget_lock_release_recursive>:
 80062ee:	4770      	bx	lr

080062f0 <_init>:
 80062f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f2:	bf00      	nop
 80062f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062f6:	bc08      	pop	{r3}
 80062f8:	469e      	mov	lr, r3
 80062fa:	4770      	bx	lr

080062fc <_fini>:
 80062fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fe:	bf00      	nop
 8006300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006302:	bc08      	pop	{r3}
 8006304:	469e      	mov	lr, r3
 8006306:	4770      	bx	lr
