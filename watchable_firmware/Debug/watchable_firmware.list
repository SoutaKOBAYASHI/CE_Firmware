
watchable_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065f0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006778  08006778  00016778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067c0  080067c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080067c0  080067c0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067c0  080067c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080067c0  080067c0  000167c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080067c8  080067c8  000167c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080067d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000015c  20000070  20000070  00020070  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200001cc  200001cc  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001efa8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003679  00000000  00000000  0003f048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001330  00000000  00000000  000426c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001290  00000000  00000000  000439f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020966  00000000  00000000  00044c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012383  00000000  00000000  000655ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be31d  00000000  00000000  00077971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000049  00000000  00000000  00135c8e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a24  00000000  00000000  00135cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006760 	.word	0x08006760

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08006760 	.word	0x08006760

080001c8 <_ZSt21is_constant_evaluatedv>:

#define __cpp_lib_is_constant_evaluated 201811L

  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	2300      	movs	r3, #0
 80001ce:	4618      	mov	r0, r3
 80001d0:	46bd      	mov	sp, r7
 80001d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001d6:	4770      	bx	lr

080001d8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	6039      	str	r1, [r7, #0]
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	4618      	mov	r0, r3
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ee:	4770      	bx	lr

080001f0 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	4618      	mov	r0, r3
 80001fc:	370c      	adds	r7, #12
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr

08000206 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8000206:	b480      	push	{r7}
 8000208:	b083      	sub	sp, #12
 800020a:	af00      	add	r7, sp, #0
 800020c:	6078      	str	r0, [r7, #4]
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	4618      	mov	r0, r3
 8000212:	370c      	adds	r7, #12
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr

0800021c <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	2200      	movs	r2, #0
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	4618      	mov	r0, r3
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000236:	4770      	bx	lr

08000238 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d005      	beq.n	8000254 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	6878      	ldr	r0, [r7, #4]
 800024e:	6879      	ldr	r1, [r7, #4]
 8000250:	2203      	movs	r2, #3
 8000252:	4798      	blx	r3
    }
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	4618      	mov	r0, r3
 8000258:	3708      	adds	r7, #8
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}

0800025e <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800025e:	b480      	push	{r7}
 8000260:	b083      	sub	sp, #12
 8000262:	af00      	add	r7, sp, #0
 8000264:	6078      	str	r0, [r7, #4]
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	689b      	ldr	r3, [r3, #8]
 800026a:	2b00      	cmp	r3, #0
 800026c:	bf0c      	ite	eq
 800026e:	2301      	moveq	r3, #1
 8000270:	2300      	movne	r3, #0
 8000272:	b2db      	uxtb	r3, r3
 8000274:	4618      	mov	r0, r3
 8000276:	370c      	adds	r7, #12
 8000278:	46bd      	mov	sp, r7
 800027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027e:	4770      	bx	lr

08000280 <_ZN3LEDC1EP17TIM_HandleTypeDef>:

class LED
{
public:
	LED()=delete;
	LED(TIM_HandleTypeDef* htim) : timer_(htim) {}
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	6039      	str	r1, [r7, #0]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	683a      	ldr	r2, [r7, #0]
 800028e:	601a      	str	r2, [r3, #0]
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	4618      	mov	r0, r3
 8000294:	370c      	adds	r7, #12
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr

0800029e <_ZN3LED8setColorENS_5ColorE>:

	enum class Color{G = 0, Y = 1, R = 2};

	void setColor(Color color)
 800029e:	b580      	push	{r7, lr}
 80002a0:	b082      	sub	sp, #8
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	6078      	str	r0, [r7, #4]
 80002a6:	6039      	str	r1, [r7, #0]
	{
		switch (color) {
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	2b02      	cmp	r3, #2
 80002ac:	d01f      	beq.n	80002ee <_ZN3LED8setColorENS_5ColorE+0x50>
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	2b02      	cmp	r3, #2
 80002b2:	dc27      	bgt.n	8000304 <_ZN3LED8setColorENS_5ColorE+0x66>
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d003      	beq.n	80002c2 <_ZN3LED8setColorENS_5ColorE+0x24>
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	2b01      	cmp	r3, #1
 80002be:	d00b      	beq.n	80002d8 <_ZN3LED8setColorENS_5ColorE+0x3a>
			case Color::R:
				__HAL_TIM_SET_COMPARE(timer_, TIM_CHANNEL_1, R_LED_VAL.first);
				__HAL_TIM_SET_COMPARE(timer_, TIM_CHANNEL_2, R_LED_VAL.second);
				break;
			default:
				break;
 80002c0:	e020      	b.n	8000304 <_ZN3LED8setColorENS_5ColorE+0x66>
				__HAL_TIM_SET_COMPARE(timer_, TIM_CHANNEL_1, G_LED_VAL.first);
 80002c2:	22ff      	movs	r2, #255	; 0xff
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(timer_, TIM_CHANNEL_2, G_LED_VAL.second);
 80002cc:	2200      	movs	r2, #0
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 80002d6:	e016      	b.n	8000306 <_ZN3LED8setColorENS_5ColorE+0x68>
				__HAL_TIM_SET_COMPARE(timer_, TIM_CHANNEL_1, Y_LED_VAL.first);
 80002d8:	22ff      	movs	r2, #255	; 0xff
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(timer_, TIM_CHANNEL_2, Y_LED_VAL.second);
 80002e2:	22ff      	movs	r2, #255	; 0xff
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 80002ec:	e00b      	b.n	8000306 <_ZN3LED8setColorENS_5ColorE+0x68>
				__HAL_TIM_SET_COMPARE(timer_, TIM_CHANNEL_1, R_LED_VAL.first);
 80002ee:	2200      	movs	r2, #0
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(timer_, TIM_CHANNEL_2, R_LED_VAL.second);
 80002f8:	22ff      	movs	r2, #255	; 0xff
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8000302:	e000      	b.n	8000306 <_ZN3LED8setColorENS_5ColorE+0x68>
				break;
 8000304:	bf00      	nop
		}

		HAL_TIM_PWM_Start(timer_, TIM_CHANNEL_1);
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	2100      	movs	r1, #0
 800030c:	4618      	mov	r0, r3
 800030e:	f004 f873 	bl	80043f8 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(timer_, TIM_CHANNEL_2);
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	2104      	movs	r1, #4
 8000318:	4618      	mov	r0, r3
 800031a:	f004 f86d 	bl	80043f8 <HAL_TIM_PWM_Start>
	}
 800031e:	bf00      	nop
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}

08000326 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8000326:	b480      	push	{r7}
 8000328:	b083      	sub	sp, #12
 800032a:	af00      	add	r7, sp, #0
 800032c:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	2200      	movs	r2, #0
 8000332:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8000334:	687a      	ldr	r2, [r7, #4]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2200      	movs	r2, #0
 8000344:	611a      	str	r2, [r3, #16]
    }
 8000346:	bf00      	nop
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr

08000352 <_ZNSt8functionIFvvEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8000352:	b580      	push	{r7, lr}
 8000354:	b082      	sub	sp, #8
 8000356:	af00      	add	r7, sp, #0
 8000358:	6078      	str	r0, [r7, #4]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4618      	mov	r0, r3
 800035e:	f7ff ff6b 	bl	8000238 <_ZNSt14_Function_baseD1Ev>
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4618      	mov	r0, r3
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <_ZNSt4pairIP17InterruptAccessorSt8functionIFvvEEED1Ev>:
   *  @tparam _T2  Type of second object.
   *
   *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
   */
  template<typename _T1, typename _T2>
    struct pair
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	3304      	adds	r3, #4
 8000378:	4618      	mov	r0, r3
 800037a:	f7ff ffea 	bl	8000352 <_ZNSt8functionIFvvEED1Ev>
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4618      	mov	r0, r3
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <_ZN17InterruptAccessorC1ERSt3mapIKPS_KSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEERS6_>:

class InterruptAccessor
{
public:
	using Map = std::map<InterruptAccessor* const,const std::function<void(void)>>;
	InterruptAccessor(Map& it_func_map, const std::function<void(void)>& func) :
 8000388:	b590      	push	{r4, r7, lr}
 800038a:	b08d      	sub	sp, #52	; 0x34
 800038c:	af00      	add	r7, sp, #0
 800038e:	60f8      	str	r0, [r7, #12]
 8000390:	60b9      	str	r1, [r7, #8]
 8000392:	607a      	str	r2, [r7, #4]
		it_func_map_(it_func_map) { it_func_map_.insert(std::make_pair(this, func)); }
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <_ZN17InterruptAccessorC1ERSt3mapIKPS_KSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEERS6_+0x54>)
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	68ba      	ldr	r2, [r7, #8]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	685c      	ldr	r4, [r3, #4]
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80003a8:	f107 0318 	add.w	r3, r7, #24
 80003ac:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80003b0:	687a      	ldr	r2, [r7, #4]
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 fadb 	bl	800096e <_ZSt9make_pairIP17InterruptAccessorRKSt8functionIFvvEEESt4pairINSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS8_INS9_IT0_E4typeEE6__typeEEOSA_OSF_>
 80003b8:	f107 0310 	add.w	r3, r7, #16
 80003bc:	f107 0218 	add.w	r2, r7, #24
 80003c0:	4621      	mov	r1, r4
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 faea 	bl	800099c <_ZNSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEE6insertIS9_IS1_S5_EEENSt9enable_ifIXsrSt16is_constructibleISA_JT_EE5valueES9_ISt17_Rb_tree_iteratorISA_EbEE4typeEOSH_>
 80003c8:	f107 0318 	add.w	r3, r7, #24
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff ffcd 	bl	800036c <_ZNSt4pairIP17InterruptAccessorSt8functionIFvvEEED1Ev>
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	4618      	mov	r0, r3
 80003d6:	3734      	adds	r7, #52	; 0x34
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd90      	pop	{r4, r7, pc}
 80003dc:	08006780 	.word	0x08006780

080003e0 <_ZN17InterruptAccessorD1Ev>:
	virtual ~InterruptAccessor(){ it_func_map_.erase(this); }
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b084      	sub	sp, #16
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	4a08      	ldr	r2, [pc, #32]	; (800040c <_ZN17InterruptAccessorD1Ev+0x2c>)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	685a      	ldr	r2, [r3, #4]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	60fb      	str	r3, [r7, #12]
 80003f6:	f107 030c 	add.w	r3, r7, #12
 80003fa:	4619      	mov	r1, r3
 80003fc:	4610      	mov	r0, r2
 80003fe:	f000 fae2 	bl	80009c6 <_ZNSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEE5eraseERS2_>
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4618      	mov	r0, r3
 8000406:	3710      	adds	r7, #16
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	08006780 	.word	0x08006780

08000410 <_ZN17InterruptAccessorD0Ev>:
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	6878      	ldr	r0, [r7, #4]
 800041a:	f7ff ffe1 	bl	80003e0 <_ZN17InterruptAccessorD1Ev>
 800041e:	2108      	movs	r1, #8
 8000420:	6878      	ldr	r0, [r7, #4]
 8000422:	f005 fe57 	bl	80060d4 <_ZdlPvj>
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4618      	mov	r0, r3
 800042a:	3708      	adds	r7, #8
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}

08000430 <_ZZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS5_ESaISt4pairIS5_S9_EEEENKUlvE_clEv>:
class Switch
{
public:
	Switch() = delete;
	Switch(GPIO_TypeDef* gpio_port, uint16_t gpio_pin, InterruptAccessor::Map& exti_it_map) :
		gpio_port_(gpio_port), gpio_pin_(gpio_pin), exti_it_(exti_it_map, [&](){ is_read_ = true; }){}
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	2201      	movs	r2, #1
 800043e:	741a      	strb	r2, [r3, #16]
 8000440:	bf00      	nop
 8000442:	370c      	adds	r7, #12
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr

0800044c <_ZN6SwitchC1EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS5_ESaISt4pairIS5_S9_EEE>:
	Switch(GPIO_TypeDef* gpio_port, uint16_t gpio_pin, InterruptAccessor::Map& exti_it_map) :
 800044c:	b590      	push	{r4, r7, lr}
 800044e:	b089      	sub	sp, #36	; 0x24
 8000450:	af00      	add	r7, sp, #0
 8000452:	60f8      	str	r0, [r7, #12]
 8000454:	60b9      	str	r1, [r7, #8]
 8000456:	603b      	str	r3, [r7, #0]
 8000458:	4613      	mov	r3, r2
 800045a:	80fb      	strh	r3, [r7, #6]
		gpio_port_(gpio_port), gpio_pin_(gpio_pin), exti_it_(exti_it_map, [&](){ is_read_ = true; }){}
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	68ba      	ldr	r2, [r7, #8]
 8000460:	601a      	str	r2, [r3, #0]
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	88fa      	ldrh	r2, [r7, #6]
 8000466:	809a      	strh	r2, [r3, #4]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	f103 0408 	add.w	r4, r3, #8
 800046e:	68fa      	ldr	r2, [r7, #12]
 8000470:	f107 0310 	add.w	r3, r7, #16
 8000474:	4611      	mov	r1, r2
 8000476:	4618      	mov	r0, r3
 8000478:	f000 fab4 	bl	80009e4 <_ZNSt8functionIFvvEEC1IZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKS1_St4lessIS9_ESaISt4pairIS9_SA_EEEEUlvE_vvEET_>
 800047c:	f107 0310 	add.w	r3, r7, #16
 8000480:	461a      	mov	r2, r3
 8000482:	6839      	ldr	r1, [r7, #0]
 8000484:	4620      	mov	r0, r4
 8000486:	f7ff ff7f 	bl	8000388 <_ZN17InterruptAccessorC1ERSt3mapIKPS_KSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEERS6_>
 800048a:	f107 0310 	add.w	r3, r7, #16
 800048e:	4618      	mov	r0, r3
 8000490:	f7ff ff5f 	bl	8000352 <_ZNSt8functionIFvvEED1Ev>
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	2200      	movs	r2, #0
 8000498:	741a      	strb	r2, [r3, #16]
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	4618      	mov	r0, r3
 800049e:	3724      	adds	r7, #36	; 0x24
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd90      	pop	{r4, r7, pc}

080004a4 <_ZN6Switch6isReadEv>:

	inline bool isRead()
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
	{
		bool current_val = is_read_;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	7c1b      	ldrb	r3, [r3, #16]
 80004b0:	73fb      	strb	r3, [r7, #15]
		is_read_ = false;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	2200      	movs	r2, #0
 80004b6:	741a      	strb	r2, [r3, #16]
		return current_val;
 80004b8:	7bfb      	ldrb	r3, [r7, #15]
	}
 80004ba:	4618      	mov	r0, r3
 80004bc:	3714      	adds	r7, #20
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
	...

080004c8 <_ZZ4mainENKUlvE_clEv>:
  LED led(&htim1);
  Switch sw(SW_IN_GPIO_Port, SW_IN_Pin, EXTI_IRQ_Accessor);
  //UART uart(&huart1, UART_IRQ_Accessor);
  //RPLIDER lider(uart, SysTick_Accessor);

  std::function<void(void)> systick_func = [&](){
 80004c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80004cc:	b082      	sub	sp, #8
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	6078      	str	r0, [r7, #4]
	  static uint64_t count = 0;
	  if(sw.isRead())
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff ffe4 	bl	80004a4 <_ZN6Switch6isReadEv>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d006      	beq.n	80004f0 <_ZZ4mainENKUlvE_clEv+0x28>
	  {
		  count = 0;
 80004e2:	4925      	ldr	r1, [pc, #148]	; (8000578 <_ZZ4mainENKUlvE_clEv+0xb0>)
 80004e4:	f04f 0200 	mov.w	r2, #0
 80004e8:	f04f 0300 	mov.w	r3, #0
 80004ec:	e9c1 2300 	strd	r2, r3, [r1]
	  }
	  if(count < COUNT_G_TO_Y)
 80004f0:	4b21      	ldr	r3, [pc, #132]	; (8000578 <_ZZ4mainENKUlvE_clEv+0xb0>)
 80004f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004f6:	f241 3188 	movw	r1, #5000	; 0x1388
 80004fa:	428a      	cmp	r2, r1
 80004fc:	f173 0300 	sbcs.w	r3, r3, #0
 8000500:	d210      	bcs.n	8000524 <_ZZ4mainENKUlvE_clEv+0x5c>
	  {
		  led.setColor(LED::Color::G);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	2100      	movs	r1, #0
 8000508:	4618      	mov	r0, r3
 800050a:	f7ff fec8 	bl	800029e <_ZN3LED8setColorENS_5ColorE>
		  ++count;
 800050e:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <_ZZ4mainENKUlvE_clEv+0xb0>)
 8000510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000514:	f112 0a01 	adds.w	sl, r2, #1
 8000518:	f143 0b00 	adc.w	fp, r3, #0
 800051c:	4b16      	ldr	r3, [pc, #88]	; (8000578 <_ZZ4mainENKUlvE_clEv+0xb0>)
 800051e:	e9c3 ab00 	strd	sl, fp, [r3]
	  }
	  else
	  {
		  led.setColor(LED::Color::R);
	  }
  };
 8000522:	e023      	b.n	800056c <_ZZ4mainENKUlvE_clEv+0xa4>
	  else if(count - COUNT_G_TO_Y  < COUNT_Y_TO_R)
 8000524:	4b14      	ldr	r3, [pc, #80]	; (8000578 <_ZZ4mainENKUlvE_clEv+0xb0>)
 8000526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800052a:	4914      	ldr	r1, [pc, #80]	; (800057c <_ZZ4mainENKUlvE_clEv+0xb4>)
 800052c:	1854      	adds	r4, r2, r1
 800052e:	f143 35ff 	adc.w	r5, r3, #4294967295
 8000532:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000536:	429c      	cmp	r4, r3
 8000538:	f175 0300 	sbcs.w	r3, r5, #0
 800053c:	d210      	bcs.n	8000560 <_ZZ4mainENKUlvE_clEv+0x98>
		  led.setColor(LED::Color::G);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	685b      	ldr	r3, [r3, #4]
		  led.setColor(LED::Color::Y);
 8000542:	2101      	movs	r1, #1
 8000544:	4618      	mov	r0, r3
 8000546:	f7ff feaa 	bl	800029e <_ZN3LED8setColorENS_5ColorE>
		  ++count;
 800054a:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <_ZZ4mainENKUlvE_clEv+0xb0>)
 800054c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000550:	f112 0801 	adds.w	r8, r2, #1
 8000554:	f143 0900 	adc.w	r9, r3, #0
 8000558:	4b07      	ldr	r3, [pc, #28]	; (8000578 <_ZZ4mainENKUlvE_clEv+0xb0>)
 800055a:	e9c3 8900 	strd	r8, r9, [r3]
  };
 800055e:	e005      	b.n	800056c <_ZZ4mainENKUlvE_clEv+0xa4>
		  led.setColor(LED::Color::G);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	685b      	ldr	r3, [r3, #4]
		  led.setColor(LED::Color::R);
 8000564:	2102      	movs	r1, #2
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff fe99 	bl	800029e <_ZN3LED8setColorENS_5ColorE>
  };
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000576:	bf00      	nop
 8000578:	20000160 	.word	0x20000160
 800057c:	ffffec78 	.word	0xffffec78

08000580 <main>:
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08e      	sub	sp, #56	; 0x38
 8000584:	af00      	add	r7, sp, #0
  HAL_Init();
 8000586:	f001 ff61 	bl	800244c <HAL_Init>
  SystemClock_Config();
 800058a:	f000 f831 	bl	80005f0 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 800058e:	f000 f9a7 	bl	80008e0 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8000592:	f000 f971 	bl	8000878 <_ZL19MX_USART1_UART_Initv>
  MX_TIM1_Init();
 8000596:	f000 f895 	bl	80006c4 <_ZL12MX_TIM1_Initv>
  LED led(&htim1);
 800059a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800059e:	4910      	ldr	r1, [pc, #64]	; (80005e0 <main+0x60>)
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff fe6d 	bl	8000280 <_ZN3LEDC1EP17TIM_HandleTypeDef>
  Switch sw(SW_IN_GPIO_Port, SW_IN_Pin, EXTI_IRQ_Accessor);
 80005a6:	f107 0018 	add.w	r0, r7, #24
 80005aa:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <main+0x64>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	490e      	ldr	r1, [pc, #56]	; (80005e8 <main+0x68>)
 80005b0:	f7ff ff4c 	bl	800044c <_ZN6SwitchC1EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS5_ESaISt4pairIS5_S9_EEE>
  };
 80005b4:	f107 0318 	add.w	r3, r7, #24
 80005b8:	633b      	str	r3, [r7, #48]	; 0x30
 80005ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005be:	637b      	str	r3, [r7, #52]	; 0x34
 80005c0:	f107 0008 	add.w	r0, r7, #8
 80005c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005c8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80005cc:	f000 fa34 	bl	8000a38 <_ZNSt8functionIFvvEEC1IZ4mainEUlvE_vvEET_>

  //led.setColor(LED::Color::G);
  InterruptAccessor systick_it(SysTick_Accessor, systick_func);
 80005d0:	f107 0208 	add.w	r2, r7, #8
 80005d4:	463b      	mov	r3, r7
 80005d6:	4905      	ldr	r1, [pc, #20]	; (80005ec <main+0x6c>)
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff fed5 	bl	8000388 <_ZN17InterruptAccessorC1ERSt3mapIKPS_KSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEERS6_>
  //lider.transmitCmd(RPLIDER::command::SCAN);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005de:	e7fe      	b.n	80005de <main+0x5e>
 80005e0:	2000008c 	.word	0x2000008c
 80005e4:	20000198 	.word	0x20000198
 80005e8:	48000400 	.word	0x48000400
 80005ec:	20000168 	.word	0x20000168

080005f0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b096      	sub	sp, #88	; 0x58
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005fa:	2228      	movs	r2, #40	; 0x28
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f005 ff64 	bl	80064cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 031c 	add.w	r3, r7, #28
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]
 8000622:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062c:	2310      	movs	r3, #16
 800062e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000630:	2302      	movs	r3, #2
 8000632:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000634:	2300      	movs	r3, #0
 8000636:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000638:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800063c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000642:	4618      	mov	r0, r3
 8000644:	f002 fa86 	bl	8002b54 <HAL_RCC_OscConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	bf14      	ite	ne
 800064e:	2301      	movne	r3, #1
 8000650:	2300      	moveq	r3, #0
 8000652:	b2db      	uxtb	r3, r3
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <_Z18SystemClock_Configv+0x6c>
  {
    Error_Handler();
 8000658:	f000 f982 	bl	8000960 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000660:	2302      	movs	r3, #2
 8000662:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800066c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	2102      	movs	r1, #2
 8000678:	4618      	mov	r0, r3
 800067a:	f003 faa9 	bl	8003bd0 <HAL_RCC_ClockConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	bf14      	ite	ne
 8000684:	2301      	movne	r3, #1
 8000686:	2300      	moveq	r3, #0
 8000688:	b2db      	uxtb	r3, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800068e:	f000 f967 	bl	8000960 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 8000692:	f241 0301 	movw	r3, #4097	; 0x1001
 8000696:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 fcca 	bl	800403c <HAL_RCCEx_PeriphCLKConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	bf14      	ite	ne
 80006ae:	2301      	movne	r3, #1
 80006b0:	2300      	moveq	r3, #0
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 80006b8:	f000 f952 	bl	8000960 <Error_Handler>
  }
}
 80006bc:	bf00      	nop
 80006be:	3758      	adds	r7, #88	; 0x58
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b09a      	sub	sp, #104	; 0x68
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
 80006f4:	615a      	str	r2, [r3, #20]
 80006f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	222c      	movs	r2, #44	; 0x2c
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f005 fee4 	bl	80064cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000704:	4b5a      	ldr	r3, [pc, #360]	; (8000870 <_ZL12MX_TIM1_Initv+0x1ac>)
 8000706:	4a5b      	ldr	r2, [pc, #364]	; (8000874 <_ZL12MX_TIM1_Initv+0x1b0>)
 8000708:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 250;
 800070a:	4b59      	ldr	r3, [pc, #356]	; (8000870 <_ZL12MX_TIM1_Initv+0x1ac>)
 800070c:	22fa      	movs	r2, #250	; 0xfa
 800070e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000710:	4b57      	ldr	r3, [pc, #348]	; (8000870 <_ZL12MX_TIM1_Initv+0x1ac>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8000716:	4b56      	ldr	r3, [pc, #344]	; (8000870 <_ZL12MX_TIM1_Initv+0x1ac>)
 8000718:	22ff      	movs	r2, #255	; 0xff
 800071a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071c:	4b54      	ldr	r3, [pc, #336]	; (8000870 <_ZL12MX_TIM1_Initv+0x1ac>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000722:	4b53      	ldr	r3, [pc, #332]	; (8000870 <_ZL12MX_TIM1_Initv+0x1ac>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000728:	4b51      	ldr	r3, [pc, #324]	; (8000870 <_ZL12MX_TIM1_Initv+0x1ac>)
 800072a:	2280      	movs	r2, #128	; 0x80
 800072c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800072e:	4850      	ldr	r0, [pc, #320]	; (8000870 <_ZL12MX_TIM1_Initv+0x1ac>)
 8000730:	f003 fdaa 	bl	8004288 <HAL_TIM_Base_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	bf14      	ite	ne
 800073a:	2301      	movne	r3, #1
 800073c:	2300      	moveq	r3, #0
 800073e:	b2db      	uxtb	r3, r3
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 8000744:	f000 f90c 	bl	8000960 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800074e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000752:	4619      	mov	r1, r3
 8000754:	4846      	ldr	r0, [pc, #280]	; (8000870 <_ZL12MX_TIM1_Initv+0x1ac>)
 8000756:	f004 f84f 	bl	80047f8 <HAL_TIM_ConfigClockSource>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	bf14      	ite	ne
 8000760:	2301      	movne	r3, #1
 8000762:	2300      	moveq	r3, #0
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 800076a:	f000 f8f9 	bl	8000960 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800076e:	4840      	ldr	r0, [pc, #256]	; (8000870 <_ZL12MX_TIM1_Initv+0x1ac>)
 8000770:	f003 fde1 	bl	8004336 <HAL_TIM_PWM_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	bf14      	ite	ne
 800077a:	2301      	movne	r3, #1
 800077c:	2300      	moveq	r3, #0
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 8000784:	f000 f8ec 	bl	8000960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000788:	2300      	movs	r3, #0
 800078a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800078c:	2300      	movs	r3, #0
 800078e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000794:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000798:	4619      	mov	r1, r3
 800079a:	4835      	ldr	r0, [pc, #212]	; (8000870 <_ZL12MX_TIM1_Initv+0x1ac>)
 800079c:	f004 fcd4 	bl	8005148 <HAL_TIMEx_MasterConfigSynchronization>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	bf14      	ite	ne
 80007a6:	2301      	movne	r3, #1
 80007a8:	2300      	moveq	r3, #0
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <_ZL12MX_TIM1_Initv+0xf0>
  {
    Error_Handler();
 80007b0:	f000 f8d6 	bl	8000960 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b4:	2360      	movs	r3, #96	; 0x60
 80007b6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007bc:	2300      	movs	r3, #0
 80007be:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007c0:	2300      	movs	r3, #0
 80007c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007c8:	2300      	movs	r3, #0
 80007ca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007cc:	2300      	movs	r3, #0
 80007ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007d4:	2200      	movs	r2, #0
 80007d6:	4619      	mov	r1, r3
 80007d8:	4825      	ldr	r0, [pc, #148]	; (8000870 <_ZL12MX_TIM1_Initv+0x1ac>)
 80007da:	f003 fef9 	bl	80045d0 <HAL_TIM_PWM_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	bf14      	ite	ne
 80007e4:	2301      	movne	r3, #1
 80007e6:	2300      	moveq	r3, #0
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <_ZL12MX_TIM1_Initv+0x12e>
  {
    Error_Handler();
 80007ee:	f000 f8b7 	bl	8000960 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007f6:	2204      	movs	r2, #4
 80007f8:	4619      	mov	r1, r3
 80007fa:	481d      	ldr	r0, [pc, #116]	; (8000870 <_ZL12MX_TIM1_Initv+0x1ac>)
 80007fc:	f003 fee8 	bl	80045d0 <HAL_TIM_PWM_ConfigChannel>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	bf14      	ite	ne
 8000806:	2301      	movne	r3, #1
 8000808:	2300      	moveq	r3, #0
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <_ZL12MX_TIM1_Initv+0x150>
  {
    Error_Handler();
 8000810:	f000 f8a6 	bl	8000960 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800082c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000836:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	4619      	mov	r1, r3
 8000848:	4809      	ldr	r0, [pc, #36]	; (8000870 <_ZL12MX_TIM1_Initv+0x1ac>)
 800084a:	f004 fceb 	bl	8005224 <HAL_TIMEx_ConfigBreakDeadTime>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	bf14      	ite	ne
 8000854:	2301      	movne	r3, #1
 8000856:	2300      	moveq	r3, #0
 8000858:	b2db      	uxtb	r3, r3
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <_ZL12MX_TIM1_Initv+0x19e>
  {
    Error_Handler();
 800085e:	f000 f87f 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000862:	4803      	ldr	r0, [pc, #12]	; (8000870 <_ZL12MX_TIM1_Initv+0x1ac>)
 8000864:	f001 faf8 	bl	8001e58 <HAL_TIM_MspPostInit>

}
 8000868:	bf00      	nop
 800086a:	3768      	adds	r7, #104	; 0x68
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	2000008c 	.word	0x2000008c
 8000874:	40012c00 	.word	0x40012c00

08000878 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800087c:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <_ZL19MX_USART1_UART_Initv+0x60>)
 800087e:	4a17      	ldr	r2, [pc, #92]	; (80008dc <_ZL19MX_USART1_UART_Initv+0x64>)
 8000880:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000884:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000888:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <_ZL19MX_USART1_UART_Initv+0x60>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800089c:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <_ZL19MX_USART1_UART_Initv+0x60>)
 800089e:	220c      	movs	r2, #12
 80008a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <_ZL19MX_USART1_UART_Initv+0x60>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a8:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <_ZL19MX_USART1_UART_Initv+0x60>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ae:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <_ZL19MX_USART1_UART_Initv+0x60>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <_ZL19MX_USART1_UART_Initv+0x60>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ba:	4807      	ldr	r0, [pc, #28]	; (80008d8 <_ZL19MX_USART1_UART_Initv+0x60>)
 80008bc:	f004 fd2a 	bl	8005314 <HAL_UART_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	bf14      	ite	ne
 80008c6:	2301      	movne	r3, #1
 80008c8:	2300      	moveq	r3, #0
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 80008d0:	f000 f846 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200000d8 	.word	0x200000d8
 80008dc:	40013800 	.word	0x40013800

080008e0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <_ZL12MX_GPIO_Initv+0x78>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	4a17      	ldr	r2, [pc, #92]	; (8000958 <_ZL12MX_GPIO_Initv+0x78>)
 80008fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000900:	6153      	str	r3, [r2, #20]
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <_ZL12MX_GPIO_Initv+0x78>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <_ZL12MX_GPIO_Initv+0x78>)
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	4a11      	ldr	r2, [pc, #68]	; (8000958 <_ZL12MX_GPIO_Initv+0x78>)
 8000914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000918:	6153      	str	r3, [r2, #20]
 800091a:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <_ZL12MX_GPIO_Initv+0x78>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : SW_IN_Pin */
  GPIO_InitStruct.Pin = SW_IN_Pin;
 8000926:	2301      	movs	r3, #1
 8000928:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800092a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800092e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000930:	2301      	movs	r3, #1
 8000932:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	4619      	mov	r1, r3
 800093a:	4808      	ldr	r0, [pc, #32]	; (800095c <_ZL12MX_GPIO_Initv+0x7c>)
 800093c:	f001 ff74 	bl	8002828 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	2100      	movs	r1, #0
 8000944:	2006      	movs	r0, #6
 8000946:	f001 fec2 	bl	80026ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800094a:	2006      	movs	r0, #6
 800094c:	f001 fedb 	bl	8002706 <HAL_NVIC_EnableIRQ>

}
 8000950:	bf00      	nop
 8000952:	3720      	adds	r7, #32
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40021000 	.word	0x40021000
 800095c:	48000400 	.word	0x48000400

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <_ZSt9make_pairIP17InterruptAccessorRKSt8functionIFvvEEESt4pairINSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS8_INS9_IT0_E4typeEE6__typeEEOSA_OSF_>:
#if __cplusplus >= 201103L
  // NB: DR 706.
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
 800096e:	b590      	push	{r4, r7, lr}
 8000970:	b085      	sub	sp, #20
 8000972:	af00      	add	r7, sp, #0
 8000974:	60f8      	str	r0, [r7, #12]
 8000976:	60b9      	str	r1, [r7, #8]
 8000978:	607a      	str	r2, [r7, #4]
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> 	      __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 800097a:	68b8      	ldr	r0, [r7, #8]
 800097c:	f000 f893 	bl	8000aa6 <_ZSt7forwardIP17InterruptAccessorEOT_RNSt16remove_referenceIS2_E4typeE>
 8000980:	4604      	mov	r4, r0
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f000 f89a 	bl	8000abc <_ZSt7forwardIRKSt8functionIFvvEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8000988:	4603      	mov	r3, r0
 800098a:	461a      	mov	r2, r3
 800098c:	4621      	mov	r1, r4
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f000 f89f 	bl	8000ad2 <_ZNSt4pairIP17InterruptAccessorSt8functionIFvvEEEC1IS1_Lb1EEEOT_RKS4_>
    }
 8000994:	68f8      	ldr	r0, [r7, #12]
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	bd90      	pop	{r4, r7, pc}

0800099c <_ZNSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEE6insertIS9_IS1_S5_EEENSt9enable_ifIXsrSt16is_constructibleISA_JT_EE5valueES9_ISt17_Rb_tree_iteratorISA_EbEE4typeEOSH_>:
      { return _M_t._M_insert_unique(std::move(__x)); }

      template<typename _Pair>
	__enable_if_t<is_constructible<value_type, _Pair>::value,
		      pair<iterator, bool>>
	insert(_Pair&& __x)
 800099c:	b590      	push	{r4, r7, lr}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
	{ return _M_t._M_emplace_unique(std::forward<_Pair>(__x)); }
 80009a8:	68bc      	ldr	r4, [r7, #8]
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f000 f8a9 	bl	8000b02 <_ZSt7forwardISt4pairIP17InterruptAccessorSt8functionIFvvEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80009b0:	4602      	mov	r2, r0
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	4621      	mov	r1, r4
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 f8ae 	bl	8000b18 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE17_M_emplace_uniqueIJS3_IS1_S6_EEEES3_ISt17_Rb_tree_iteratorIS8_EbEDpOT_>
 80009bc:	bf00      	nop
 80009be:	68f8      	ldr	r0, [r7, #12]
 80009c0:	3714      	adds	r7, #20
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd90      	pop	{r4, r7, pc}

080009c6 <_ZNSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEE5eraseERS2_>:
       *  Note that this function only erases the element, and that if
       *  the element is itself a pointer, the pointed-to memory is not touched
       *  in any way.  Managing the pointer is the user's responsibility.
       */
      size_type
      erase(const key_type& __x)
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b082      	sub	sp, #8
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
 80009ce:	6039      	str	r1, [r7, #0]
      { return _M_t.erase(__x); }
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6839      	ldr	r1, [r7, #0]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 f8e9 	bl	8000bac <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE5eraseERS2_>
 80009da:	4603      	mov	r3, r0
 80009dc:	4618      	mov	r0, r3
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <_ZNSt8functionIFvvEEC1IZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKS1_St4lessIS9_ESaISt4pairIS9_SA_EEEEUlvE_vvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fc13 	bl	800021c <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 80009f6:	463b      	mov	r3, r7
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 f907 	bl	8000c0c <_ZNSt14_Function_base13_Base_managerIZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_E21_M_not_empty_functionISJ_EEbRKT_>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d00f      	beq.n	8000a24 <_ZNSt8functionIFvvEEC1IZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKS1_St4lessIS9_ESaISt4pairIS9_SA_EEEEUlvE_vvEET_+0x40>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8000a04:	687c      	ldr	r4, [r7, #4]
 8000a06:	463b      	mov	r3, r7
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f000 f90a 	bl	8000c22 <_ZSt4moveIRZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS6_ESaISt4pairIS6_SA_EEEEUlvE_EONSt16remove_referenceIT_E4typeEOSL_>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	4619      	mov	r1, r3
 8000a12:	4620      	mov	r0, r4
 8000a14:	f000 f910 	bl	8000c38 <_ZNSt14_Function_base13_Base_managerIZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_E15_M_init_functorERSt9_Any_dataOSJ_>
	    _M_invoker = &_My_handler::_M_invoke;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a05      	ldr	r2, [pc, #20]	; (8000a30 <_ZNSt8functionIFvvEEC1IZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKS1_St4lessIS9_ESaISt4pairIS9_SA_EEEEUlvE_vvEET_+0x4c>)
 8000a1c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <_ZNSt8functionIFvvEEC1IZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKS1_St4lessIS9_ESaISt4pairIS9_SA_EEEEUlvE_vvEET_+0x50>)
 8000a22:	609a      	str	r2, [r3, #8]
	  }
      }
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd90      	pop	{r4, r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	08000c5d 	.word	0x08000c5d
 8000a34:	08000c7b 	.word	0x08000c7b

08000a38 <_ZNSt8functionIFvvEEC1IZ4mainEUlvE_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	e883 0006 	stmia.w	r3, {r1, r2}
      : _Function_base()
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fbe7 	bl	800021c <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	4618      	mov	r0, r3
 8000a52:	f000 f931 	bl	8000cb8 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E21_M_not_empty_functionIS1_EEbRKT_>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d00f      	beq.n	8000a7c <_ZNSt8functionIFvvEEC1IZ4mainEUlvE_vvEET_+0x44>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8000a5c:	68fc      	ldr	r4, [r7, #12]
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 f934 	bl	8000cce <_ZSt4moveIRZ4mainEUlvE_EONSt16remove_referenceIT_E4typeEOS3_>
 8000a66:	4603      	mov	r3, r0
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4620      	mov	r0, r4
 8000a6c:	f000 f93a 	bl	8000ce4 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E15_M_init_functorERSt9_Any_dataOS1_>
	    _M_invoker = &_My_handler::_M_invoke;
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4a05      	ldr	r2, [pc, #20]	; (8000a88 <_ZNSt8functionIFvvEEC1IZ4mainEUlvE_vvEET_+0x50>)
 8000a74:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <_ZNSt8functionIFvvEEC1IZ4mainEUlvE_vvEET_+0x54>)
 8000a7a:	609a      	str	r2, [r3, #8]
      }
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd90      	pop	{r4, r7, pc}
 8000a86:	bf00      	nop
 8000a88:	08000d09 	.word	0x08000d09
 8000a8c:	08000d27 	.word	0x08000d27

08000a90 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <_ZSt7forwardIP17InterruptAccessorEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <_ZSt7forwardIRKSt8functionIFvvEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <_ZNSt4pairIP17InterruptAccessorSt8functionIFvvEEEC1IS1_Lb1EEEOT_RKS4_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b084      	sub	sp, #16
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	60f8      	str	r0, [r7, #12]
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8000ade:	68b8      	ldr	r0, [r7, #8]
 8000ae0:	f7ff ffe1 	bl	8000aa6 <_ZSt7forwardIP17InterruptAccessorEOT_RNSt16remove_referenceIS2_E4typeE>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	3304      	adds	r3, #4
 8000af0:	6879      	ldr	r1, [r7, #4]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 f936 	bl	8000d64 <_ZNSt8functionIFvvEEC1ERKS1_>
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4618      	mov	r0, r3
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <_ZSt7forwardISt4pairIP17InterruptAccessorSt8functionIFvvEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000b02:	b480      	push	{r7}
 8000b04:	b083      	sub	sp, #12
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE17_M_emplace_uniqueIJS3_IS1_S6_EEEES3_ISt17_Rb_tree_iteratorIS8_EbEDpOT_>:
  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			     _Compare, _Alloc>::iterator, bool>
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08c      	sub	sp, #48	; 0x30
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
      _M_emplace_unique(_Args&&... __args)
      {
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff ffec 	bl	8000b02 <_ZSt7forwardISt4pairIP17InterruptAccessorSt8functionIFvvEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	68b8      	ldr	r0, [r7, #8]
 8000b30:	f000 f93a 	bl	8000da8 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_create_nodeIJS3_IS1_S6_EEEEPSt13_Rb_tree_nodeIS8_EDpOT_>
 8000b34:	62f8      	str	r0, [r7, #44]	; 0x2c

	__try
	  {
	    typedef pair<iterator, bool> _Res;
	    auto __res = _M_get_insert_unique_pos(_S_key(__z));
 8000b36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000b38:	f000 f9d2 	bl	8000ee0 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	68b9      	ldr	r1, [r7, #8]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 f946 	bl	8000dd6 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS2_>
	    if (__res.second)
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d013      	beq.n	8000b78 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE17_M_emplace_uniqueIJS3_IS1_S6_EEEES3_ISt17_Rb_tree_iteratorIS8_EbEDpOT_+0x60>
	      return _Res(_M_insert_node(__res.first, __res.second, __z), true);
 8000b50:	6979      	ldr	r1, [r7, #20]
 8000b52:	69ba      	ldr	r2, [r7, #24]
 8000b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b56:	68b8      	ldr	r0, [r7, #8]
 8000b58:	f000 f9d5 	bl	8000f06 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	61fb      	str	r3, [r7, #28]
 8000b60:	2301      	movs	r3, #1
 8000b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000b66:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	68f8      	ldr	r0, [r7, #12]
 8000b72:	f000 fa05 	bl	8000f80 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKP17InterruptAccessorKSt8functionIFvvEEEEbEC1IS9_bLb1EEEOT_OT0_>
	__catch(...)
	  {
	    _M_drop_node(__z);
	    __throw_exception_again;
	  }
      }
 8000b76:	e015      	b.n	8000ba4 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE17_M_emplace_uniqueIJS3_IS1_S6_EEEES3_ISt17_Rb_tree_iteratorIS8_EbEDpOT_+0x8c>
	    _M_drop_node(__z);
 8000b78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000b7a:	68b8      	ldr	r0, [r7, #8]
 8000b7c:	f000 fa19 	bl	8000fb2 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>
	    return _Res(iterator(__res.first), false);
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b86:	4611      	mov	r1, r2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 fa23 	bl	8000fd4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEC1EPSt18_Rb_tree_node_base>
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000b94:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 8000b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f000 f9ee 	bl	8000f80 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKP17InterruptAccessorKSt8functionIFvvEEEEbEC1IS9_bLb1EEEOT_OT0_>
      }
 8000ba4:	68f8      	ldr	r0, [r7, #12]
 8000ba6:	3730      	adds	r7, #48	; 0x30
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE5eraseERS2_>:
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b088      	sub	sp, #32
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
    erase(const _Key& __x)
    {
      pair<iterator, iterator> __p = equal_range(__x);
 8000bb6:	f107 030c 	add.w	r3, r7, #12
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	6879      	ldr	r1, [r7, #4]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 fa17 	bl	8000ff2 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11equal_rangeERS2_>
      const size_type __old_size = size();
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f000 fa8a 	bl	80010de <_ZNKSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE4sizeEv>
 8000bca:	61f8      	str	r0, [r7, #28]
      _M_erase_aux(__p.first, __p.second);
 8000bcc:	f107 020c 	add.w	r2, r7, #12
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 fa8d 	bl	80010f6 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEC1ERKSt17_Rb_tree_iteratorIS8_E>
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	1d1a      	adds	r2, r3, #4
 8000be2:	f107 0318 	add.w	r3, r7, #24
 8000be6:	4611      	mov	r1, r2
 8000be8:	4618      	mov	r0, r3
 8000bea:	f000 fa84 	bl	80010f6 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEC1ERKSt17_Rb_tree_iteratorIS8_E>
 8000bee:	69ba      	ldr	r2, [r7, #24]
 8000bf0:	6979      	ldr	r1, [r7, #20]
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f000 fa8f 	bl	8001116 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS8_ESG_>
      return __old_size - size();
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f000 fa70 	bl	80010de <_ZNKSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE4sizeEv>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	1a9b      	subs	r3, r3, r2
    }
 8000c04:	4618      	mov	r0, r3
 8000c06:	3720      	adds	r7, #32
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <_ZNSt14_Function_base13_Base_managerIZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_E21_M_not_empty_functionISJ_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	  { return true; }
 8000c14:	2301      	movs	r3, #1
 8000c16:	4618      	mov	r0, r3
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <_ZSt4moveIRZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS6_ESaISt4pairIS6_SA_EEEEUlvE_EONSt16remove_referenceIT_E4typeEOSL_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <_ZNSt14_Function_base13_Base_managerIZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_E15_M_init_functorERSt9_Any_dataOSJ_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8000c42:	6838      	ldr	r0, [r7, #0]
 8000c44:	f7ff ffed 	bl	8000c22 <_ZSt4moveIRZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS6_ESaISt4pairIS6_SA_EEEEUlvE_EONSt16remove_referenceIT_E4typeEOSL_>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	4622      	mov	r2, r4
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f000 fabc 	bl	80011cc <_ZNSt14_Function_base13_Base_managerIZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_E15_M_init_functorERSt9_Any_dataOSJ_St17integral_constantIbLb1EE>
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd90      	pop	{r4, r7, pc}

08000c5c <_ZNSt17_Function_handlerIFvvEZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIS0_ESt4lessIS7_ESaISt4pairIS7_SA_EEEEUlvE_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f000 faca 	bl	80011fe <_ZNSt14_Function_base13_Base_managerIZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 fad6 	bl	800121e <_ZSt10__invoke_rIvRZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS6_ESaISt4pairIS6_SA_EEEEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EESL_E4typeEOSM_DpOSN_>
				     std::forward<_ArgTypes>(__args)...);
 8000c72:	bf00      	nop
      }
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <_ZNSt17_Function_handlerIFvvEZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIS0_ESt4lessIS7_ESaISt4pairIS7_SA_EEEEUlvE_E10_M_managerERSt9_Any_dataRKSK_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8000c7a:	b590      	push	{r4, r7, lr}
 8000c7c:	b085      	sub	sp, #20
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	60f8      	str	r0, [r7, #12]
 8000c82:	60b9      	str	r1, [r7, #8]
 8000c84:	4613      	mov	r3, r2
 8000c86:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d109      	bne.n	8000ca2 <_ZNSt17_Function_handlerIFvvEZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIS0_ESt4lessIS7_ESaISt4pairIS7_SA_EEEEUlvE_E10_M_managerERSt9_Any_dataRKSK_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8000c8e:	68b8      	ldr	r0, [r7, #8]
 8000c90:	f000 fab5 	bl	80011fe <_ZNSt14_Function_base13_Base_managerIZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8000c94:	4604      	mov	r4, r0
 8000c96:	68f8      	ldr	r0, [r7, #12]
 8000c98:	f000 fad1 	bl	800123e <_ZNSt9_Any_data9_M_accessIPZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_EERT_v>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	601c      	str	r4, [r3, #0]
	    break;
 8000ca0:	e005      	b.n	8000cae <_ZNSt17_Function_handlerIFvvEZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIS0_ESt4lessIS7_ESaISt4pairIS7_SA_EEEEUlvE_E10_M_managerERSt9_Any_dataRKSK_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	68b9      	ldr	r1, [r7, #8]
 8000ca8:	68f8      	ldr	r0, [r7, #12]
 8000caa:	f000 fad4 	bl	8001256 <_ZNSt14_Function_base13_Base_managerIZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_E10_M_managerERSt9_Any_dataRKSL_St18_Manager_operation>
	return false;
 8000cae:	2300      	movs	r3, #0
      }
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd90      	pop	{r4, r7, pc}

08000cb8 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E21_M_not_empty_functionIS1_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	  { return true; }
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <_ZSt4moveIRZ4mainEUlvE_EONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E15_M_init_functorERSt9_Any_dataOS1_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8000ce4:	b590      	push	{r4, r7, lr}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8000cee:	6838      	ldr	r0, [r7, #0]
 8000cf0:	f7ff ffed 	bl	8000cce <_ZSt4moveIRZ4mainEUlvE_EONSt16remove_referenceIT_E4typeEOS3_>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	4622      	mov	r2, r4
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f000 fad6 	bl	80012ac <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E15_M_init_functorERSt9_Any_dataOS1_St17integral_constantIbLb1EE>
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd90      	pop	{r4, r7, pc}

08000d08 <_ZNSt17_Function_handlerIFvvEZ4mainEUlvE_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f000 fae7 	bl	80012e4 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8000d16:	4603      	mov	r3, r0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 faf3 	bl	8001304 <_ZSt10__invoke_rIvRZ4mainEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES3_E4typeEOS4_DpOS5_>
				     std::forward<_ArgTypes>(__args)...);
 8000d1e:	bf00      	nop
      }
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <_ZNSt17_Function_handlerIFvvEZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8000d26:	b590      	push	{r4, r7, lr}
 8000d28:	b085      	sub	sp, #20
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	60f8      	str	r0, [r7, #12]
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	4613      	mov	r3, r2
 8000d32:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d109      	bne.n	8000d4e <_ZNSt17_Function_handlerIFvvEZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8000d3a:	68b8      	ldr	r0, [r7, #8]
 8000d3c:	f000 fad2 	bl	80012e4 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8000d40:	4604      	mov	r4, r0
 8000d42:	68f8      	ldr	r0, [r7, #12]
 8000d44:	f000 faee 	bl	8001324 <_ZNSt9_Any_data9_M_accessIPZ4mainEUlvE_EERT_v>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	601c      	str	r4, [r3, #0]
	    break;
 8000d4c:	e005      	b.n	8000d5a <_ZNSt17_Function_handlerIFvvEZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	461a      	mov	r2, r3
 8000d52:	68b9      	ldr	r1, [r7, #8]
 8000d54:	68f8      	ldr	r0, [r7, #12]
 8000d56:	f000 faf1 	bl	800133c <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>
	return false;
 8000d5a:	2300      	movs	r3, #0
      }
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd90      	pop	{r4, r7, pc}

08000d64 <_ZNSt8functionIFvvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
    : _Function_base()
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fa53 	bl	800021c <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 8000d76:	6838      	ldr	r0, [r7, #0]
 8000d78:	f000 fb0b 	bl	8001392 <_ZNKSt8functionIFvvEEcvbEv>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d00d      	beq.n	8000d9e <_ZNSt8functionIFvvEEC1ERKS1_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	6839      	ldr	r1, [r7, #0]
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	68da      	ldr	r2, [r3, #12]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	689a      	ldr	r2, [r3, #8]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
    }
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_create_nodeIJS3_IS1_S6_EEEEPSt13_Rb_tree_nodeIS8_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f000 fafd 	bl	80013b2 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11_M_get_nodeEv>
 8000db8:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8000dba:	6838      	ldr	r0, [r7, #0]
 8000dbc:	f7ff fea1 	bl	8000b02 <_ZSt7forwardISt4pairIP17InterruptAccessorSt8functionIFvvEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68f9      	ldr	r1, [r7, #12]
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f000 fb04 	bl	80013d4 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE17_M_construct_nodeIJS3_IS1_S6_EEEEvPSt13_Rb_tree_nodeIS8_EDpOT_>
	  return __tmp;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
	}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000dd6:	b590      	push	{r4, r7, lr}
 8000dd8:	b08b      	sub	sp, #44	; 0x2c
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	60f8      	str	r0, [r7, #12]
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8000de2:	68b8      	ldr	r0, [r7, #8]
 8000de4:	f000 fb16 	bl	8001414 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_beginEv>
 8000de8:	4603      	mov	r3, r0
 8000dea:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8000dec:	68b8      	ldr	r0, [r7, #8]
 8000dee:	f000 fb1d 	bl	800142c <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_M_endEv>
 8000df2:	4603      	mov	r3, r0
 8000df4:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8000df6:	2301      	movs	r3, #1
 8000df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d020      	beq.n	8000e44 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8000e06:	68bc      	ldr	r4, [r7, #8]
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f868 	bl	8000ee0 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 8000e10:	4603      	mov	r3, r0
 8000e12:	461a      	mov	r2, r3
 8000e14:	6879      	ldr	r1, [r7, #4]
 8000e16:	4620      	mov	r0, r4
 8000e18:	f000 fb14 	bl	8001444 <_ZNKSt4lessIKP17InterruptAccessorEclERS2_S4_>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8000e22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d005      	beq.n	8000e36 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x60>
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 fb1e 	bl	800146e <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
 8000e32:	4603      	mov	r3, r0
 8000e34:	e004      	b.n	8000e40 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x6a>
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 fb24 	bl	8001486 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8000e42:	e7db      	b.n	8000dfc <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 8000e44:	697a      	ldr	r2, [r7, #20]
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 f8c1 	bl	8000fd4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8000e52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d01d      	beq.n	8000e96 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 8000e5a:	68b8      	ldr	r0, [r7, #8]
 8000e5c:	f000 fb1f 	bl	800149e <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE5beginEv>
 8000e60:	4603      	mov	r3, r0
 8000e62:	61fb      	str	r3, [r7, #28]
 8000e64:	f107 021c 	add.w	r2, r7, #28
 8000e68:	f107 0310 	add.w	r3, r7, #16
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 fb26 	bl	80014c0 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEESB_>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d008      	beq.n	8000e8c <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 8000e7a:	f107 0214 	add.w	r2, r7, #20
 8000e7e:	f107 0318 	add.w	r3, r7, #24
 8000e82:	4619      	mov	r1, r3
 8000e84:	68f8      	ldr	r0, [r7, #12]
 8000e86:	f000 fb2f 	bl	80014e8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP17InterruptAccessorKSt8functionIFvvEEEERS1_Lb1EEEOT_OT0_>
 8000e8a:	e025      	b.n	8000ed8 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 fb42 	bl	800151a <_ZNSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8000e96:	68bc      	ldr	r4, [r7, #8]
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 fb4e 	bl	800153c <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4620      	mov	r0, r4
 8000ea8:	f000 facc 	bl	8001444 <_ZNKSt4lessIKP17InterruptAccessorEclERS2_S4_>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d008      	beq.n	8000ec4 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 8000eb2:	f107 0214 	add.w	r2, r7, #20
 8000eb6:	f107 0318 	add.w	r3, r7, #24
 8000eba:	4619      	mov	r1, r3
 8000ebc:	68f8      	ldr	r0, [r7, #12]
 8000ebe:	f000 fb13 	bl	80014e8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP17InterruptAccessorKSt8functionIFvvEEEERS1_Lb1EEEOT_OT0_>
 8000ec2:	e009      	b.n	8000ed8 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	623b      	str	r3, [r7, #32]
 8000ec8:	f107 0220 	add.w	r2, r7, #32
 8000ecc:	f107 0310 	add.w	r3, r7, #16
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	68f8      	ldr	r0, [r7, #12]
 8000ed4:	f000 fb3e 	bl	8001554 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8000ed8:	68f8      	ldr	r0, [r7, #12]
 8000eda:	372c      	adds	r7, #44	; 0x2c
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd90      	pop	{r4, r7, pc}

08000ee0 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>:
      _S_key(_Const_Link_type __x)
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f000 fb49 	bl	8001580 <_ZNKSt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEE9_M_valptrEv>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 fb50 	bl	800159c <_ZNKSt10_Select1stISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEclERKS8_>
 8000efc:	4603      	mov	r3, r0
      }
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000f06:	b5b0      	push	{r4, r5, r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	60f8      	str	r0, [r7, #12]
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d117      	bne.n	8000f4a <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8000f1a:	68f8      	ldr	r0, [r7, #12]
 8000f1c:	f000 fa86 	bl	800142c <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_M_endEv>
 8000f20:	4602      	mov	r2, r0
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d010      	beq.n	8000f4a <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8000f28:	68fc      	ldr	r4, [r7, #12]
 8000f2a:	6838      	ldr	r0, [r7, #0]
 8000f2c:	f7ff ffd8 	bl	8000ee0 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 8000f30:	4605      	mov	r5, r0
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f000 fb02 	bl	800153c <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4629      	mov	r1, r5
 8000f3e:	4620      	mov	r0, r4
 8000f40:	f000 fa80 	bl	8001444 <_ZNKSt4lessIKP17InterruptAccessorEclERS2_S4_>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x48>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e000      	b.n	8000f50 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x4a>
 8000f4e:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8000f50:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8000f56:	7df8      	ldrb	r0, [r7, #23]
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	6839      	ldr	r1, [r7, #0]
 8000f5c:	f005 f927 	bl	80061ae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	695b      	ldr	r3, [r3, #20]
 8000f64:	1c5a      	adds	r2, r3, #1
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8000f6a:	f107 0310 	add.w	r3, r7, #16
 8000f6e:	6839      	ldr	r1, [r7, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f000 f82f 	bl	8000fd4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEC1EPSt18_Rb_tree_node_base>
 8000f76:	693b      	ldr	r3, [r7, #16]
    }
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bdb0      	pop	{r4, r5, r7, pc}

08000f80 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKP17InterruptAccessorKSt8functionIFvvEEEEbEC1IS9_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8000f8c:	68b8      	ldr	r0, [r7, #8]
 8000f8e:	f000 fb11 	bl	80015b4 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEOT_RNSt16remove_referenceISB_E4typeE>
 8000f92:	4602      	mov	r2, r0
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	6812      	ldr	r2, [r2, #0]
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff fd78 	bl	8000a90 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	781a      	ldrb	r2, [r3, #0]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	711a      	strb	r2, [r3, #4]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8000fbc:	6839      	ldr	r1, [r7, #0]
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 fb03 	bl	80015ca <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS8_E>
	_M_put_node(__p);
 8000fc4:	6839      	ldr	r1, [r7, #0]
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f000 fb14 	bl	80015f4 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E>
      }
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11equal_rangeERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000ff2:	b590      	push	{r4, r7, lr}
 8000ff4:	b08d      	sub	sp, #52	; 0x34
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8000ffe:	68b8      	ldr	r0, [r7, #8]
 8001000:	f000 fa08 	bl	8001414 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_beginEv>
 8001004:	62f8      	str	r0, [r7, #44]	; 0x2c
      _Base_ptr __y = _M_end();
 8001006:	68b8      	ldr	r0, [r7, #8]
 8001008:	f000 fa10 	bl	800142c <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_M_endEv>
 800100c:	62b8      	str	r0, [r7, #40]	; 0x28
      while (__x != 0)
 800100e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001010:	2b00      	cmp	r3, #0
 8001012:	d04c      	beq.n	80010ae <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11equal_rangeERS2_+0xbc>
	  if (_M_impl._M_key_compare(_S_key(__x), __k))
 8001014:	68bc      	ldr	r4, [r7, #8]
 8001016:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001018:	f7ff ff62 	bl	8000ee0 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 800101c:	4603      	mov	r3, r0
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	4619      	mov	r1, r3
 8001022:	4620      	mov	r0, r4
 8001024:	f000 fa0e 	bl	8001444 <_ZNKSt4lessIKP17InterruptAccessorEclERS2_S4_>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d004      	beq.n	8001038 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11equal_rangeERS2_+0x46>
	    __x = _S_right(__x);
 800102e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001030:	f000 fa29 	bl	8001486 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001034:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001036:	e7ea      	b.n	800100e <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11equal_rangeERS2_+0x1c>
	  else if (_M_impl._M_key_compare(__k, _S_key(__x)))
 8001038:	68bc      	ldr	r4, [r7, #8]
 800103a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800103c:	f7ff ff50 	bl	8000ee0 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 8001040:	4603      	mov	r3, r0
 8001042:	461a      	mov	r2, r3
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	4620      	mov	r0, r4
 8001048:	f000 f9fc 	bl	8001444 <_ZNKSt4lessIKP17InterruptAccessorEclERS2_S4_>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d006      	beq.n	8001060 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11equal_rangeERS2_+0x6e>
	    __y = __x, __x = _S_left(__x);
 8001052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28
 8001056:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001058:	f000 fa09 	bl	800146e <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
 800105c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800105e:	e7d6      	b.n	800100e <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11equal_rangeERS2_+0x1c>
	      _Link_type __xu(__x);
 8001060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
	      _Base_ptr __yu(__y);
 8001064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001066:	623b      	str	r3, [r7, #32]
	      __y = __x, __x = _S_left(__x);
 8001068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
 800106c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800106e:	f000 f9fe 	bl	800146e <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001072:	62f8      	str	r0, [r7, #44]	; 0x2c
	      __xu = _S_right(__xu);
 8001074:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001076:	f000 fa06 	bl	8001486 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
 800107a:	6278      	str	r0, [r7, #36]	; 0x24
			  iterator>(_M_lower_bound(__x, __y, __k),
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001080:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001082:	68b8      	ldr	r0, [r7, #8]
 8001084:	f000 fac8 	bl	8001618 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS2_>
 8001088:	4603      	mov	r3, r0
 800108a:	613b      	str	r3, [r7, #16]
				    _M_upper_bound(__xu, __yu, __k));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a3a      	ldr	r2, [r7, #32]
 8001090:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001092:	68b8      	ldr	r0, [r7, #8]
 8001094:	f000 faf1 	bl	800167a <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_upper_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS2_>
 8001098:	4603      	mov	r3, r0
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	f107 0214 	add.w	r2, r7, #20
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	4619      	mov	r1, r3
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	f000 fb15 	bl	80016d6 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKP17InterruptAccessorKSt8functionIFvvEEEES9_EC1IS9_S9_Lb1EEEOT_OT0_>
    }
 80010ac:	e013      	b.n	80010d6 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11equal_rangeERS2_+0xe4>
      return pair<iterator, iterator>(iterator(__y),
 80010ae:	f107 0318 	add.w	r3, r7, #24
 80010b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff8d 	bl	8000fd4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEC1EPSt18_Rb_tree_node_base>
				      iterator(__y));
 80010ba:	f107 031c 	add.w	r3, r7, #28
 80010be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff87 	bl	8000fd4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEC1EPSt18_Rb_tree_node_base>
 80010c6:	f107 021c 	add.w	r2, r7, #28
 80010ca:	f107 0318 	add.w	r3, r7, #24
 80010ce:	4619      	mov	r1, r3
 80010d0:	68f8      	ldr	r0, [r7, #12]
 80010d2:	f000 fb00 	bl	80016d6 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKP17InterruptAccessorKSt8functionIFvvEEEES9_EC1IS9_S9_Lb1EEEOT_OT0_>
    }
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	3734      	adds	r7, #52	; 0x34
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd90      	pop	{r4, r7, pc}

080010de <_ZNKSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEC1ERKSt17_Rb_tree_iteratorIS8_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS8_ESG_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
 800111c:	60f8      	str	r0, [r7, #12]
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
      if (__first == begin() && __last == end())
 8001122:	68f8      	ldr	r0, [r7, #12]
 8001124:	f000 f9bb 	bl	800149e <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE5beginEv>
 8001128:	4603      	mov	r3, r0
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	f107 0214 	add.w	r2, r7, #20
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	4611      	mov	r1, r2
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ffdd 	bl	80010f6 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEC1ERKSt17_Rb_tree_iteratorIS8_E>
 800113c:	f107 0210 	add.w	r2, r7, #16
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	4611      	mov	r1, r2
 8001146:	4618      	mov	r0, r3
 8001148:	f000 fade 	bl	8001708 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEESB_>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d018      	beq.n	8001184 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS8_ESG_+0x6e>
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f000 faec 	bl	8001730 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE3endEv>
 8001158:	4603      	mov	r3, r0
 800115a:	61fb      	str	r3, [r7, #28]
 800115c:	f107 021c 	add.w	r2, r7, #28
 8001160:	f107 0318 	add.w	r3, r7, #24
 8001164:	4611      	mov	r1, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ffc5 	bl	80010f6 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEC1ERKSt17_Rb_tree_iteratorIS8_E>
 800116c:	f107 0218 	add.w	r2, r7, #24
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	4611      	mov	r1, r2
 8001174:	4618      	mov	r0, r3
 8001176:	f000 fac7 	bl	8001708 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEESB_>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS8_ESG_+0x6e>
 8001180:	2301      	movs	r3, #1
 8001182:	e000      	b.n	8001186 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS8_ESG_+0x70>
 8001184:	2300      	movs	r3, #0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS8_ESG_+0x7c>
	clear();
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	f000 fae1 	bl	8001752 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE5clearEv>
    }
 8001190:	e018      	b.n	80011c4 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS8_ESG_+0xae>
	while (__first != __last)
 8001192:	1d3a      	adds	r2, r7, #4
 8001194:	f107 0308 	add.w	r3, r7, #8
 8001198:	4611      	mov	r1, r2
 800119a:	4618      	mov	r0, r3
 800119c:	f000 fab4 	bl	8001708 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEESB_>
 80011a0:	4603      	mov	r3, r0
 80011a2:	f083 0301 	eor.w	r3, r3, #1
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00b      	beq.n	80011c4 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS8_ESG_+0xae>
	  _M_erase_aux(__first++);
 80011ac:	f107 0308 	add.w	r3, r7, #8
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 fae2 	bl	800177c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEppEi>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4619      	mov	r1, r3
 80011bc:	68f8      	ldr	r0, [r7, #12]
 80011be:	f000 faf2 	bl	80017a6 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS8_E>
	while (__first != __last)
 80011c2:	e7e6      	b.n	8001192 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS8_ESG_+0x7c>
    }
 80011c4:	bf00      	nop
 80011c6:	3720      	adds	r7, #32
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <_ZNSt14_Function_base13_Base_managerIZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_E15_M_init_functorERSt9_Any_dataOSJ_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 80011cc:	b590      	push	{r4, r7, lr}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80011d8:	68b8      	ldr	r0, [r7, #8]
 80011da:	f7ff fd22 	bl	8000c22 <_ZSt4moveIRZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS6_ESaISt4pairIS6_SA_EEEEUlvE_EONSt16remove_referenceIT_E4typeEOSL_>
 80011de:	4604      	mov	r4, r0
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	f7ff f805 	bl	80001f0 <_ZNSt9_Any_data9_M_accessEv>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4619      	mov	r1, r3
 80011ea:	2004      	movs	r0, #4
 80011ec:	f7fe fff4 	bl	80001d8 <_ZnwjPv>
 80011f0:	4602      	mov	r2, r0
 80011f2:	6823      	ldr	r3, [r4, #0]
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	bf00      	nop
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd90      	pop	{r4, r7, pc}

080011fe <_ZNSt14_Function_base13_Base_managerIZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80011fe:	b580      	push	{r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 fae7 	bl	80017da <_ZNKSt9_Any_data9_M_accessIZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_EERKT_v>
 800120c:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f000 faef 	bl	80017f2 <_ZSt11__addressofIKZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS6_ESaISt4pairIS6_SA_EEEEUlvE_EPT_RSK_>
 8001214:	4603      	mov	r3, r0
	}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <_ZSt10__invoke_rIvRZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS6_ESaISt4pairIS6_SA_EEEEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EESL_E4typeEOSM_DpOSN_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800121e:	b590      	push	{r4, r7, lr}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 faee 	bl	8001808 <_ZSt7forwardIRZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS6_ESaISt4pairIS6_SA_EEEEUlvE_EOT_RNSt16remove_referenceISK_E4typeE>
 800122c:	4603      	mov	r3, r0
 800122e:	4619      	mov	r1, r3
 8001230:	4620      	mov	r0, r4
 8001232:	f000 faf4 	bl	800181e <_ZSt13__invoke_implIvRZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS6_ESaISt4pairIS6_SA_EEEEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	bd90      	pop	{r4, r7, pc}

0800123e <_ZNSt9_Any_data9_M_accessIPZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_EERT_v>:
      _M_access()
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7fe ffd2 	bl	80001f0 <_ZNSt9_Any_data9_M_accessEv>
 800124c:	4603      	mov	r3, r0
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <_ZNSt14_Function_base13_Base_managerIZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_E10_M_managerERSt9_Any_dataRKSL_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8001256:	b5b0      	push	{r4, r5, r7, lr}
 8001258:	b084      	sub	sp, #16
 800125a:	af00      	add	r7, sp, #0
 800125c:	60f8      	str	r0, [r7, #12]
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	4613      	mov	r3, r2
 8001262:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	2b03      	cmp	r3, #3
 8001268:	d016      	beq.n	8001298 <_ZNSt14_Function_base13_Base_managerIZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_E10_M_managerERSt9_Any_dataRKSL_St18_Manager_operation+0x42>
 800126a:	2b03      	cmp	r3, #3
 800126c:	dc19      	bgt.n	80012a2 <_ZNSt14_Function_base13_Base_managerIZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_E10_M_managerERSt9_Any_dataRKSL_St18_Manager_operation+0x4c>
 800126e:	2b01      	cmp	r3, #1
 8001270:	d002      	beq.n	8001278 <_ZNSt14_Function_base13_Base_managerIZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_E10_M_managerERSt9_Any_dataRKSL_St18_Manager_operation+0x22>
 8001272:	2b02      	cmp	r3, #2
 8001274:	d00a      	beq.n	800128c <_ZNSt14_Function_base13_Base_managerIZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_E10_M_managerERSt9_Any_dataRKSL_St18_Manager_operation+0x36>
 8001276:	e014      	b.n	80012a2 <_ZNSt14_Function_base13_Base_managerIZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_E10_M_managerERSt9_Any_dataRKSL_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8001278:	68b8      	ldr	r0, [r7, #8]
 800127a:	f7ff ffc0 	bl	80011fe <_ZNSt14_Function_base13_Base_managerIZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_E14_M_get_pointerERKSt9_Any_data>
 800127e:	4604      	mov	r4, r0
 8001280:	68f8      	ldr	r0, [r7, #12]
 8001282:	f7ff ffdc 	bl	800123e <_ZNSt9_Any_data9_M_accessIPZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_EERT_v>
 8001286:	4603      	mov	r3, r0
 8001288:	601c      	str	r4, [r3, #0]
	      break;
 800128a:	e00a      	b.n	80012a2 <_ZNSt14_Function_base13_Base_managerIZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_E10_M_managerERSt9_Any_dataRKSL_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 800128c:	462a      	mov	r2, r5
 800128e:	68b9      	ldr	r1, [r7, #8]
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f000 fad4 	bl	800183e <_ZNSt14_Function_base13_Base_managerIZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_E8_M_cloneERSt9_Any_dataRKSL_St17integral_constantIbLb1EE>
	      break;
 8001296:	e004      	b.n	80012a2 <_ZNSt14_Function_base13_Base_managerIZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_E10_M_managerERSt9_Any_dataRKSL_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8001298:	4621      	mov	r1, r4
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	f000 fae8 	bl	8001870 <_ZNSt14_Function_base13_Base_managerIZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80012a0:	bf00      	nop
	  return false;
 80012a2:	2300      	movs	r3, #0
	}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bdb0      	pop	{r4, r5, r7, pc}

080012ac <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E15_M_init_functorERSt9_Any_dataOS1_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80012b8:	68b8      	ldr	r0, [r7, #8]
 80012ba:	f7ff fd08 	bl	8000cce <_ZSt4moveIRZ4mainEUlvE_EONSt16remove_referenceIT_E4typeEOS3_>
 80012be:	4604      	mov	r4, r0
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f7fe ff95 	bl	80001f0 <_ZNSt9_Any_data9_M_accessEv>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4619      	mov	r1, r3
 80012ca:	2008      	movs	r0, #8
 80012cc:	f7fe ff84 	bl	80001d8 <_ZnwjPv>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4622      	mov	r2, r4
 80012d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012d8:	e883 0003 	stmia.w	r3, {r0, r1}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd90      	pop	{r4, r7, pc}

080012e4 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 facb 	bl	8001888 <_ZNKSt9_Any_data9_M_accessIZ4mainEUlvE_EERKT_v>
 80012f2:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80012f4:	68f8      	ldr	r0, [r7, #12]
 80012f6:	f000 fad3 	bl	80018a0 <_ZSt11__addressofIKZ4mainEUlvE_EPT_RS2_>
 80012fa:	4603      	mov	r3, r0
	}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <_ZSt10__invoke_rIvRZ4mainEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES3_E4typeEOS4_DpOS5_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8001304:	b590      	push	{r4, r7, lr}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 fad2 	bl	80018b6 <_ZSt7forwardIRZ4mainEUlvE_EOT_RNSt16remove_referenceIS2_E4typeE>
 8001312:	4603      	mov	r3, r0
 8001314:	4619      	mov	r1, r3
 8001316:	4620      	mov	r0, r4
 8001318:	f000 fad8 	bl	80018cc <_ZSt13__invoke_implIvRZ4mainEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>
    }
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bd90      	pop	{r4, r7, pc}

08001324 <_ZNSt9_Any_data9_M_accessIPZ4mainEUlvE_EERT_v>:
      _M_access()
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7fe ff5f 	bl	80001f0 <_ZNSt9_Any_data9_M_accessEv>
 8001332:	4603      	mov	r3, r0
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800133c:	b5b0      	push	{r4, r5, r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	4613      	mov	r3, r2
 8001348:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	2b03      	cmp	r3, #3
 800134e:	d016      	beq.n	800137e <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x42>
 8001350:	2b03      	cmp	r3, #3
 8001352:	dc19      	bgt.n	8001388 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
 8001354:	2b01      	cmp	r3, #1
 8001356:	d002      	beq.n	800135e <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x22>
 8001358:	2b02      	cmp	r3, #2
 800135a:	d00a      	beq.n	8001372 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x36>
 800135c:	e014      	b.n	8001388 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800135e:	68b8      	ldr	r0, [r7, #8]
 8001360:	f7ff ffc0 	bl	80012e4 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8001364:	4604      	mov	r4, r0
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f7ff ffdc 	bl	8001324 <_ZNSt9_Any_data9_M_accessIPZ4mainEUlvE_EERT_v>
 800136c:	4603      	mov	r3, r0
 800136e:	601c      	str	r4, [r3, #0]
	      break;
 8001370:	e00a      	b.n	8001388 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8001372:	462a      	mov	r2, r5
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f000 fab8 	bl	80018ec <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E8_M_cloneERSt9_Any_dataRKS3_St17integral_constantIbLb1EE>
	      break;
 800137c:	e004      	b.n	8001388 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800137e:	4621      	mov	r1, r4
 8001380:	68f8      	ldr	r0, [r7, #12]
 8001382:	f000 facf 	bl	8001924 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8001386:	bf00      	nop
	  return false;
 8001388:	2300      	movs	r3, #0
	}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bdb0      	pop	{r4, r5, r7, pc}

08001392 <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4618      	mov	r0, r3
 800139e:	f7fe ff5e 	bl	800025e <_ZNKSt14_Function_base8_M_emptyEv>
 80013a2:	4603      	mov	r3, r0
 80013a4:	f083 0301 	eor.w	r3, r3, #1
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11_M_get_nodeEv>:
      _M_get_node()
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 fabe 	bl	800193c <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE21_M_get_Node_allocatorEv>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2101      	movs	r1, #1
 80013c4:	4618      	mov	r0, r3
 80013c6:	f000 fac4 	bl	8001952 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEE8allocateERSB_j>
 80013ca:	4603      	mov	r3, r0
 80013cc:	4618      	mov	r0, r3
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE17_M_construct_nodeIJS3_IS1_S6_EEEEvPSt13_Rb_tree_nodeIS8_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 80013d4:	b5b0      	push	{r4, r5, r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	4619      	mov	r1, r3
 80013e4:	2024      	movs	r0, #36	; 0x24
 80013e6:	f7fe fef7 	bl	80001d8 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f000 faa6 	bl	800193c <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE21_M_get_Node_allocatorEv>
 80013f0:	4604      	mov	r4, r0
 80013f2:	68b8      	ldr	r0, [r7, #8]
 80013f4:	f000 fad0 	bl	8001998 <_ZNSt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEE9_M_valptrEv>
 80013f8:	4605      	mov	r5, r0
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff fb81 	bl	8000b02 <_ZSt7forwardISt4pairIP17InterruptAccessorSt8functionIFvvEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8001400:	4603      	mov	r3, r0
 8001402:	461a      	mov	r2, r3
 8001404:	4629      	mov	r1, r5
 8001406:	4620      	mov	r0, r4
 8001408:	f000 faec 	bl	80019e4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEE9constructIS9_JS1_IS3_S7_EEEEvRSB_PT_DpOT0_>
	}
 800140c:	bf00      	nop
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bdb0      	pop	{r4, r5, r7, pc}

08001414 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	4618      	mov	r0, r3
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3304      	adds	r3, #4
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <_ZNKSt4lessIKP17InterruptAccessorEclERS2_S4_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	bf34      	ite	cc
 800145c:	2301      	movcc	r3, #1
 800145e:	2300      	movcs	r3, #0
 8001460:	b2db      	uxtb	r3, r3
 8001462:	4618      	mov	r0, r3
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	4618      	mov	r0, r3
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800149e:	b580      	push	{r7, lr}
 80014a0:	b084      	sub	sp, #16
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68da      	ldr	r2, [r3, #12]
 80014aa:	f107 030c 	add.w	r3, r7, #12
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fd8f 	bl	8000fd4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEC1EPSt18_Rb_tree_node_base>
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4618      	mov	r0, r3
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEESB_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	bf0c      	ite	eq
 80014d6:	2301      	moveq	r3, #1
 80014d8:	2300      	movne	r3, #0
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	4618      	mov	r0, r3
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP17InterruptAccessorKSt8functionIFvvEEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80014f4:	68b8      	ldr	r0, [r7, #8]
 80014f6:	f000 fa87 	bl	8001a08 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEOT_RNSt16remove_referenceISD_E4typeE>
 80014fa:	4603      	mov	r3, r0
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 fa8b 	bl	8001a1e <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8001508:	4603      	mov	r3, r0
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <_ZNSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f004 fe3f 	bl	80061aa <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800152c:	4602      	mov	r2, r0
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	601a      	str	r2, [r3, #0]
	return *this;
 8001532:	687b      	ldr	r3, [r7, #4]
      }
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff fccb 	bl	8000ee0 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 800154a:	4603      	mov	r3, r0
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8001560:	68b8      	ldr	r0, [r7, #8]
 8001562:	f000 fa5c 	bl	8001a1e <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8001566:	4603      	mov	r3, r0
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <_ZNKSt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEE9_M_valptrEv>:
      _M_valptr() const
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3310      	adds	r3, #16
 800158c:	4618      	mov	r0, r3
 800158e:	f000 fa51 	bl	8001a34 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEE6_M_ptrEv>
 8001592:	4603      	mov	r3, r0
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <_ZNKSt10_Select1stISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEclERKS8_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS8_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80015ca:	b590      	push	{r4, r7, lr}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 f9b1 	bl	800193c <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE21_M_get_Node_allocatorEv>
 80015da:	4604      	mov	r4, r0
 80015dc:	6838      	ldr	r0, [r7, #0]
 80015de:	f000 f9db 	bl	8001998 <_ZNSt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEE9_M_valptrEv>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4619      	mov	r1, r3
 80015e6:	4620      	mov	r0, r4
 80015e8:	f000 fa30 	bl	8001a4c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEE7destroyIS9_EEvRSB_PT_>
      }
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd90      	pop	{r4, r7, pc}

080015f4 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 f99c 	bl	800193c <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE21_M_get_Node_allocatorEv>
 8001604:	4603      	mov	r3, r0
 8001606:	2201      	movs	r2, #1
 8001608:	6839      	ldr	r1, [r7, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f000 fa2a 	bl	8001a64 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEE10deallocateERSB_PSA_j>
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b087      	sub	sp, #28
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d01b      	beq.n	8001664 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS2_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 800162c:	68fc      	ldr	r4, [r7, #12]
 800162e:	68b8      	ldr	r0, [r7, #8]
 8001630:	f7ff fc56 	bl	8000ee0 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 8001634:	4603      	mov	r3, r0
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	4620      	mov	r0, r4
 800163c:	f7ff ff02 	bl	8001444 <_ZNKSt4lessIKP17InterruptAccessorEclERS2_S4_>
 8001640:	4603      	mov	r3, r0
 8001642:	f083 0301 	eor.w	r3, r3, #1
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b00      	cmp	r3, #0
 800164a:	d006      	beq.n	800165a <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS2_+0x42>
	  __y = __x, __x = _S_left(__x);
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	68b8      	ldr	r0, [r7, #8]
 8001652:	f7ff ff0c 	bl	800146e <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001656:	60b8      	str	r0, [r7, #8]
 8001658:	e7e5      	b.n	8001626 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS2_+0xe>
	  __x = _S_right(__x);
 800165a:	68b8      	ldr	r0, [r7, #8]
 800165c:	f7ff ff13 	bl	8001486 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001660:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8001662:	e7e0      	b.n	8001626 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS2_+0xe>
      return iterator(__y);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fcb2 	bl	8000fd4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEC1EPSt18_Rb_tree_node_base>
 8001670:	697b      	ldr	r3, [r7, #20]
    }
 8001672:	4618      	mov	r0, r3
 8001674:	371c      	adds	r7, #28
 8001676:	46bd      	mov	sp, r7
 8001678:	bd90      	pop	{r4, r7, pc}

0800167a <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_upper_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800167a:	b590      	push	{r4, r7, lr}
 800167c:	b087      	sub	sp, #28
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
 8001686:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d018      	beq.n	80016c0 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_upper_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS2_+0x46>
	if (_M_impl._M_key_compare(__k, _S_key(__x)))
 800168e:	68fc      	ldr	r4, [r7, #12]
 8001690:	68b8      	ldr	r0, [r7, #8]
 8001692:	f7ff fc25 	bl	8000ee0 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 8001696:	4603      	mov	r3, r0
 8001698:	461a      	mov	r2, r3
 800169a:	6839      	ldr	r1, [r7, #0]
 800169c:	4620      	mov	r0, r4
 800169e:	f7ff fed1 	bl	8001444 <_ZNKSt4lessIKP17InterruptAccessorEclERS2_S4_>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d006      	beq.n	80016b6 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_upper_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS2_+0x3c>
	  __y = __x, __x = _S_left(__x);
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	68b8      	ldr	r0, [r7, #8]
 80016ae:	f7ff fede 	bl	800146e <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
 80016b2:	60b8      	str	r0, [r7, #8]
 80016b4:	e7e8      	b.n	8001688 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_upper_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS2_+0xe>
	  __x = _S_right(__x);
 80016b6:	68b8      	ldr	r0, [r7, #8]
 80016b8:	f7ff fee5 	bl	8001486 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
 80016bc:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80016be:	e7e3      	b.n	8001688 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE14_M_upper_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS2_+0xe>
      return iterator(__y);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fc84 	bl	8000fd4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEC1EPSt18_Rb_tree_node_base>
 80016cc:	697b      	ldr	r3, [r7, #20]
    }
 80016ce:	4618      	mov	r0, r3
 80016d0:	371c      	adds	r7, #28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd90      	pop	{r4, r7, pc}

080016d6 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKP17InterruptAccessorKSt8functionIFvvEEEES9_EC1IS9_S9_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b084      	sub	sp, #16
 80016da:	af00      	add	r7, sp, #0
 80016dc:	60f8      	str	r0, [r7, #12]
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80016e2:	68b8      	ldr	r0, [r7, #8]
 80016e4:	f7ff ff66 	bl	80015b4 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEOT_RNSt16remove_referenceISB_E4typeE>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff ff5f 	bl	80015b4 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEOT_RNSt16remove_referenceISB_E4typeE>
 80016f6:	4602      	mov	r2, r0
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6812      	ldr	r2, [r2, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4618      	mov	r0, r3
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEESB_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	bf0c      	ite	eq
 800171e:	2301      	moveq	r3, #1
 8001720:	2300      	movne	r3, #0
 8001722:	b2db      	uxtb	r3, r3
 8001724:	4618      	mov	r0, r3
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	1d1a      	adds	r2, r3, #4
 800173c:	f107 030c 	add.w	r3, r7, #12
 8001740:	4611      	mov	r1, r2
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fc46 	bl	8000fd4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEC1EPSt18_Rb_tree_node_base>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
	_M_erase(_M_begin());
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff fe5a 	bl	8001414 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_beginEv>
 8001760:	4603      	mov	r3, r0
 8001762:	4619      	mov	r1, r3
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 f99c 	bl	8001aa2 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
	_M_impl._M_reset();
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	3304      	adds	r3, #4
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe fdd9 	bl	8000326 <_ZNSt15_Rb_tree_header8_M_resetEv>
      }
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEppEi>:
      operator++(int) _GLIBCXX_NOEXCEPT
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
	_Self __tmp = *this;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	60fb      	str	r3, [r7, #12]
	_M_node = _Rb_tree_increment(_M_node);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f004 fd08 	bl	80061a6 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>
 8001796:	4602      	mov	r2, r0
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	601a      	str	r2, [r3, #0]
	return __tmp;
 800179c:	68fb      	ldr	r3, [r7, #12]
      }
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS8_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b084      	sub	sp, #16
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	6039      	str	r1, [r7, #0]
				(const_cast<_Base_ptr>(__position._M_node),
 80017b0:	683a      	ldr	r2, [r7, #0]
				 this->_M_impl._M_header));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3304      	adds	r3, #4
				(const_cast<_Base_ptr>(__position._M_node),
 80017b6:	4619      	mov	r1, r3
 80017b8:	4610      	mov	r0, r2
 80017ba:	f004 fd53 	bl	8006264 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>
 80017be:	60f8      	str	r0, [r7, #12]
      _M_drop_node(__y);
 80017c0:	68f9      	ldr	r1, [r7, #12]
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff fbf5 	bl	8000fb2 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>
      --_M_impl._M_node_count;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	1e5a      	subs	r2, r3, #1
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	615a      	str	r2, [r3, #20]
    }
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <_ZNKSt9_Any_data9_M_accessIZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_EERKT_v>:
      _M_access() const
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7fe fd0f 	bl	8000206 <_ZNKSt9_Any_data9_M_accessEv>
 80017e8:	4603      	mov	r3, r0
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <_ZSt11__addressofIKZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS6_ESaISt4pairIS6_SA_EEEEUlvE_EPT_RSK_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <_ZSt7forwardIRZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS6_ESaISt4pairIS6_SA_EEEEUlvE_EOT_RNSt16remove_referenceISK_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4618      	mov	r0, r3
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <_ZSt13__invoke_implIvRZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS6_ESaISt4pairIS6_SA_EEEEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	7138      	strb	r0, [r7, #4]
 8001826:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8001828:	6838      	ldr	r0, [r7, #0]
 800182a:	f7ff ffed 	bl	8001808 <_ZSt7forwardIRZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS6_ESaISt4pairIS6_SA_EEEEUlvE_EOT_RNSt16remove_referenceISK_E4typeE>
 800182e:	4603      	mov	r3, r0
 8001830:	4618      	mov	r0, r3
 8001832:	f7fe fdfd 	bl	8000430 <_ZZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS5_ESaISt4pairIS5_S9_EEEENKUlvE_clEv>
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <_ZNSt14_Function_base13_Base_managerIZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_E8_M_cloneERSt9_Any_dataRKSL_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800183e:	b590      	push	{r4, r7, lr}
 8001840:	b085      	sub	sp, #20
 8001842:	af00      	add	r7, sp, #0
 8001844:	60f8      	str	r0, [r7, #12]
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800184a:	68b8      	ldr	r0, [r7, #8]
 800184c:	f7ff ffc5 	bl	80017da <_ZNKSt9_Any_data9_M_accessIZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_EERKT_v>
 8001850:	4604      	mov	r4, r0
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f7fe fccc 	bl	80001f0 <_ZNSt9_Any_data9_M_accessEv>
 8001858:	4603      	mov	r3, r0
 800185a:	4619      	mov	r1, r3
 800185c:	2004      	movs	r0, #4
 800185e:	f7fe fcbb 	bl	80001d8 <_ZnwjPv>
 8001862:	4602      	mov	r2, r0
 8001864:	6823      	ldr	r3, [r4, #0]
 8001866:	6013      	str	r3, [r2, #0]
	}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	bd90      	pop	{r4, r7, pc}

08001870 <_ZNSt14_Function_base13_Base_managerIZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f930 	bl	8001ae0 <_ZNSt9_Any_data9_M_accessIZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_EERT_v>
	}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <_ZNKSt9_Any_data9_M_accessIZ4mainEUlvE_EERKT_v>:
      _M_access() const
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7fe fcb8 	bl	8000206 <_ZNKSt9_Any_data9_M_accessEv>
 8001896:	4603      	mov	r3, r0
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <_ZSt11__addressofIKZ4mainEUlvE_EPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <_ZSt7forwardIRZ4mainEUlvE_EOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <_ZSt13__invoke_implIvRZ4mainEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	7138      	strb	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80018d6:	6838      	ldr	r0, [r7, #0]
 80018d8:	f7ff ffed 	bl	80018b6 <_ZSt7forwardIRZ4mainEUlvE_EOT_RNSt16remove_referenceIS2_E4typeE>
 80018dc:	4603      	mov	r3, r0
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fdf2 	bl	80004c8 <_ZZ4mainENKUlvE_clEv>
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E8_M_cloneERSt9_Any_dataRKS3_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 80018ec:	b590      	push	{r4, r7, lr}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80018f8:	68b8      	ldr	r0, [r7, #8]
 80018fa:	f7ff ffc5 	bl	8001888 <_ZNKSt9_Any_data9_M_accessIZ4mainEUlvE_EERKT_v>
 80018fe:	4604      	mov	r4, r0
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f7fe fc75 	bl	80001f0 <_ZNSt9_Any_data9_M_accessEv>
 8001906:	4603      	mov	r3, r0
 8001908:	4619      	mov	r1, r3
 800190a:	2008      	movs	r0, #8
 800190c:	f7fe fc64 	bl	80001d8 <_ZnwjPv>
 8001910:	4603      	mov	r3, r0
 8001912:	4622      	mov	r2, r4
 8001914:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001918:	e883 0003 	stmia.w	r3, {r0, r1}
	}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	bd90      	pop	{r4, r7, pc}

08001924 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f8e2 	bl	8001af8 <_ZNSt9_Any_data9_M_accessIZ4mainEUlvE_EERT_v>
	}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEE8allocateERSB_j>:
       *  @param  __n  The number of objects to allocate space for.
       *
       *  Calls @c a.allocate(n)
      */
      _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
      allocate(allocator_type& __a, size_type __n)
 8001952:	b580      	push	{r7, lr}
 8001954:	b084      	sub	sp, #16
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	6039      	str	r1, [r7, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	60bb      	str	r3, [r7, #8]
      [[nodiscard,__gnu__::__always_inline__]]
      constexpr _Tp*
      allocate(size_t __n)
      {
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 8001964:	f7fe fc30 	bl	80001c8 <_ZSt21is_constant_evaluatedv>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d009      	beq.n	8001982 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEE8allocateERSB_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	4613      	mov	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	4413      	add	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4618      	mov	r0, r3
 800197a:	f004 fbad 	bl	80060d8 <_Znwj>
 800197e:	4603      	mov	r3, r0
 8001980:	e006      	b.n	8001990 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEE8allocateERSB_j+0x3e>
#endif
	return __allocator_base<_Tp>::allocate(__n, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f000 f910 	bl	8001bac <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEE8allocateEjPKv>
 800198c:	4603      	mov	r3, r0
 800198e:	bf00      	nop
      { return __a.allocate(__n); }
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <_ZNSt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEE9_M_valptrEv>:
      _M_valptr()
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3310      	adds	r3, #16
 80019a4:	4618      	mov	r0, r3
 80019a6:	f000 f8b3 	bl	8001b10 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEE6_M_ptrEv>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <_ZSt12construct_atISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEJS0_IS2_S6_EEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSB_DpOSC_>:
    }

#if __cplusplus > 201703L
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
 80019b4:	b5b0      	push	{r4, r5, r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80019be:	6838      	ldr	r0, [r7, #0]
 80019c0:	f7ff f89f 	bl	8000b02 <_ZSt7forwardISt4pairIP17InterruptAccessorSt8functionIFvvEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80019c4:	4605      	mov	r5, r0
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4619      	mov	r1, r3
 80019ca:	2014      	movs	r0, #20
 80019cc:	f7fe fc04 	bl	80001d8 <_ZnwjPv>
 80019d0:	4604      	mov	r4, r0
 80019d2:	4629      	mov	r1, r5
 80019d4:	4620      	mov	r0, r4
 80019d6:	f000 f8a7 	bl	8001b28 <_ZNSt4pairIKP17InterruptAccessorKSt8functionIFvvEEEC1IS1_S5_Lb1EEEOS_IT_T0_E>
 80019da:	4623      	mov	r3, r4
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bdb0      	pop	{r4, r5, r7, pc}

080019e4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEE9constructIS9_JS1_IS3_S7_EEEEvRSB_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff f886 	bl	8000b02 <_ZSt7forwardISt4pairIP17InterruptAccessorSt8functionIFvvEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80019f6:	4603      	mov	r3, r0
 80019f8:	4619      	mov	r1, r3
 80019fa:	68b8      	ldr	r0, [r7, #8]
 80019fc:	f7ff ffda 	bl	80019b4 <_ZSt12construct_atISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEJS0_IS2_S6_EEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSB_DpOSC_>
#endif
	}
 8001a00:	bf00      	nop
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEOT_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEE6_M_ptrEv>:
      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f891 	bl	8001b64 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEE7_M_addrEv>
 8001a42:	4603      	mov	r3, r0
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEE7destroyIS9_EEvRSB_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
#else
	  std::destroy_at(__p);
 8001a56:	6838      	ldr	r0, [r7, #0]
 8001a58:	f000 f89d 	bl	8001b96 <_ZSt10destroy_atISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEvPT_>
#endif
	}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEE10deallocateERSB_PSA_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	61fb      	str	r3, [r7, #28]
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	61bb      	str	r3, [r7, #24]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	617b      	str	r3, [r7, #20]
      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 8001a7c:	f7fe fba4 	bl	80001c8 <_ZSt21is_constant_evaluatedv>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEE10deallocateERSB_PSA_j+0x2a>
	  {
	    ::operator delete(__p);
 8001a86:	69b8      	ldr	r0, [r7, #24]
 8001a88:	f004 fb22 	bl	80060d0 <_ZdlPv>
	    return;
 8001a8c:	e005      	b.n	8001a9a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEE10deallocateERSB_PSA_j+0x36>
	  }
#endif
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	69b9      	ldr	r1, [r7, #24]
 8001a92:	69f8      	ldr	r0, [r7, #28]
 8001a94:	f000 f8d4 	bl	8001c40 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEE10deallocateEPSB_j>
      { __a.deallocate(__p, __n); }
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	3720      	adds	r7, #32
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d012      	beq.n	8001ad8 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x36>
	  _M_erase(_S_right(__x));
 8001ab2:	6838      	ldr	r0, [r7, #0]
 8001ab4:	f7ff fce7 	bl	8001486 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	4619      	mov	r1, r3
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff fff0 	bl	8001aa2 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
	  _Link_type __y = _S_left(__x);
 8001ac2:	6838      	ldr	r0, [r7, #0]
 8001ac4:	f7ff fcd3 	bl	800146e <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001ac8:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8001aca:	6839      	ldr	r1, [r7, #0]
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff fa70 	bl	8000fb2 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>
	  __x = __y;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001ad6:	e7e9      	b.n	8001aac <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0xa>
    }
 8001ad8:	bf00      	nop
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <_ZNSt9_Any_data9_M_accessIZN6SwitchC4EP12GPIO_TypeDeftRSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS7_ESaISt4pairIS7_SB_EEEEUlvE_EERT_v>:
      _M_access()
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7fe fb81 	bl	80001f0 <_ZNSt9_Any_data9_M_accessEv>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <_ZNSt9_Any_data9_M_accessIZ4mainEUlvE_EERT_v>:
      _M_access()
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7fe fb75 	bl	80001f0 <_ZNSt9_Any_data9_M_accessEv>
 8001b06:	4603      	mov	r3, r0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEE6_M_ptrEv>:
      _M_ptr() noexcept
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f869 	bl	8001bf0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEE7_M_addrEv>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4618      	mov	r0, r3
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <_ZNSt4pairIKP17InterruptAccessorKSt8functionIFvvEEEC1IS1_S5_Lb1EEEOS_IT_T0_E>:
	constexpr pair(pair<_U1, _U2>&& __p)
 8001b28:	b590      	push	{r4, r7, lr}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
	: first(std::forward<_U1>(__p.first)),
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7fe ffb6 	bl	8000aa6 <_ZSt7forwardIP17InterruptAccessorEOT_RNSt16remove_referenceIS2_E4typeE>
 8001b3a:	4603      	mov	r3, r0
	  second(std::forward<_U2>(__p.second)) { }
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	1d1c      	adds	r4, r3, #4
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 f85b 	bl	8001c06 <_ZSt7forwardISt8functionIFvvEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8001b50:	4603      	mov	r3, r0
 8001b52:	4619      	mov	r1, r3
 8001b54:	4620      	mov	r0, r4
 8001b56:	f000 f861 	bl	8001c1c <_ZNSt8functionIFvvEEC1EOS1_>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd90      	pop	{r4, r7, pc}

08001b64 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEE7_M_addrEv>:
      _M_addr() const noexcept
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <_ZNSt4pairIKP17InterruptAccessorKSt8functionIFvvEEED1Ev>:
    struct pair
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3304      	adds	r3, #4
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fbe3 	bl	8000352 <_ZNSt8functionIFvvEED1Ev>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <_ZSt10destroy_atISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEvPT_>:
    destroy_at(_Tp* __location)
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff ffeb 	bl	8001b7a <_ZNSt4pairIKP17InterruptAccessorKSt8functionIFvvEEED1Ev>
    }
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEE8allocateEjPKv>:
#endif

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
	 // 3308. std::allocator<void>().allocate(n)
	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
#endif

	if (__n > this->_M_max_size())
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 f853 	bl	8001c64 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEE11_M_max_sizeEv>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	bf8c      	ite	hi
 8001bc6:	2301      	movhi	r3, #1
 8001bc8:	2300      	movls	r3, #0
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8001bd0:	f004 fc2c 	bl	800642c <_ZSt17__throw_bad_allocv>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4413      	add	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4618      	mov	r0, r3
 8001be0:	f004 fa7a 	bl	80060d8 <_Znwj>
 8001be4:	4603      	mov	r3, r0
 8001be6:	bf00      	nop
      }
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEE7_M_addrEv>:
      _M_addr() noexcept
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <_ZSt7forwardISt8functionIFvvEEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <_ZNSt8functionIFvvEEC1EOS1_>:
      function(function&& __x) noexcept : _Function_base()
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe faf7 	bl	800021c <_ZNSt14_Function_baseC1Ev>
	__x.swap(*this);
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	6838      	ldr	r0, [r7, #0]
 8001c32:	f000 f825 	bl	8001c80 <_ZNSt8functionIFvvEE4swapERS1_>
      }
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEE10deallocateEPSB_j>:

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4413      	add	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4619      	mov	r1, r3
 8001c58:	68b8      	ldr	r0, [r7, #8]
 8001c5a:	f004 fa3b 	bl	80060d4 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001c6c:	4b03      	ldr	r3, [pc, #12]	; (8001c7c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	038e38e3 	.word	0x038e38e3

08001c80 <_ZNSt8functionIFvvEE4swapERS1_>:
      void swap(function& __x) noexcept
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	4611      	mov	r1, r2
 8001c90:	4618      	mov	r0, r3
 8001c92:	f000 f816 	bl	8001cc2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f103 0208 	add.w	r2, r3, #8
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	3308      	adds	r3, #8
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	f000 f834 	bl	8001d10 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f103 020c 	add.w	r2, r3, #12
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	330c      	adds	r3, #12
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	f000 f84a 	bl	8001d4e <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
      }
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b084      	sub	sp, #16
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f85d 	bl	8001d8c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	f107 0308 	add.w	r3, r7, #8
 8001cd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cdc:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8001ce0:	6838      	ldr	r0, [r7, #0]
 8001ce2:	f000 f853 	bl	8001d8c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cee:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8001cf2:	f107 0308 	add.w	r3, r7, #8
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 f848 	bl	8001d8c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d04:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8001d08:	bf00      	nop
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f841 	bl	8001da2 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8001d20:	4603      	mov	r3, r0
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8001d26:	6838      	ldr	r0, [r7, #0]
 8001d28:	f000 f83b 	bl	8001da2 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8001d34:	f107 030c 	add.w	r3, r7, #12
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f000 f832 	bl	8001da2 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	601a      	str	r2, [r3, #0]
    }
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b084      	sub	sp, #16
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 f82d 	bl	8001db8 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8001d64:	6838      	ldr	r0, [r7, #0]
 8001d66:	f000 f827 	bl	8001db8 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8001d72:	f107 030c 	add.w	r3, r7, #12
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 f81e 	bl	8001db8 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	601a      	str	r2, [r3, #0]
    }
 8001d84:	bf00      	nop
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4618      	mov	r0, r3
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <HAL_MspInit+0x44>)
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	4a0e      	ldr	r2, [pc, #56]	; (8001e14 <HAL_MspInit+0x44>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6193      	str	r3, [r2, #24]
 8001de2:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <HAL_MspInit+0x44>)
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	607b      	str	r3, [r7, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dee:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <HAL_MspInit+0x44>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	4a08      	ldr	r2, [pc, #32]	; (8001e14 <HAL_MspInit+0x44>)
 8001df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df8:	61d3      	str	r3, [r2, #28]
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_MspInit+0x44>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	40021000 	.word	0x40021000

08001e18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a0a      	ldr	r2, [pc, #40]	; (8001e50 <HAL_TIM_Base_MspInit+0x38>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d10b      	bne.n	8001e42 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <HAL_TIM_Base_MspInit+0x3c>)
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	4a09      	ldr	r2, [pc, #36]	; (8001e54 <HAL_TIM_Base_MspInit+0x3c>)
 8001e30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e34:	6193      	str	r3, [r2, #24]
 8001e36:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <HAL_TIM_Base_MspInit+0x3c>)
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e42:	bf00      	nop
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40012c00 	.word	0x40012c00
 8001e54:	40021000 	.word	0x40021000

08001e58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 030c 	add.w	r3, r7, #12
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a12      	ldr	r2, [pc, #72]	; (8001ec0 <HAL_TIM_MspPostInit+0x68>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d11d      	bne.n	8001eb6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7a:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_TIM_MspPostInit+0x6c>)
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	4a11      	ldr	r2, [pc, #68]	; (8001ec4 <HAL_TIM_MspPostInit+0x6c>)
 8001e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e84:	6153      	str	r3, [r2, #20]
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_TIM_MspPostInit+0x6c>)
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001ea4:	2306      	movs	r3, #6
 8001ea6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea8:	f107 030c 	add.w	r3, r7, #12
 8001eac:	4619      	mov	r1, r3
 8001eae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb2:	f000 fcb9 	bl	8002828 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001eb6:	bf00      	nop
 8001eb8:	3720      	adds	r7, #32
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40012c00 	.word	0x40012c00
 8001ec4:	40021000 	.word	0x40021000

08001ec8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	; 0x28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a1b      	ldr	r2, [pc, #108]	; (8001f54 <HAL_UART_MspInit+0x8c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d12f      	bne.n	8001f4a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eea:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <HAL_UART_MspInit+0x90>)
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	4a1a      	ldr	r2, [pc, #104]	; (8001f58 <HAL_UART_MspInit+0x90>)
 8001ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef4:	6193      	str	r3, [r2, #24]
 8001ef6:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <HAL_UART_MspInit+0x90>)
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f02:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <HAL_UART_MspInit+0x90>)
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	4a14      	ldr	r2, [pc, #80]	; (8001f58 <HAL_UART_MspInit+0x90>)
 8001f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f0c:	6153      	str	r3, [r2, #20]
 8001f0e:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_UART_MspInit+0x90>)
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = LIDER_TX_Pin|LIDER_RX_Pin;
 8001f1a:	23c0      	movs	r3, #192	; 0xc0
 8001f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f1e:	2312      	movs	r3, #18
 8001f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f22:	2301      	movs	r3, #1
 8001f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f26:	2303      	movs	r3, #3
 8001f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f2a:	2307      	movs	r3, #7
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	4619      	mov	r1, r3
 8001f34:	4809      	ldr	r0, [pc, #36]	; (8001f5c <HAL_UART_MspInit+0x94>)
 8001f36:	f000 fc77 	bl	8002828 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	2025      	movs	r0, #37	; 0x25
 8001f40:	f000 fbc5 	bl	80026ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f44:	2025      	movs	r0, #37	; 0x25
 8001f46:	f000 fbde 	bl	8002706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f4a:	bf00      	nop
 8001f4c:	3728      	adds	r7, #40	; 0x28
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40013800 	.word	0x40013800
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	48000400 	.word	0x48000400

08001f60 <_ZNSt15_Rb_tree_headerC1Ev>:
    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
      _M_header._M_color = _S_red;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7fe f9d9 	bl	8000326 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE13_Rb_tree_implISC_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f8eb 	bl	8002162 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEED1Ev>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EEC1Ev>:
      _Rb_tree() = default;
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 f8c9 	bl	8002138 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE13_Rb_tree_implISC_Lb1EEC1Ev>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <_ZNSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEEC1Ev>:
      map() = default;
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff ffeb 	bl	8001f96 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EEC1Ev>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fce:	e7fe      	b.n	8001fce <NMI_Handler+0x4>

08001fd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fd4:	e7fe      	b.n	8001fd4 <HardFault_Handler+0x4>

08001fd6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fda:	e7fe      	b.n	8001fda <MemManage_Handler+0x4>

08001fdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fe0:	e7fe      	b.n	8001fe0 <BusFault_Handler+0x4>

08001fe2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe6:	e7fe      	b.n	8001fe6 <UsageFault_Handler+0x4>

08001fe8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <_ZNSt4pairIKP17InterruptAccessorKSt8functionIFvvEEEC1ERKS7_>:
      constexpr pair(const pair&) = default;	///< Copy constructor
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	6039      	str	r1, [r7, #0]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	1d1a      	adds	r2, r3, #4
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	3304      	adds	r3, #4
 800202c:	4619      	mov	r1, r3
 800202e:	4610      	mov	r0, r2
 8002030:	f7fe fe98 	bl	8000d64 <_ZNSt8functionIFvvEEC1ERKS1_>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  for(auto i : SysTick_Accessor) i.second();
 8002046:	4b1c      	ldr	r3, [pc, #112]	; (80020b8 <SysTick_Handler+0x78>)
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	69f8      	ldr	r0, [r7, #28]
 800204c:	f000 f8a9 	bl	80021a2 <_ZNSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEE5beginEv>
 8002050:	4603      	mov	r3, r0
 8002052:	607b      	str	r3, [r7, #4]
 8002054:	69f8      	ldr	r0, [r7, #28]
 8002056:	f000 f8b1 	bl	80021bc <_ZNSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEE3endEv>
 800205a:	4603      	mov	r3, r0
 800205c:	603b      	str	r3, [r7, #0]
 800205e:	463a      	mov	r2, r7
 8002060:	1d3b      	adds	r3, r7, #4
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fa2b 	bl	80014c0 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEESB_>
 800206a:	4603      	mov	r3, r0
 800206c:	f083 0301 	eor.w	r3, r3, #1
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d01a      	beq.n	80020ac <SysTick_Handler+0x6c>
 8002076:	1d3b      	adds	r3, r7, #4
 8002078:	4618      	mov	r0, r3
 800207a:	f000 f8bd 	bl	80021f8 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEdeEv>
 800207e:	4602      	mov	r2, r0
 8002080:	f107 0308 	add.w	r3, r7, #8
 8002084:	4611      	mov	r1, r2
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff ffc3 	bl	8002012 <_ZNSt4pairIKP17InterruptAccessorKSt8functionIFvvEEEC1ERKS7_>
 800208c:	f107 0308 	add.w	r3, r7, #8
 8002090:	3304      	adds	r3, #4
 8002092:	4618      	mov	r0, r3
 8002094:	f000 f8be 	bl	8002214 <_ZNKSt8functionIFvvEEclEv>
 8002098:	f107 0308 	add.w	r3, r7, #8
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fd6c 	bl	8001b7a <_ZNSt4pairIKP17InterruptAccessorKSt8functionIFvvEEED1Ev>
 80020a2:	1d3b      	adds	r3, r7, #4
 80020a4:	4618      	mov	r0, r3
 80020a6:	f000 f896 	bl	80021d6 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEppEv>
 80020aa:	e7d8      	b.n	800205e <SysTick_Handler+0x1e>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ac:	f000 fa14 	bl	80024d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 80020b0:	bf00      	nop
 80020b2:	3720      	adds	r7, #32
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20000168 	.word	0x20000168

080020bc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80020c2:	2001      	movs	r0, #1
 80020c4:	f000 fd22 	bl	8002b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  for(auto& i : EXTI_IRQ_Accessor)i.second();
 80020c8:	4b15      	ldr	r3, [pc, #84]	; (8002120 <EXTI0_IRQHandler+0x64>)
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 f868 	bl	80021a2 <_ZNSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEE5beginEv>
 80020d2:	4603      	mov	r3, r0
 80020d4:	607b      	str	r3, [r7, #4]
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 f870 	bl	80021bc <_ZNSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEE3endEv>
 80020dc:	4603      	mov	r3, r0
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	463a      	mov	r2, r7
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	4611      	mov	r1, r2
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff f9ea 	bl	80014c0 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEESB_>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f083 0301 	eor.w	r3, r3, #1
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00e      	beq.n	8002116 <EXTI0_IRQHandler+0x5a>
 80020f8:	1d3b      	adds	r3, r7, #4
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 f87c 	bl	80021f8 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEdeEv>
 8002100:	60b8      	str	r0, [r7, #8]
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	3304      	adds	r3, #4
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f884 	bl	8002214 <_ZNKSt8functionIFvvEEclEv>
 800210c:	1d3b      	adds	r3, r7, #4
 800210e:	4618      	mov	r0, r3
 8002110:	f000 f861 	bl	80021d6 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEppEv>
 8002114:	e7e4      	b.n	80020e0 <EXTI0_IRQHandler+0x24>
  /* USER CODE END EXTI0_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000198 	.word	0x20000198

08002124 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	//for(auto& i : USART1_IRQ_Accessor) i.second();

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002128:	4802      	ldr	r0, [pc, #8]	; (8002134 <USART1_IRQHandler+0x10>)
 800212a:	f003 f941 	bl	80053b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	200000d8 	.word	0x200000d8

08002138 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE13_Rb_tree_implISC_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f87d 	bl	8002240 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEC1Ev>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4618      	mov	r0, r3
 800214a:	f000 f885 	bl	8002258 <_ZNSt20_Rb_tree_key_compareISt4lessIKP17InterruptAccessorEEC1Ev>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3304      	adds	r3, #4
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff ff04 	bl	8001f60 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff f947 	bl	8001414 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_beginEv>
 8002186:	4603      	mov	r3, r0
 8002188:	4619      	mov	r1, r3
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff fc89 	bl	8001aa2 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff fef3 	bl	8001f7e <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE13_Rb_tree_implISC_Lb1EED1Ev>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <_ZNSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
      { return _M_t.begin(); }
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff f976 	bl	800149e <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE5beginEv>
 80021b2:	4603      	mov	r3, r0
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <_ZNSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fab2 	bl	8001730 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EE3endEv>
 80021cc:	4603      	mov	r3, r0
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f003 ffdd 	bl	80061a2 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 80021e8:	4602      	mov	r2, r0
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	601a      	str	r2, [r3, #0]
	return *this;
 80021ee:	687b      	ldr	r3, [r7, #4]
      }
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fbc7 	bl	8001998 <_ZNSt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEE9_M_valptrEv>
 800220a:	4603      	mov	r3, r0
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <_ZNKSt8functionIFvvEEclEv>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe f81d 	bl	800025e <_ZNKSt14_Function_base8_M_emptyEv>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <_ZNKSt8functionIFvvEEclEv+0x1a>
	__throw_bad_function_call();
 800222a:	f004 f902 	bl	8006432 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	4610      	mov	r0, r2
 8002236:	4798      	blx	r3
 8002238:	bf00      	nop
    }
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f810 	bl	800226e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEC1Ev>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4618      	mov	r0, r3
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <_ZNSt20_Rb_tree_key_compareISt4lessIKP17InterruptAccessorEEC1Ev>:
      _Rb_tree_key_compare()
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
      { }
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17InterruptAccessorKSt8functionIFvvEEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <_ZNSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEED1Ev>:
      ~map() = default;
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff ff72 	bl	8002178 <_ZNSt8_Rb_treeIKP17InterruptAccessorSt4pairIS2_KSt8functionIFvvEEESt10_Select1stIS8_ESt4lessIS2_ESaIS8_EED1Ev>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <_Z41__static_initialization_and_destruction_0ii>:
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d10d      	bne.n	80022cc <_Z41__static_initialization_and_destruction_0ii+0x2c>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d108      	bne.n	80022cc <_Z41__static_initialization_and_destruction_0ii+0x2c>
InterruptAccessor::Map SysTick_Accessor;
 80022ba:	480f      	ldr	r0, [pc, #60]	; (80022f8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80022bc:	f7ff fe78 	bl	8001fb0 <_ZNSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEEC1Ev>
InterruptAccessor::Map UART_IRQ_Accessor;
 80022c0:	480e      	ldr	r0, [pc, #56]	; (80022fc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80022c2:	f7ff fe75 	bl	8001fb0 <_ZNSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEEC1Ev>
InterruptAccessor::Map EXTI_IRQ_Accessor;
 80022c6:	480e      	ldr	r0, [pc, #56]	; (8002300 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80022c8:	f7ff fe72 	bl	8001fb0 <_ZNSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEEC1Ev>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10d      	bne.n	80022ee <_Z41__static_initialization_and_destruction_0ii+0x4e>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022d8:	4293      	cmp	r3, r2
 80022da:	d108      	bne.n	80022ee <_Z41__static_initialization_and_destruction_0ii+0x4e>
 80022dc:	4808      	ldr	r0, [pc, #32]	; (8002300 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80022de:	f7ff ffd1 	bl	8002284 <_ZNSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEED1Ev>
InterruptAccessor::Map UART_IRQ_Accessor;
 80022e2:	4806      	ldr	r0, [pc, #24]	; (80022fc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80022e4:	f7ff ffce 	bl	8002284 <_ZNSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEED1Ev>
InterruptAccessor::Map SysTick_Accessor;
 80022e8:	4803      	ldr	r0, [pc, #12]	; (80022f8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80022ea:	f7ff ffcb 	bl	8002284 <_ZNSt3mapIKP17InterruptAccessorKSt8functionIFvvEESt4lessIS2_ESaISt4pairIS2_S6_EEED1Ev>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000168 	.word	0x20000168
 80022fc:	20000180 	.word	0x20000180
 8002300:	20000198 	.word	0x20000198

08002304 <_GLOBAL__sub_I_SysTick_Accessor>:
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
 8002308:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800230c:	2001      	movs	r0, #1
 800230e:	f7ff ffc7 	bl	80022a0 <_Z41__static_initialization_and_destruction_0ii>
 8002312:	bd80      	pop	{r7, pc}

08002314 <_GLOBAL__sub_D_SysTick_Accessor>:
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
 8002318:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800231c:	2000      	movs	r0, #0
 800231e:	f7ff ffbf 	bl	80022a0 <_Z41__static_initialization_and_destruction_0ii>
 8002322:	bd80      	pop	{r7, pc}

08002324 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
	return 1;
 8002328:	2301      	movs	r3, #1
}
 800232a:	4618      	mov	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <_kill>:

int _kill(int pid, int sig)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800233e:	f004 f88b 	bl	8006458 <__errno>
 8002342:	4603      	mov	r3, r0
 8002344:	2216      	movs	r2, #22
 8002346:	601a      	str	r2, [r3, #0]
	return -1;
 8002348:	f04f 33ff 	mov.w	r3, #4294967295
}
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <_exit>:

void _exit (int status)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800235c:	f04f 31ff 	mov.w	r1, #4294967295
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff ffe7 	bl	8002334 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002366:	e7fe      	b.n	8002366 <_exit+0x12>

08002368 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002370:	4a14      	ldr	r2, [pc, #80]	; (80023c4 <_sbrk+0x5c>)
 8002372:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <_sbrk+0x60>)
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800237c:	4b13      	ldr	r3, [pc, #76]	; (80023cc <_sbrk+0x64>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d102      	bne.n	800238a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002384:	4b11      	ldr	r3, [pc, #68]	; (80023cc <_sbrk+0x64>)
 8002386:	4a12      	ldr	r2, [pc, #72]	; (80023d0 <_sbrk+0x68>)
 8002388:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800238a:	4b10      	ldr	r3, [pc, #64]	; (80023cc <_sbrk+0x64>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	429a      	cmp	r2, r3
 8002396:	d207      	bcs.n	80023a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002398:	f004 f85e 	bl	8006458 <__errno>
 800239c:	4603      	mov	r3, r0
 800239e:	220c      	movs	r2, #12
 80023a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023a2:	f04f 33ff 	mov.w	r3, #4294967295
 80023a6:	e009      	b.n	80023bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023a8:	4b08      	ldr	r3, [pc, #32]	; (80023cc <_sbrk+0x64>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ae:	4b07      	ldr	r3, [pc, #28]	; (80023cc <_sbrk+0x64>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	4a05      	ldr	r2, [pc, #20]	; (80023cc <_sbrk+0x64>)
 80023b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ba:	68fb      	ldr	r3, [r7, #12]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20003000 	.word	0x20003000
 80023c8:	00000400 	.word	0x00000400
 80023cc:	200001b0 	.word	0x200001b0
 80023d0:	200001d0 	.word	0x200001d0

080023d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023d8:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <SystemInit+0x20>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023de:	4a05      	ldr	r2, [pc, #20]	; (80023f4 <SystemInit+0x20>)
 80023e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002430 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023fc:	480d      	ldr	r0, [pc, #52]	; (8002434 <LoopForever+0x6>)
  ldr r1, =_edata
 80023fe:	490e      	ldr	r1, [pc, #56]	; (8002438 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002400:	4a0e      	ldr	r2, [pc, #56]	; (800243c <LoopForever+0xe>)
  movs r3, #0
 8002402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002404:	e002      	b.n	800240c <LoopCopyDataInit>

08002406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800240a:	3304      	adds	r3, #4

0800240c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800240c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800240e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002410:	d3f9      	bcc.n	8002406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002412:	4a0b      	ldr	r2, [pc, #44]	; (8002440 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002414:	4c0b      	ldr	r4, [pc, #44]	; (8002444 <LoopForever+0x16>)
  movs r3, #0
 8002416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002418:	e001      	b.n	800241e <LoopFillZerobss>

0800241a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800241a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800241c:	3204      	adds	r2, #4

0800241e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800241e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002420:	d3fb      	bcc.n	800241a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002422:	f7ff ffd7 	bl	80023d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002426:	f004 f81d 	bl	8006464 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800242a:	f7fe f8a9 	bl	8000580 <main>

0800242e <LoopForever>:

LoopForever:
    b LoopForever
 800242e:	e7fe      	b.n	800242e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002430:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002438:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800243c:	080067d0 	.word	0x080067d0
  ldr r2, =_sbss
 8002440:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002444:	200001cc 	.word	0x200001cc

08002448 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002448:	e7fe      	b.n	8002448 <ADC1_2_IRQHandler>
	...

0800244c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002450:	4b08      	ldr	r3, [pc, #32]	; (8002474 <HAL_Init+0x28>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a07      	ldr	r2, [pc, #28]	; (8002474 <HAL_Init+0x28>)
 8002456:	f043 0310 	orr.w	r3, r3, #16
 800245a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800245c:	2003      	movs	r0, #3
 800245e:	f000 f92b 	bl	80026b8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002462:	2001      	movs	r0, #1
 8002464:	f000 f808 	bl	8002478 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002468:	f7ff fcb2 	bl	8001dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40022000 	.word	0x40022000

08002478 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002480:	4b12      	ldr	r3, [pc, #72]	; (80024cc <HAL_InitTick+0x54>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_InitTick+0x58>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	4619      	mov	r1, r3
 800248a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800248e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002492:	fbb2 f3f3 	udiv	r3, r2, r3
 8002496:	4618      	mov	r0, r3
 8002498:	f000 f943 	bl	8002722 <HAL_SYSTICK_Config>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e00e      	b.n	80024c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b0f      	cmp	r3, #15
 80024aa:	d80a      	bhi.n	80024c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024ac:	2200      	movs	r2, #0
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	f04f 30ff 	mov.w	r0, #4294967295
 80024b4:	f000 f90b 	bl	80026ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024b8:	4a06      	ldr	r2, [pc, #24]	; (80024d4 <HAL_InitTick+0x5c>)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	e000      	b.n	80024c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000000 	.word	0x20000000
 80024d0:	20000008 	.word	0x20000008
 80024d4:	20000004 	.word	0x20000004

080024d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024dc:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <HAL_IncTick+0x20>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	461a      	mov	r2, r3
 80024e2:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_IncTick+0x24>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4413      	add	r3, r2
 80024e8:	4a04      	ldr	r2, [pc, #16]	; (80024fc <HAL_IncTick+0x24>)
 80024ea:	6013      	str	r3, [r2, #0]
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	20000008 	.word	0x20000008
 80024fc:	200001b4 	.word	0x200001b4

08002500 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  return uwTick;  
 8002504:	4b03      	ldr	r3, [pc, #12]	; (8002514 <HAL_GetTick+0x14>)
 8002506:	681b      	ldr	r3, [r3, #0]
}
 8002508:	4618      	mov	r0, r3
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	200001b4 	.word	0x200001b4

08002518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002528:	4b0c      	ldr	r3, [pc, #48]	; (800255c <__NVIC_SetPriorityGrouping+0x44>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002534:	4013      	ands	r3, r2
 8002536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002540:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800254a:	4a04      	ldr	r2, [pc, #16]	; (800255c <__NVIC_SetPriorityGrouping+0x44>)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	60d3      	str	r3, [r2, #12]
}
 8002550:	bf00      	nop
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002564:	4b04      	ldr	r3, [pc, #16]	; (8002578 <__NVIC_GetPriorityGrouping+0x18>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	0a1b      	lsrs	r3, r3, #8
 800256a:	f003 0307 	and.w	r3, r3, #7
}
 800256e:	4618      	mov	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	2b00      	cmp	r3, #0
 800258c:	db0b      	blt.n	80025a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	f003 021f 	and.w	r2, r3, #31
 8002594:	4907      	ldr	r1, [pc, #28]	; (80025b4 <__NVIC_EnableIRQ+0x38>)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	2001      	movs	r0, #1
 800259e:	fa00 f202 	lsl.w	r2, r0, r2
 80025a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	e000e100 	.word	0xe000e100

080025b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	6039      	str	r1, [r7, #0]
 80025c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	db0a      	blt.n	80025e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	490c      	ldr	r1, [pc, #48]	; (8002604 <__NVIC_SetPriority+0x4c>)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	0112      	lsls	r2, r2, #4
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	440b      	add	r3, r1
 80025dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e0:	e00a      	b.n	80025f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	4908      	ldr	r1, [pc, #32]	; (8002608 <__NVIC_SetPriority+0x50>)
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	3b04      	subs	r3, #4
 80025f0:	0112      	lsls	r2, r2, #4
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	440b      	add	r3, r1
 80025f6:	761a      	strb	r2, [r3, #24]
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	e000e100 	.word	0xe000e100
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800260c:	b480      	push	{r7}
 800260e:	b089      	sub	sp, #36	; 0x24
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f1c3 0307 	rsb	r3, r3, #7
 8002626:	2b04      	cmp	r3, #4
 8002628:	bf28      	it	cs
 800262a:	2304      	movcs	r3, #4
 800262c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3304      	adds	r3, #4
 8002632:	2b06      	cmp	r3, #6
 8002634:	d902      	bls.n	800263c <NVIC_EncodePriority+0x30>
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3b03      	subs	r3, #3
 800263a:	e000      	b.n	800263e <NVIC_EncodePriority+0x32>
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002640:	f04f 32ff 	mov.w	r2, #4294967295
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43da      	mvns	r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	401a      	ands	r2, r3
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002654:	f04f 31ff 	mov.w	r1, #4294967295
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	fa01 f303 	lsl.w	r3, r1, r3
 800265e:	43d9      	mvns	r1, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002664:	4313      	orrs	r3, r2
         );
}
 8002666:	4618      	mov	r0, r3
 8002668:	3724      	adds	r7, #36	; 0x24
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
	...

08002674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3b01      	subs	r3, #1
 8002680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002684:	d301      	bcc.n	800268a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002686:	2301      	movs	r3, #1
 8002688:	e00f      	b.n	80026aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800268a:	4a0a      	ldr	r2, [pc, #40]	; (80026b4 <SysTick_Config+0x40>)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3b01      	subs	r3, #1
 8002690:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002692:	210f      	movs	r1, #15
 8002694:	f04f 30ff 	mov.w	r0, #4294967295
 8002698:	f7ff ff8e 	bl	80025b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800269c:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <SysTick_Config+0x40>)
 800269e:	2200      	movs	r2, #0
 80026a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026a2:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <SysTick_Config+0x40>)
 80026a4:	2207      	movs	r2, #7
 80026a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	e000e010 	.word	0xe000e010

080026b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff ff29 	bl	8002518 <__NVIC_SetPriorityGrouping>
}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b086      	sub	sp, #24
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	4603      	mov	r3, r0
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
 80026da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026e0:	f7ff ff3e 	bl	8002560 <__NVIC_GetPriorityGrouping>
 80026e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68b9      	ldr	r1, [r7, #8]
 80026ea:	6978      	ldr	r0, [r7, #20]
 80026ec:	f7ff ff8e 	bl	800260c <NVIC_EncodePriority>
 80026f0:	4602      	mov	r2, r0
 80026f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f6:	4611      	mov	r1, r2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff5d 	bl	80025b8 <__NVIC_SetPriority>
}
 80026fe:	bf00      	nop
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	4603      	mov	r3, r0
 800270e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ff31 	bl	800257c <__NVIC_EnableIRQ>
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff ffa2 	bl	8002674 <SysTick_Config>
 8002730:	4603      	mov	r3, r0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002748:	2b02      	cmp	r3, #2
 800274a:	d008      	beq.n	800275e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2204      	movs	r2, #4
 8002750:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e020      	b.n	80027a0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 020e 	bic.w	r2, r2, #14
 800276c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0201 	bic.w	r2, r2, #1
 800277c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002786:	2101      	movs	r1, #1
 8002788:	fa01 f202 	lsl.w	r2, r1, r2
 800278c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d005      	beq.n	80027ce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2204      	movs	r2, #4
 80027c6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	73fb      	strb	r3, [r7, #15]
 80027cc:	e027      	b.n	800281e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 020e 	bic.w	r2, r2, #14
 80027dc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0201 	bic.w	r2, r2, #1
 80027ec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f6:	2101      	movs	r1, #1
 80027f8:	fa01 f202 	lsl.w	r2, r1, r2
 80027fc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	4798      	blx	r3
    } 
  }
  return status;
 800281e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002828:	b480      	push	{r7}
 800282a:	b087      	sub	sp, #28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002836:	e14e      	b.n	8002ad6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	2101      	movs	r1, #1
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	fa01 f303 	lsl.w	r3, r1, r3
 8002844:	4013      	ands	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 8140 	beq.w	8002ad0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	2b01      	cmp	r3, #1
 800285a:	d005      	beq.n	8002868 <HAL_GPIO_Init+0x40>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d130      	bne.n	80028ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	2203      	movs	r2, #3
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4013      	ands	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800289e:	2201      	movs	r2, #1
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4013      	ands	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	091b      	lsrs	r3, r3, #4
 80028b4:	f003 0201 	and.w	r2, r3, #1
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d017      	beq.n	8002906 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	2203      	movs	r2, #3
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43db      	mvns	r3, r3
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4013      	ands	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d123      	bne.n	800295a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	08da      	lsrs	r2, r3, #3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3208      	adds	r2, #8
 800291a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800291e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	220f      	movs	r2, #15
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4013      	ands	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	691a      	ldr	r2, [r3, #16]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	08da      	lsrs	r2, r3, #3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3208      	adds	r2, #8
 8002954:	6939      	ldr	r1, [r7, #16]
 8002956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	2203      	movs	r2, #3
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4013      	ands	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 0203 	and.w	r2, r3, #3
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 809a 	beq.w	8002ad0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800299c:	4b55      	ldr	r3, [pc, #340]	; (8002af4 <HAL_GPIO_Init+0x2cc>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	4a54      	ldr	r2, [pc, #336]	; (8002af4 <HAL_GPIO_Init+0x2cc>)
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	6193      	str	r3, [r2, #24]
 80029a8:	4b52      	ldr	r3, [pc, #328]	; (8002af4 <HAL_GPIO_Init+0x2cc>)
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	60bb      	str	r3, [r7, #8]
 80029b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029b4:	4a50      	ldr	r2, [pc, #320]	; (8002af8 <HAL_GPIO_Init+0x2d0>)
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	089b      	lsrs	r3, r3, #2
 80029ba:	3302      	adds	r3, #2
 80029bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	220f      	movs	r2, #15
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4013      	ands	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029de:	d013      	beq.n	8002a08 <HAL_GPIO_Init+0x1e0>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a46      	ldr	r2, [pc, #280]	; (8002afc <HAL_GPIO_Init+0x2d4>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d00d      	beq.n	8002a04 <HAL_GPIO_Init+0x1dc>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a45      	ldr	r2, [pc, #276]	; (8002b00 <HAL_GPIO_Init+0x2d8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d007      	beq.n	8002a00 <HAL_GPIO_Init+0x1d8>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a44      	ldr	r2, [pc, #272]	; (8002b04 <HAL_GPIO_Init+0x2dc>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d101      	bne.n	80029fc <HAL_GPIO_Init+0x1d4>
 80029f8:	2303      	movs	r3, #3
 80029fa:	e006      	b.n	8002a0a <HAL_GPIO_Init+0x1e2>
 80029fc:	2305      	movs	r3, #5
 80029fe:	e004      	b.n	8002a0a <HAL_GPIO_Init+0x1e2>
 8002a00:	2302      	movs	r3, #2
 8002a02:	e002      	b.n	8002a0a <HAL_GPIO_Init+0x1e2>
 8002a04:	2301      	movs	r3, #1
 8002a06:	e000      	b.n	8002a0a <HAL_GPIO_Init+0x1e2>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	f002 0203 	and.w	r2, r2, #3
 8002a10:	0092      	lsls	r2, r2, #2
 8002a12:	4093      	lsls	r3, r2
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a1a:	4937      	ldr	r1, [pc, #220]	; (8002af8 <HAL_GPIO_Init+0x2d0>)
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	089b      	lsrs	r3, r3, #2
 8002a20:	3302      	adds	r3, #2
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a28:	4b37      	ldr	r3, [pc, #220]	; (8002b08 <HAL_GPIO_Init+0x2e0>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	43db      	mvns	r3, r3
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	4013      	ands	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a4c:	4a2e      	ldr	r2, [pc, #184]	; (8002b08 <HAL_GPIO_Init+0x2e0>)
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a52:	4b2d      	ldr	r3, [pc, #180]	; (8002b08 <HAL_GPIO_Init+0x2e0>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a76:	4a24      	ldr	r2, [pc, #144]	; (8002b08 <HAL_GPIO_Init+0x2e0>)
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a7c:	4b22      	ldr	r3, [pc, #136]	; (8002b08 <HAL_GPIO_Init+0x2e0>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	43db      	mvns	r3, r3
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002aa0:	4a19      	ldr	r2, [pc, #100]	; (8002b08 <HAL_GPIO_Init+0x2e0>)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aa6:	4b18      	ldr	r3, [pc, #96]	; (8002b08 <HAL_GPIO_Init+0x2e0>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002aca:	4a0f      	ldr	r2, [pc, #60]	; (8002b08 <HAL_GPIO_Init+0x2e0>)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f47f aea9 	bne.w	8002838 <HAL_GPIO_Init+0x10>
  }
}
 8002ae6:	bf00      	nop
 8002ae8:	bf00      	nop
 8002aea:	371c      	adds	r7, #28
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40010000 	.word	0x40010000
 8002afc:	48000400 	.word	0x48000400
 8002b00:	48000800 	.word	0x48000800
 8002b04:	48000c00 	.word	0x48000c00
 8002b08:	40010400 	.word	0x40010400

08002b0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	88fb      	ldrh	r3, [r7, #6]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d006      	beq.n	8002b30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b22:	4a05      	ldr	r2, [pc, #20]	; (8002b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 f806 	bl	8002b3c <HAL_GPIO_EXTI_Callback>
  }
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40010400 	.word	0x40010400

08002b3c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
	...

08002b54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b64:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d102      	bne.n	8002b7a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	f001 b823 	b.w	8003bc0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 817d 	beq.w	8002e8a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b90:	4bbc      	ldr	r3, [pc, #752]	; (8002e84 <HAL_RCC_OscConfig+0x330>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 030c 	and.w	r3, r3, #12
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d00c      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b9c:	4bb9      	ldr	r3, [pc, #740]	; (8002e84 <HAL_RCC_OscConfig+0x330>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 030c 	and.w	r3, r3, #12
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d15c      	bne.n	8002c62 <HAL_RCC_OscConfig+0x10e>
 8002ba8:	4bb6      	ldr	r3, [pc, #728]	; (8002e84 <HAL_RCC_OscConfig+0x330>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb4:	d155      	bne.n	8002c62 <HAL_RCC_OscConfig+0x10e>
 8002bb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bba:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002bc2:	fa93 f3a3 	rbit	r3, r3
 8002bc6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bca:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	095b      	lsrs	r3, r3, #5
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d102      	bne.n	8002be8 <HAL_RCC_OscConfig+0x94>
 8002be2:	4ba8      	ldr	r3, [pc, #672]	; (8002e84 <HAL_RCC_OscConfig+0x330>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	e015      	b.n	8002c14 <HAL_RCC_OscConfig+0xc0>
 8002be8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bec:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002bf4:	fa93 f3a3 	rbit	r3, r3
 8002bf8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002bfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c00:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002c04:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002c08:	fa93 f3a3 	rbit	r3, r3
 8002c0c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002c10:	4b9c      	ldr	r3, [pc, #624]	; (8002e84 <HAL_RCC_OscConfig+0x330>)
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c18:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002c1c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002c20:	fa92 f2a2 	rbit	r2, r2
 8002c24:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002c28:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002c2c:	fab2 f282 	clz	r2, r2
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	f042 0220 	orr.w	r2, r2, #32
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	f002 021f 	and.w	r2, r2, #31
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c42:	4013      	ands	r3, r2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 811f 	beq.w	8002e88 <HAL_RCC_OscConfig+0x334>
 8002c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f040 8116 	bne.w	8002e88 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	f000 bfaf 	b.w	8003bc0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c72:	d106      	bne.n	8002c82 <HAL_RCC_OscConfig+0x12e>
 8002c74:	4b83      	ldr	r3, [pc, #524]	; (8002e84 <HAL_RCC_OscConfig+0x330>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a82      	ldr	r2, [pc, #520]	; (8002e84 <HAL_RCC_OscConfig+0x330>)
 8002c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	e036      	b.n	8002cf0 <HAL_RCC_OscConfig+0x19c>
 8002c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10c      	bne.n	8002cac <HAL_RCC_OscConfig+0x158>
 8002c92:	4b7c      	ldr	r3, [pc, #496]	; (8002e84 <HAL_RCC_OscConfig+0x330>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a7b      	ldr	r2, [pc, #492]	; (8002e84 <HAL_RCC_OscConfig+0x330>)
 8002c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	4b79      	ldr	r3, [pc, #484]	; (8002e84 <HAL_RCC_OscConfig+0x330>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a78      	ldr	r2, [pc, #480]	; (8002e84 <HAL_RCC_OscConfig+0x330>)
 8002ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	e021      	b.n	8002cf0 <HAL_RCC_OscConfig+0x19c>
 8002cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x184>
 8002cbe:	4b71      	ldr	r3, [pc, #452]	; (8002e84 <HAL_RCC_OscConfig+0x330>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a70      	ldr	r2, [pc, #448]	; (8002e84 <HAL_RCC_OscConfig+0x330>)
 8002cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	4b6e      	ldr	r3, [pc, #440]	; (8002e84 <HAL_RCC_OscConfig+0x330>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a6d      	ldr	r2, [pc, #436]	; (8002e84 <HAL_RCC_OscConfig+0x330>)
 8002cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	e00b      	b.n	8002cf0 <HAL_RCC_OscConfig+0x19c>
 8002cd8:	4b6a      	ldr	r3, [pc, #424]	; (8002e84 <HAL_RCC_OscConfig+0x330>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a69      	ldr	r2, [pc, #420]	; (8002e84 <HAL_RCC_OscConfig+0x330>)
 8002cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	4b67      	ldr	r3, [pc, #412]	; (8002e84 <HAL_RCC_OscConfig+0x330>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a66      	ldr	r2, [pc, #408]	; (8002e84 <HAL_RCC_OscConfig+0x330>)
 8002cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cee:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cf0:	4b64      	ldr	r3, [pc, #400]	; (8002e84 <HAL_RCC_OscConfig+0x330>)
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	f023 020f 	bic.w	r2, r3, #15
 8002cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	495f      	ldr	r1, [pc, #380]	; (8002e84 <HAL_RCC_OscConfig+0x330>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d059      	beq.n	8002dce <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1a:	f7ff fbf1 	bl	8002500 <HAL_GetTick>
 8002d1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d22:	e00a      	b.n	8002d3a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d24:	f7ff fbec 	bl	8002500 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b64      	cmp	r3, #100	; 0x64
 8002d32:	d902      	bls.n	8002d3a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	f000 bf43 	b.w	8003bc0 <HAL_RCC_OscConfig+0x106c>
 8002d3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d3e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d42:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002d46:	fa93 f3a3 	rbit	r3, r3
 8002d4a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002d4e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d52:	fab3 f383 	clz	r3, r3
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	095b      	lsrs	r3, r3, #5
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d102      	bne.n	8002d6c <HAL_RCC_OscConfig+0x218>
 8002d66:	4b47      	ldr	r3, [pc, #284]	; (8002e84 <HAL_RCC_OscConfig+0x330>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	e015      	b.n	8002d98 <HAL_RCC_OscConfig+0x244>
 8002d6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d70:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002d78:	fa93 f3a3 	rbit	r3, r3
 8002d7c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002d80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d84:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002d88:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002d8c:	fa93 f3a3 	rbit	r3, r3
 8002d90:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002d94:	4b3b      	ldr	r3, [pc, #236]	; (8002e84 <HAL_RCC_OscConfig+0x330>)
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d9c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002da0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002da4:	fa92 f2a2 	rbit	r2, r2
 8002da8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002dac:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002db0:	fab2 f282 	clz	r2, r2
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	f042 0220 	orr.w	r2, r2, #32
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	f002 021f 	and.w	r2, r2, #31
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0ab      	beq.n	8002d24 <HAL_RCC_OscConfig+0x1d0>
 8002dcc:	e05d      	b.n	8002e8a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dce:	f7ff fb97 	bl	8002500 <HAL_GetTick>
 8002dd2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd6:	e00a      	b.n	8002dee <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd8:	f7ff fb92 	bl	8002500 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b64      	cmp	r3, #100	; 0x64
 8002de6:	d902      	bls.n	8002dee <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	f000 bee9 	b.w	8003bc0 <HAL_RCC_OscConfig+0x106c>
 8002dee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002df2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002dfa:	fa93 f3a3 	rbit	r3, r3
 8002dfe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002e02:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	095b      	lsrs	r3, r3, #5
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d102      	bne.n	8002e20 <HAL_RCC_OscConfig+0x2cc>
 8002e1a:	4b1a      	ldr	r3, [pc, #104]	; (8002e84 <HAL_RCC_OscConfig+0x330>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	e015      	b.n	8002e4c <HAL_RCC_OscConfig+0x2f8>
 8002e20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e24:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e28:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002e2c:	fa93 f3a3 	rbit	r3, r3
 8002e30:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002e34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e38:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002e3c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002e40:	fa93 f3a3 	rbit	r3, r3
 8002e44:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002e48:	4b0e      	ldr	r3, [pc, #56]	; (8002e84 <HAL_RCC_OscConfig+0x330>)
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e50:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002e54:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002e58:	fa92 f2a2 	rbit	r2, r2
 8002e5c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002e60:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002e64:	fab2 f282 	clz	r2, r2
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	f042 0220 	orr.w	r2, r2, #32
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	f002 021f 	and.w	r2, r2, #31
 8002e74:	2101      	movs	r1, #1
 8002e76:	fa01 f202 	lsl.w	r2, r1, r2
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1ab      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x284>
 8002e80:	e003      	b.n	8002e8a <HAL_RCC_OscConfig+0x336>
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 817d 	beq.w	800319a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ea0:	4ba6      	ldr	r3, [pc, #664]	; (800313c <HAL_RCC_OscConfig+0x5e8>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f003 030c 	and.w	r3, r3, #12
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00b      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002eac:	4ba3      	ldr	r3, [pc, #652]	; (800313c <HAL_RCC_OscConfig+0x5e8>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f003 030c 	and.w	r3, r3, #12
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d172      	bne.n	8002f9e <HAL_RCC_OscConfig+0x44a>
 8002eb8:	4ba0      	ldr	r3, [pc, #640]	; (800313c <HAL_RCC_OscConfig+0x5e8>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d16c      	bne.n	8002f9e <HAL_RCC_OscConfig+0x44a>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002ece:	fa93 f3a3 	rbit	r3, r3
 8002ed2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002ed6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eda:	fab3 f383 	clz	r3, r3
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	095b      	lsrs	r3, r3, #5
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d102      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x3a0>
 8002eee:	4b93      	ldr	r3, [pc, #588]	; (800313c <HAL_RCC_OscConfig+0x5e8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	e013      	b.n	8002f1c <HAL_RCC_OscConfig+0x3c8>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efa:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002f06:	2302      	movs	r3, #2
 8002f08:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002f0c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f10:	fa93 f3a3 	rbit	r3, r3
 8002f14:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002f18:	4b88      	ldr	r3, [pc, #544]	; (800313c <HAL_RCC_OscConfig+0x5e8>)
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002f22:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002f26:	fa92 f2a2 	rbit	r2, r2
 8002f2a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002f2e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002f32:	fab2 f282 	clz	r2, r2
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	f042 0220 	orr.w	r2, r2, #32
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	f002 021f 	and.w	r2, r2, #31
 8002f42:	2101      	movs	r1, #1
 8002f44:	fa01 f202 	lsl.w	r2, r1, r2
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00a      	beq.n	8002f64 <HAL_RCC_OscConfig+0x410>
 8002f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d002      	beq.n	8002f64 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	f000 be2e 	b.w	8003bc0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f64:	4b75      	ldr	r3, [pc, #468]	; (800313c <HAL_RCC_OscConfig+0x5e8>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	21f8      	movs	r1, #248	; 0xf8
 8002f7a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002f82:	fa91 f1a1 	rbit	r1, r1
 8002f86:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002f8a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002f8e:	fab1 f181 	clz	r1, r1
 8002f92:	b2c9      	uxtb	r1, r1
 8002f94:	408b      	lsls	r3, r1
 8002f96:	4969      	ldr	r1, [pc, #420]	; (800313c <HAL_RCC_OscConfig+0x5e8>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f9c:	e0fd      	b.n	800319a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 8088 	beq.w	80030c0 <HAL_RCC_OscConfig+0x56c>
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002fba:	fa93 f3a3 	rbit	r3, r3
 8002fbe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002fc2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fc6:	fab3 f383 	clz	r3, r3
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	2301      	movs	r3, #1
 8002fda:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fdc:	f7ff fa90 	bl	8002500 <HAL_GetTick>
 8002fe0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe4:	e00a      	b.n	8002ffc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fe6:	f7ff fa8b 	bl	8002500 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d902      	bls.n	8002ffc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	f000 bde2 	b.w	8003bc0 <HAL_RCC_OscConfig+0x106c>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003006:	fa93 f3a3 	rbit	r3, r3
 800300a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800300e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003012:	fab3 f383 	clz	r3, r3
 8003016:	b2db      	uxtb	r3, r3
 8003018:	095b      	lsrs	r3, r3, #5
 800301a:	b2db      	uxtb	r3, r3
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b01      	cmp	r3, #1
 8003024:	d102      	bne.n	800302c <HAL_RCC_OscConfig+0x4d8>
 8003026:	4b45      	ldr	r3, [pc, #276]	; (800313c <HAL_RCC_OscConfig+0x5e8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	e013      	b.n	8003054 <HAL_RCC_OscConfig+0x500>
 800302c:	2302      	movs	r3, #2
 800302e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003036:	fa93 f3a3 	rbit	r3, r3
 800303a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800303e:	2302      	movs	r3, #2
 8003040:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003044:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003048:	fa93 f3a3 	rbit	r3, r3
 800304c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003050:	4b3a      	ldr	r3, [pc, #232]	; (800313c <HAL_RCC_OscConfig+0x5e8>)
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	2202      	movs	r2, #2
 8003056:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800305a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800305e:	fa92 f2a2 	rbit	r2, r2
 8003062:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003066:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800306a:	fab2 f282 	clz	r2, r2
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	f042 0220 	orr.w	r2, r2, #32
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	f002 021f 	and.w	r2, r2, #31
 800307a:	2101      	movs	r1, #1
 800307c:	fa01 f202 	lsl.w	r2, r1, r2
 8003080:	4013      	ands	r3, r2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0af      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003086:	4b2d      	ldr	r3, [pc, #180]	; (800313c <HAL_RCC_OscConfig+0x5e8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800308e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003092:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	21f8      	movs	r1, #248	; 0xf8
 800309c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80030a4:	fa91 f1a1 	rbit	r1, r1
 80030a8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80030ac:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80030b0:	fab1 f181 	clz	r1, r1
 80030b4:	b2c9      	uxtb	r1, r1
 80030b6:	408b      	lsls	r3, r1
 80030b8:	4920      	ldr	r1, [pc, #128]	; (800313c <HAL_RCC_OscConfig+0x5e8>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	600b      	str	r3, [r1, #0]
 80030be:	e06c      	b.n	800319a <HAL_RCC_OscConfig+0x646>
 80030c0:	2301      	movs	r3, #1
 80030c2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80030ca:	fa93 f3a3 	rbit	r3, r3
 80030ce:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80030d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030d6:	fab3 f383 	clz	r3, r3
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	461a      	mov	r2, r3
 80030e8:	2300      	movs	r3, #0
 80030ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ec:	f7ff fa08 	bl	8002500 <HAL_GetTick>
 80030f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f4:	e00a      	b.n	800310c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030f6:	f7ff fa03 	bl	8002500 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d902      	bls.n	800310c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	f000 bd5a 	b.w	8003bc0 <HAL_RCC_OscConfig+0x106c>
 800310c:	2302      	movs	r3, #2
 800310e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003112:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003116:	fa93 f3a3 	rbit	r3, r3
 800311a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800311e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003122:	fab3 f383 	clz	r3, r3
 8003126:	b2db      	uxtb	r3, r3
 8003128:	095b      	lsrs	r3, r3, #5
 800312a:	b2db      	uxtb	r3, r3
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b01      	cmp	r3, #1
 8003134:	d104      	bne.n	8003140 <HAL_RCC_OscConfig+0x5ec>
 8003136:	4b01      	ldr	r3, [pc, #4]	; (800313c <HAL_RCC_OscConfig+0x5e8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	e015      	b.n	8003168 <HAL_RCC_OscConfig+0x614>
 800313c:	40021000 	.word	0x40021000
 8003140:	2302      	movs	r3, #2
 8003142:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003146:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800314a:	fa93 f3a3 	rbit	r3, r3
 800314e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003152:	2302      	movs	r3, #2
 8003154:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003158:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800315c:	fa93 f3a3 	rbit	r3, r3
 8003160:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003164:	4bc8      	ldr	r3, [pc, #800]	; (8003488 <HAL_RCC_OscConfig+0x934>)
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	2202      	movs	r2, #2
 800316a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800316e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003172:	fa92 f2a2 	rbit	r2, r2
 8003176:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800317a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800317e:	fab2 f282 	clz	r2, r2
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	f042 0220 	orr.w	r2, r2, #32
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	f002 021f 	and.w	r2, r2, #31
 800318e:	2101      	movs	r1, #1
 8003190:	fa01 f202 	lsl.w	r2, r1, r2
 8003194:	4013      	ands	r3, r2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1ad      	bne.n	80030f6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800319a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 8110 	beq.w	80033d0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d079      	beq.n	80032b4 <HAL_RCC_OscConfig+0x760>
 80031c0:	2301      	movs	r3, #1
 80031c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80031ca:	fa93 f3a3 	rbit	r3, r3
 80031ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80031d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031d6:	fab3 f383 	clz	r3, r3
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	461a      	mov	r2, r3
 80031de:	4bab      	ldr	r3, [pc, #684]	; (800348c <HAL_RCC_OscConfig+0x938>)
 80031e0:	4413      	add	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	461a      	mov	r2, r3
 80031e6:	2301      	movs	r3, #1
 80031e8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ea:	f7ff f989 	bl	8002500 <HAL_GetTick>
 80031ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f2:	e00a      	b.n	800320a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031f4:	f7ff f984 	bl	8002500 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d902      	bls.n	800320a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	f000 bcdb 	b.w	8003bc0 <HAL_RCC_OscConfig+0x106c>
 800320a:	2302      	movs	r3, #2
 800320c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003210:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003214:	fa93 f3a3 	rbit	r3, r3
 8003218:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800321c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003220:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003224:	2202      	movs	r2, #2
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	fa93 f2a3 	rbit	r2, r3
 8003236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003248:	2202      	movs	r2, #2
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003250:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	fa93 f2a3 	rbit	r2, r3
 800325a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003262:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003264:	4b88      	ldr	r3, [pc, #544]	; (8003488 <HAL_RCC_OscConfig+0x934>)
 8003266:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003270:	2102      	movs	r1, #2
 8003272:	6019      	str	r1, [r3, #0]
 8003274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003278:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	fa93 f1a3 	rbit	r1, r3
 8003282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003286:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800328a:	6019      	str	r1, [r3, #0]
  return result;
 800328c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003290:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	fab3 f383 	clz	r3, r3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	f003 031f 	and.w	r3, r3, #31
 80032a6:	2101      	movs	r1, #1
 80032a8:	fa01 f303 	lsl.w	r3, r1, r3
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0a0      	beq.n	80031f4 <HAL_RCC_OscConfig+0x6a0>
 80032b2:	e08d      	b.n	80033d0 <HAL_RCC_OscConfig+0x87c>
 80032b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80032bc:	2201      	movs	r2, #1
 80032be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	fa93 f2a3 	rbit	r2, r3
 80032ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80032d6:	601a      	str	r2, [r3, #0]
  return result;
 80032d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032dc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80032e0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032e2:	fab3 f383 	clz	r3, r3
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	461a      	mov	r2, r3
 80032ea:	4b68      	ldr	r3, [pc, #416]	; (800348c <HAL_RCC_OscConfig+0x938>)
 80032ec:	4413      	add	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	461a      	mov	r2, r3
 80032f2:	2300      	movs	r3, #0
 80032f4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f6:	f7ff f903 	bl	8002500 <HAL_GetTick>
 80032fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032fe:	e00a      	b.n	8003316 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003300:	f7ff f8fe 	bl	8002500 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d902      	bls.n	8003316 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	f000 bc55 	b.w	8003bc0 <HAL_RCC_OscConfig+0x106c>
 8003316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800331e:	2202      	movs	r2, #2
 8003320:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003326:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	fa93 f2a3 	rbit	r2, r3
 8003330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003334:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003342:	2202      	movs	r2, #2
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	fa93 f2a3 	rbit	r2, r3
 8003354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003358:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003362:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003366:	2202      	movs	r2, #2
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	fa93 f2a3 	rbit	r2, r3
 8003378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003380:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003382:	4b41      	ldr	r3, [pc, #260]	; (8003488 <HAL_RCC_OscConfig+0x934>)
 8003384:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800338e:	2102      	movs	r1, #2
 8003390:	6019      	str	r1, [r3, #0]
 8003392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003396:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	fa93 f1a3 	rbit	r1, r3
 80033a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80033a8:	6019      	str	r1, [r3, #0]
  return result;
 80033aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ae:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	fab3 f383 	clz	r3, r3
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	f003 031f 	and.w	r3, r3, #31
 80033c4:	2101      	movs	r1, #1
 80033c6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d197      	bne.n	8003300 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 81a1 	beq.w	8003728 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033e6:	2300      	movs	r3, #0
 80033e8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ec:	4b26      	ldr	r3, [pc, #152]	; (8003488 <HAL_RCC_OscConfig+0x934>)
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d116      	bne.n	8003426 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033f8:	4b23      	ldr	r3, [pc, #140]	; (8003488 <HAL_RCC_OscConfig+0x934>)
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	4a22      	ldr	r2, [pc, #136]	; (8003488 <HAL_RCC_OscConfig+0x934>)
 80033fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003402:	61d3      	str	r3, [r2, #28]
 8003404:	4b20      	ldr	r3, [pc, #128]	; (8003488 <HAL_RCC_OscConfig+0x934>)
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800340c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003410:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800341e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003420:	2301      	movs	r3, #1
 8003422:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003426:	4b1a      	ldr	r3, [pc, #104]	; (8003490 <HAL_RCC_OscConfig+0x93c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342e:	2b00      	cmp	r3, #0
 8003430:	d11a      	bne.n	8003468 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003432:	4b17      	ldr	r3, [pc, #92]	; (8003490 <HAL_RCC_OscConfig+0x93c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a16      	ldr	r2, [pc, #88]	; (8003490 <HAL_RCC_OscConfig+0x93c>)
 8003438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800343c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800343e:	f7ff f85f 	bl	8002500 <HAL_GetTick>
 8003442:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003446:	e009      	b.n	800345c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003448:	f7ff f85a 	bl	8002500 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b64      	cmp	r3, #100	; 0x64
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e3b1      	b.n	8003bc0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345c:	4b0c      	ldr	r3, [pc, #48]	; (8003490 <HAL_RCC_OscConfig+0x93c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0ef      	beq.n	8003448 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d10d      	bne.n	8003494 <HAL_RCC_OscConfig+0x940>
 8003478:	4b03      	ldr	r3, [pc, #12]	; (8003488 <HAL_RCC_OscConfig+0x934>)
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	4a02      	ldr	r2, [pc, #8]	; (8003488 <HAL_RCC_OscConfig+0x934>)
 800347e:	f043 0301 	orr.w	r3, r3, #1
 8003482:	6213      	str	r3, [r2, #32]
 8003484:	e03c      	b.n	8003500 <HAL_RCC_OscConfig+0x9ac>
 8003486:	bf00      	nop
 8003488:	40021000 	.word	0x40021000
 800348c:	10908120 	.word	0x10908120
 8003490:	40007000 	.word	0x40007000
 8003494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003498:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10c      	bne.n	80034be <HAL_RCC_OscConfig+0x96a>
 80034a4:	4bc1      	ldr	r3, [pc, #772]	; (80037ac <HAL_RCC_OscConfig+0xc58>)
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	4ac0      	ldr	r2, [pc, #768]	; (80037ac <HAL_RCC_OscConfig+0xc58>)
 80034aa:	f023 0301 	bic.w	r3, r3, #1
 80034ae:	6213      	str	r3, [r2, #32]
 80034b0:	4bbe      	ldr	r3, [pc, #760]	; (80037ac <HAL_RCC_OscConfig+0xc58>)
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	4abd      	ldr	r2, [pc, #756]	; (80037ac <HAL_RCC_OscConfig+0xc58>)
 80034b6:	f023 0304 	bic.w	r3, r3, #4
 80034ba:	6213      	str	r3, [r2, #32]
 80034bc:	e020      	b.n	8003500 <HAL_RCC_OscConfig+0x9ac>
 80034be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	2b05      	cmp	r3, #5
 80034cc:	d10c      	bne.n	80034e8 <HAL_RCC_OscConfig+0x994>
 80034ce:	4bb7      	ldr	r3, [pc, #732]	; (80037ac <HAL_RCC_OscConfig+0xc58>)
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	4ab6      	ldr	r2, [pc, #728]	; (80037ac <HAL_RCC_OscConfig+0xc58>)
 80034d4:	f043 0304 	orr.w	r3, r3, #4
 80034d8:	6213      	str	r3, [r2, #32]
 80034da:	4bb4      	ldr	r3, [pc, #720]	; (80037ac <HAL_RCC_OscConfig+0xc58>)
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	4ab3      	ldr	r2, [pc, #716]	; (80037ac <HAL_RCC_OscConfig+0xc58>)
 80034e0:	f043 0301 	orr.w	r3, r3, #1
 80034e4:	6213      	str	r3, [r2, #32]
 80034e6:	e00b      	b.n	8003500 <HAL_RCC_OscConfig+0x9ac>
 80034e8:	4bb0      	ldr	r3, [pc, #704]	; (80037ac <HAL_RCC_OscConfig+0xc58>)
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	4aaf      	ldr	r2, [pc, #700]	; (80037ac <HAL_RCC_OscConfig+0xc58>)
 80034ee:	f023 0301 	bic.w	r3, r3, #1
 80034f2:	6213      	str	r3, [r2, #32]
 80034f4:	4bad      	ldr	r3, [pc, #692]	; (80037ac <HAL_RCC_OscConfig+0xc58>)
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	4aac      	ldr	r2, [pc, #688]	; (80037ac <HAL_RCC_OscConfig+0xc58>)
 80034fa:	f023 0304 	bic.w	r3, r3, #4
 80034fe:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003504:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 8081 	beq.w	8003614 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003512:	f7fe fff5 	bl	8002500 <HAL_GetTick>
 8003516:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800351a:	e00b      	b.n	8003534 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800351c:	f7fe fff0 	bl	8002500 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	f241 3288 	movw	r2, #5000	; 0x1388
 800352c:	4293      	cmp	r3, r2
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e345      	b.n	8003bc0 <HAL_RCC_OscConfig+0x106c>
 8003534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003538:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800353c:	2202      	movs	r2, #2
 800353e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003544:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	fa93 f2a3 	rbit	r2, r3
 800354e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003552:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003560:	2202      	movs	r2, #2
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003568:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	fa93 f2a3 	rbit	r2, r3
 8003572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003576:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800357a:	601a      	str	r2, [r3, #0]
  return result;
 800357c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003580:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003584:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003586:	fab3 f383 	clz	r3, r3
 800358a:	b2db      	uxtb	r3, r3
 800358c:	095b      	lsrs	r3, r3, #5
 800358e:	b2db      	uxtb	r3, r3
 8003590:	f043 0302 	orr.w	r3, r3, #2
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d102      	bne.n	80035a0 <HAL_RCC_OscConfig+0xa4c>
 800359a:	4b84      	ldr	r3, [pc, #528]	; (80037ac <HAL_RCC_OscConfig+0xc58>)
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	e013      	b.n	80035c8 <HAL_RCC_OscConfig+0xa74>
 80035a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80035a8:	2202      	movs	r2, #2
 80035aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	fa93 f2a3 	rbit	r2, r3
 80035ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035be:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	4b79      	ldr	r3, [pc, #484]	; (80037ac <HAL_RCC_OscConfig+0xc58>)
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035cc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80035d0:	2102      	movs	r1, #2
 80035d2:	6011      	str	r1, [r2, #0]
 80035d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035d8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80035dc:	6812      	ldr	r2, [r2, #0]
 80035de:	fa92 f1a2 	rbit	r1, r2
 80035e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035e6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80035ea:	6011      	str	r1, [r2, #0]
  return result;
 80035ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035f0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80035f4:	6812      	ldr	r2, [r2, #0]
 80035f6:	fab2 f282 	clz	r2, r2
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	f002 021f 	and.w	r2, r2, #31
 8003606:	2101      	movs	r1, #1
 8003608:	fa01 f202 	lsl.w	r2, r1, r2
 800360c:	4013      	ands	r3, r2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d084      	beq.n	800351c <HAL_RCC_OscConfig+0x9c8>
 8003612:	e07f      	b.n	8003714 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003614:	f7fe ff74 	bl	8002500 <HAL_GetTick>
 8003618:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800361c:	e00b      	b.n	8003636 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800361e:	f7fe ff6f 	bl	8002500 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	f241 3288 	movw	r2, #5000	; 0x1388
 800362e:	4293      	cmp	r3, r2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e2c4      	b.n	8003bc0 <HAL_RCC_OscConfig+0x106c>
 8003636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800363a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800363e:	2202      	movs	r2, #2
 8003640:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003646:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	fa93 f2a3 	rbit	r2, r3
 8003650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003654:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003662:	2202      	movs	r2, #2
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800366a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	fa93 f2a3 	rbit	r2, r3
 8003674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003678:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800367c:	601a      	str	r2, [r3, #0]
  return result;
 800367e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003682:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003686:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003688:	fab3 f383 	clz	r3, r3
 800368c:	b2db      	uxtb	r3, r3
 800368e:	095b      	lsrs	r3, r3, #5
 8003690:	b2db      	uxtb	r3, r3
 8003692:	f043 0302 	orr.w	r3, r3, #2
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d102      	bne.n	80036a2 <HAL_RCC_OscConfig+0xb4e>
 800369c:	4b43      	ldr	r3, [pc, #268]	; (80037ac <HAL_RCC_OscConfig+0xc58>)
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	e013      	b.n	80036ca <HAL_RCC_OscConfig+0xb76>
 80036a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80036aa:	2202      	movs	r2, #2
 80036ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	fa93 f2a3 	rbit	r2, r3
 80036bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	4b39      	ldr	r3, [pc, #228]	; (80037ac <HAL_RCC_OscConfig+0xc58>)
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036ce:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80036d2:	2102      	movs	r1, #2
 80036d4:	6011      	str	r1, [r2, #0]
 80036d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036da:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80036de:	6812      	ldr	r2, [r2, #0]
 80036e0:	fa92 f1a2 	rbit	r1, r2
 80036e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036e8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80036ec:	6011      	str	r1, [r2, #0]
  return result;
 80036ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036f2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80036f6:	6812      	ldr	r2, [r2, #0]
 80036f8:	fab2 f282 	clz	r2, r2
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	f002 021f 	and.w	r2, r2, #31
 8003708:	2101      	movs	r1, #1
 800370a:	fa01 f202 	lsl.w	r2, r1, r2
 800370e:	4013      	ands	r3, r2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d184      	bne.n	800361e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003714:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003718:	2b01      	cmp	r3, #1
 800371a:	d105      	bne.n	8003728 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800371c:	4b23      	ldr	r3, [pc, #140]	; (80037ac <HAL_RCC_OscConfig+0xc58>)
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	4a22      	ldr	r2, [pc, #136]	; (80037ac <HAL_RCC_OscConfig+0xc58>)
 8003722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003726:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800372c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 8242 	beq.w	8003bbe <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800373a:	4b1c      	ldr	r3, [pc, #112]	; (80037ac <HAL_RCC_OscConfig+0xc58>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 030c 	and.w	r3, r3, #12
 8003742:	2b08      	cmp	r3, #8
 8003744:	f000 8213 	beq.w	8003b6e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800374c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	2b02      	cmp	r3, #2
 8003756:	f040 8162 	bne.w	8003a1e <HAL_RCC_OscConfig+0xeca>
 800375a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003762:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003766:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	fa93 f2a3 	rbit	r2, r3
 8003776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800377a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800377e:	601a      	str	r2, [r3, #0]
  return result;
 8003780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003784:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003788:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800378a:	fab3 f383 	clz	r3, r3
 800378e:	b2db      	uxtb	r3, r3
 8003790:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003794:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	461a      	mov	r2, r3
 800379c:	2300      	movs	r3, #0
 800379e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a0:	f7fe feae 	bl	8002500 <HAL_GetTick>
 80037a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037a8:	e00c      	b.n	80037c4 <HAL_RCC_OscConfig+0xc70>
 80037aa:	bf00      	nop
 80037ac:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b0:	f7fe fea6 	bl	8002500 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e1fd      	b.n	8003bc0 <HAL_RCC_OscConfig+0x106c>
 80037c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80037cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	fa93 f2a3 	rbit	r2, r3
 80037e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80037e8:	601a      	str	r2, [r3, #0]
  return result;
 80037ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ee:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80037f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037f4:	fab3 f383 	clz	r3, r3
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b01      	cmp	r3, #1
 8003806:	d102      	bne.n	800380e <HAL_RCC_OscConfig+0xcba>
 8003808:	4bb0      	ldr	r3, [pc, #704]	; (8003acc <HAL_RCC_OscConfig+0xf78>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	e027      	b.n	800385e <HAL_RCC_OscConfig+0xd0a>
 800380e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003812:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003816:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800381a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003820:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	fa93 f2a3 	rbit	r2, r3
 800382a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800382e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003838:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800383c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003846:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	fa93 f2a3 	rbit	r2, r3
 8003850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003854:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	4b9c      	ldr	r3, [pc, #624]	; (8003acc <HAL_RCC_OscConfig+0xf78>)
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003862:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003866:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800386a:	6011      	str	r1, [r2, #0]
 800386c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003870:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003874:	6812      	ldr	r2, [r2, #0]
 8003876:	fa92 f1a2 	rbit	r1, r2
 800387a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800387e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003882:	6011      	str	r1, [r2, #0]
  return result;
 8003884:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003888:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800388c:	6812      	ldr	r2, [r2, #0]
 800388e:	fab2 f282 	clz	r2, r2
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	f042 0220 	orr.w	r2, r2, #32
 8003898:	b2d2      	uxtb	r2, r2
 800389a:	f002 021f 	and.w	r2, r2, #31
 800389e:	2101      	movs	r1, #1
 80038a0:	fa01 f202 	lsl.w	r2, r1, r2
 80038a4:	4013      	ands	r3, r2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d182      	bne.n	80037b0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038aa:	4b88      	ldr	r3, [pc, #544]	; (8003acc <HAL_RCC_OscConfig+0xf78>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80038be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	430b      	orrs	r3, r1
 80038cc:	497f      	ldr	r1, [pc, #508]	; (8003acc <HAL_RCC_OscConfig+0xf78>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	604b      	str	r3, [r1, #4]
 80038d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80038da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	fa93 f2a3 	rbit	r2, r3
 80038ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80038f6:	601a      	str	r2, [r3, #0]
  return result;
 80038f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038fc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003900:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003902:	fab3 f383 	clz	r3, r3
 8003906:	b2db      	uxtb	r3, r3
 8003908:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800390c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	461a      	mov	r2, r3
 8003914:	2301      	movs	r3, #1
 8003916:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003918:	f7fe fdf2 	bl	8002500 <HAL_GetTick>
 800391c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003920:	e009      	b.n	8003936 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003922:	f7fe fded 	bl	8002500 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e144      	b.n	8003bc0 <HAL_RCC_OscConfig+0x106c>
 8003936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800393a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800393e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003942:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003948:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	fa93 f2a3 	rbit	r2, r3
 8003952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003956:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800395a:	601a      	str	r2, [r3, #0]
  return result;
 800395c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003960:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003964:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003966:	fab3 f383 	clz	r3, r3
 800396a:	b2db      	uxtb	r3, r3
 800396c:	095b      	lsrs	r3, r3, #5
 800396e:	b2db      	uxtb	r3, r3
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b01      	cmp	r3, #1
 8003978:	d102      	bne.n	8003980 <HAL_RCC_OscConfig+0xe2c>
 800397a:	4b54      	ldr	r3, [pc, #336]	; (8003acc <HAL_RCC_OscConfig+0xf78>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	e027      	b.n	80039d0 <HAL_RCC_OscConfig+0xe7c>
 8003980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003984:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003988:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800398c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003992:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	fa93 f2a3 	rbit	r2, r3
 800399c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039aa:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80039ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	fa93 f2a3 	rbit	r2, r3
 80039c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	4b3f      	ldr	r3, [pc, #252]	; (8003acc <HAL_RCC_OscConfig+0xf78>)
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039d4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80039d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80039dc:	6011      	str	r1, [r2, #0]
 80039de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039e2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80039e6:	6812      	ldr	r2, [r2, #0]
 80039e8:	fa92 f1a2 	rbit	r1, r2
 80039ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039f0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80039f4:	6011      	str	r1, [r2, #0]
  return result;
 80039f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039fa:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	fab2 f282 	clz	r2, r2
 8003a04:	b2d2      	uxtb	r2, r2
 8003a06:	f042 0220 	orr.w	r2, r2, #32
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	f002 021f 	and.w	r2, r2, #31
 8003a10:	2101      	movs	r1, #1
 8003a12:	fa01 f202 	lsl.w	r2, r1, r2
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d082      	beq.n	8003922 <HAL_RCC_OscConfig+0xdce>
 8003a1c:	e0cf      	b.n	8003bbe <HAL_RCC_OscConfig+0x106a>
 8003a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a22:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003a26:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a30:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	fa93 f2a3 	rbit	r2, r3
 8003a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003a42:	601a      	str	r2, [r3, #0]
  return result;
 8003a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a48:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003a4c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a4e:	fab3 f383 	clz	r3, r3
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	461a      	mov	r2, r3
 8003a60:	2300      	movs	r3, #0
 8003a62:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a64:	f7fe fd4c 	bl	8002500 <HAL_GetTick>
 8003a68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a6c:	e009      	b.n	8003a82 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a6e:	f7fe fd47 	bl	8002500 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e09e      	b.n	8003bc0 <HAL_RCC_OscConfig+0x106c>
 8003a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a86:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003a8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a94:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	fa93 f2a3 	rbit	r2, r3
 8003a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003aa6:	601a      	str	r2, [r3, #0]
  return result;
 8003aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aac:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003ab0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ab2:	fab3 f383 	clz	r3, r3
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	095b      	lsrs	r3, r3, #5
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	f043 0301 	orr.w	r3, r3, #1
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d104      	bne.n	8003ad0 <HAL_RCC_OscConfig+0xf7c>
 8003ac6:	4b01      	ldr	r3, [pc, #4]	; (8003acc <HAL_RCC_OscConfig+0xf78>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	e029      	b.n	8003b20 <HAL_RCC_OscConfig+0xfcc>
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003ad8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003adc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	fa93 f2a3 	rbit	r2, r3
 8003aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003afa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003afe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b08:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	fa93 f2a3 	rbit	r2, r3
 8003b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b16:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	4b2b      	ldr	r3, [pc, #172]	; (8003bcc <HAL_RCC_OscConfig+0x1078>)
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b24:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003b28:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b2c:	6011      	str	r1, [r2, #0]
 8003b2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b32:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003b36:	6812      	ldr	r2, [r2, #0]
 8003b38:	fa92 f1a2 	rbit	r1, r2
 8003b3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b40:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003b44:	6011      	str	r1, [r2, #0]
  return result;
 8003b46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b4a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003b4e:	6812      	ldr	r2, [r2, #0]
 8003b50:	fab2 f282 	clz	r2, r2
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	f042 0220 	orr.w	r2, r2, #32
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	f002 021f 	and.w	r2, r2, #31
 8003b60:	2101      	movs	r1, #1
 8003b62:	fa01 f202 	lsl.w	r2, r1, r2
 8003b66:	4013      	ands	r3, r2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d180      	bne.n	8003a6e <HAL_RCC_OscConfig+0xf1a>
 8003b6c:	e027      	b.n	8003bbe <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d101      	bne.n	8003b82 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e01e      	b.n	8003bc0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b82:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <HAL_RCC_OscConfig+0x1078>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b8a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003b8e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d10b      	bne.n	8003bba <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003ba2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003ba6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d001      	beq.n	8003bbe <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40021000 	.word	0x40021000

08003bd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b09e      	sub	sp, #120	; 0x78
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e162      	b.n	8003eae <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003be8:	4b90      	ldr	r3, [pc, #576]	; (8003e2c <HAL_RCC_ClockConfig+0x25c>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d910      	bls.n	8003c18 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf6:	4b8d      	ldr	r3, [pc, #564]	; (8003e2c <HAL_RCC_ClockConfig+0x25c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f023 0207 	bic.w	r2, r3, #7
 8003bfe:	498b      	ldr	r1, [pc, #556]	; (8003e2c <HAL_RCC_ClockConfig+0x25c>)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c06:	4b89      	ldr	r3, [pc, #548]	; (8003e2c <HAL_RCC_ClockConfig+0x25c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d001      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e14a      	b.n	8003eae <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c24:	4b82      	ldr	r3, [pc, #520]	; (8003e30 <HAL_RCC_ClockConfig+0x260>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	497f      	ldr	r1, [pc, #508]	; (8003e30 <HAL_RCC_ClockConfig+0x260>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 80dc 	beq.w	8003dfc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d13c      	bne.n	8003cc6 <HAL_RCC_ClockConfig+0xf6>
 8003c4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c50:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c54:	fa93 f3a3 	rbit	r3, r3
 8003c58:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5c:	fab3 f383 	clz	r3, r3
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	f043 0301 	orr.w	r3, r3, #1
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d102      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xa6>
 8003c70:	4b6f      	ldr	r3, [pc, #444]	; (8003e30 <HAL_RCC_ClockConfig+0x260>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	e00f      	b.n	8003c96 <HAL_RCC_ClockConfig+0xc6>
 8003c76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c7a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c7e:	fa93 f3a3 	rbit	r3, r3
 8003c82:	667b      	str	r3, [r7, #100]	; 0x64
 8003c84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c88:	663b      	str	r3, [r7, #96]	; 0x60
 8003c8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c8c:	fa93 f3a3 	rbit	r3, r3
 8003c90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c92:	4b67      	ldr	r3, [pc, #412]	; (8003e30 <HAL_RCC_ClockConfig+0x260>)
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c9a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c9e:	fa92 f2a2 	rbit	r2, r2
 8003ca2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003ca4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ca6:	fab2 f282 	clz	r2, r2
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	f042 0220 	orr.w	r2, r2, #32
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	f002 021f 	and.w	r2, r2, #31
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d17b      	bne.n	8003dba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e0f3      	b.n	8003eae <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d13c      	bne.n	8003d48 <HAL_RCC_ClockConfig+0x178>
 8003cce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cd2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cd6:	fa93 f3a3 	rbit	r3, r3
 8003cda:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cde:	fab3 f383 	clz	r3, r3
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	095b      	lsrs	r3, r3, #5
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d102      	bne.n	8003cf8 <HAL_RCC_ClockConfig+0x128>
 8003cf2:	4b4f      	ldr	r3, [pc, #316]	; (8003e30 <HAL_RCC_ClockConfig+0x260>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	e00f      	b.n	8003d18 <HAL_RCC_ClockConfig+0x148>
 8003cf8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cfc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d00:	fa93 f3a3 	rbit	r3, r3
 8003d04:	647b      	str	r3, [r7, #68]	; 0x44
 8003d06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d0a:	643b      	str	r3, [r7, #64]	; 0x40
 8003d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d0e:	fa93 f3a3 	rbit	r3, r3
 8003d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d14:	4b46      	ldr	r3, [pc, #280]	; (8003e30 <HAL_RCC_ClockConfig+0x260>)
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d1c:	63ba      	str	r2, [r7, #56]	; 0x38
 8003d1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d20:	fa92 f2a2 	rbit	r2, r2
 8003d24:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003d26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d28:	fab2 f282 	clz	r2, r2
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	f042 0220 	orr.w	r2, r2, #32
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	f002 021f 	and.w	r2, r2, #31
 8003d38:	2101      	movs	r1, #1
 8003d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d3e:	4013      	ands	r3, r2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d13a      	bne.n	8003dba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e0b2      	b.n	8003eae <HAL_RCC_ClockConfig+0x2de>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4e:	fa93 f3a3 	rbit	r3, r3
 8003d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d56:	fab3 f383 	clz	r3, r3
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	095b      	lsrs	r3, r3, #5
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	f043 0301 	orr.w	r3, r3, #1
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d102      	bne.n	8003d70 <HAL_RCC_ClockConfig+0x1a0>
 8003d6a:	4b31      	ldr	r3, [pc, #196]	; (8003e30 <HAL_RCC_ClockConfig+0x260>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	e00d      	b.n	8003d8c <HAL_RCC_ClockConfig+0x1bc>
 8003d70:	2302      	movs	r3, #2
 8003d72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d76:	fa93 f3a3 	rbit	r3, r3
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	623b      	str	r3, [r7, #32]
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	fa93 f3a3 	rbit	r3, r3
 8003d86:	61fb      	str	r3, [r7, #28]
 8003d88:	4b29      	ldr	r3, [pc, #164]	; (8003e30 <HAL_RCC_ClockConfig+0x260>)
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	61ba      	str	r2, [r7, #24]
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	fa92 f2a2 	rbit	r2, r2
 8003d96:	617a      	str	r2, [r7, #20]
  return result;
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	fab2 f282 	clz	r2, r2
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	f042 0220 	orr.w	r2, r2, #32
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	f002 021f 	and.w	r2, r2, #31
 8003daa:	2101      	movs	r1, #1
 8003dac:	fa01 f202 	lsl.w	r2, r1, r2
 8003db0:	4013      	ands	r3, r2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e079      	b.n	8003eae <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dba:	4b1d      	ldr	r3, [pc, #116]	; (8003e30 <HAL_RCC_ClockConfig+0x260>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f023 0203 	bic.w	r2, r3, #3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	491a      	ldr	r1, [pc, #104]	; (8003e30 <HAL_RCC_ClockConfig+0x260>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dcc:	f7fe fb98 	bl	8002500 <HAL_GetTick>
 8003dd0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd2:	e00a      	b.n	8003dea <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dd4:	f7fe fb94 	bl	8002500 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e061      	b.n	8003eae <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dea:	4b11      	ldr	r3, [pc, #68]	; (8003e30 <HAL_RCC_ClockConfig+0x260>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f003 020c 	and.w	r2, r3, #12
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d1eb      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <HAL_RCC_ClockConfig+0x25c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d214      	bcs.n	8003e34 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e0a:	4b08      	ldr	r3, [pc, #32]	; (8003e2c <HAL_RCC_ClockConfig+0x25c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f023 0207 	bic.w	r2, r3, #7
 8003e12:	4906      	ldr	r1, [pc, #24]	; (8003e2c <HAL_RCC_ClockConfig+0x25c>)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e1a:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <HAL_RCC_ClockConfig+0x25c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d005      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e040      	b.n	8003eae <HAL_RCC_ClockConfig+0x2de>
 8003e2c:	40022000 	.word	0x40022000
 8003e30:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d008      	beq.n	8003e52 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e40:	4b1d      	ldr	r3, [pc, #116]	; (8003eb8 <HAL_RCC_ClockConfig+0x2e8>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	491a      	ldr	r1, [pc, #104]	; (8003eb8 <HAL_RCC_ClockConfig+0x2e8>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d009      	beq.n	8003e72 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e5e:	4b16      	ldr	r3, [pc, #88]	; (8003eb8 <HAL_RCC_ClockConfig+0x2e8>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4912      	ldr	r1, [pc, #72]	; (8003eb8 <HAL_RCC_ClockConfig+0x2e8>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e72:	f000 f829 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8003e76:	4601      	mov	r1, r0
 8003e78:	4b0f      	ldr	r3, [pc, #60]	; (8003eb8 <HAL_RCC_ClockConfig+0x2e8>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e80:	22f0      	movs	r2, #240	; 0xf0
 8003e82:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	fa92 f2a2 	rbit	r2, r2
 8003e8a:	60fa      	str	r2, [r7, #12]
  return result;
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	fab2 f282 	clz	r2, r2
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	40d3      	lsrs	r3, r2
 8003e96:	4a09      	ldr	r2, [pc, #36]	; (8003ebc <HAL_RCC_ClockConfig+0x2ec>)
 8003e98:	5cd3      	ldrb	r3, [r2, r3]
 8003e9a:	fa21 f303 	lsr.w	r3, r1, r3
 8003e9e:	4a08      	ldr	r2, [pc, #32]	; (8003ec0 <HAL_RCC_ClockConfig+0x2f0>)
 8003ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003ea2:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <HAL_RCC_ClockConfig+0x2f4>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fe fae6 	bl	8002478 <HAL_InitTick>
  
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3778      	adds	r7, #120	; 0x78
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	08006788 	.word	0x08006788
 8003ec0:	20000000 	.word	0x20000000
 8003ec4:	20000004 	.word	0x20000004

08003ec8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b08b      	sub	sp, #44	; 0x2c
 8003ecc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61fb      	str	r3, [r7, #28]
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61bb      	str	r3, [r7, #24]
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eda:	2300      	movs	r3, #0
 8003edc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003ee2:	4b29      	ldr	r3, [pc, #164]	; (8003f88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	f003 030c 	and.w	r3, r3, #12
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d002      	beq.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x30>
 8003ef2:	2b08      	cmp	r3, #8
 8003ef4:	d003      	beq.n	8003efe <HAL_RCC_GetSysClockFreq+0x36>
 8003ef6:	e03c      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ef8:	4b24      	ldr	r3, [pc, #144]	; (8003f8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003efa:	623b      	str	r3, [r7, #32]
      break;
 8003efc:	e03c      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003f04:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003f08:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	fa92 f2a2 	rbit	r2, r2
 8003f10:	607a      	str	r2, [r7, #4]
  return result;
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	fab2 f282 	clz	r2, r2
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	40d3      	lsrs	r3, r2
 8003f1c:	4a1c      	ldr	r2, [pc, #112]	; (8003f90 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f1e:	5cd3      	ldrb	r3, [r2, r3]
 8003f20:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003f22:	4b19      	ldr	r3, [pc, #100]	; (8003f88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	220f      	movs	r2, #15
 8003f2c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	fa92 f2a2 	rbit	r2, r2
 8003f34:	60fa      	str	r2, [r7, #12]
  return result;
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	fab2 f282 	clz	r2, r2
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	40d3      	lsrs	r3, r2
 8003f40:	4a14      	ldr	r2, [pc, #80]	; (8003f94 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003f42:	5cd3      	ldrb	r3, [r2, r3]
 8003f44:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d008      	beq.n	8003f62 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f50:	4a0e      	ldr	r2, [pc, #56]	; (8003f8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	fb02 f303 	mul.w	r3, r2, r3
 8003f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f60:	e004      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	4a0c      	ldr	r2, [pc, #48]	; (8003f98 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003f66:	fb02 f303 	mul.w	r3, r2, r3
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	623b      	str	r3, [r7, #32]
      break;
 8003f70:	e002      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f72:	4b06      	ldr	r3, [pc, #24]	; (8003f8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f74:	623b      	str	r3, [r7, #32]
      break;
 8003f76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f78:	6a3b      	ldr	r3, [r7, #32]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	372c      	adds	r7, #44	; 0x2c
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	007a1200 	.word	0x007a1200
 8003f90:	080067a0 	.word	0x080067a0
 8003f94:	080067b0 	.word	0x080067b0
 8003f98:	003d0900 	.word	0x003d0900

08003f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fa0:	4b03      	ldr	r3, [pc, #12]	; (8003fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	20000000 	.word	0x20000000

08003fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003fba:	f7ff ffef 	bl	8003f9c <HAL_RCC_GetHCLKFreq>
 8003fbe:	4601      	mov	r1, r0
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fc8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003fcc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	fa92 f2a2 	rbit	r2, r2
 8003fd4:	603a      	str	r2, [r7, #0]
  return result;
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	fab2 f282 	clz	r2, r2
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	40d3      	lsrs	r3, r2
 8003fe0:	4a04      	ldr	r2, [pc, #16]	; (8003ff4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003fe2:	5cd3      	ldrb	r3, [r2, r3]
 8003fe4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	08006798 	.word	0x08006798

08003ff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003ffe:	f7ff ffcd 	bl	8003f9c <HAL_RCC_GetHCLKFreq>
 8004002:	4601      	mov	r1, r0
 8004004:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800400c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004010:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	fa92 f2a2 	rbit	r2, r2
 8004018:	603a      	str	r2, [r7, #0]
  return result;
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	fab2 f282 	clz	r2, r2
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	40d3      	lsrs	r3, r2
 8004024:	4a04      	ldr	r2, [pc, #16]	; (8004038 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004026:	5cd3      	ldrb	r3, [r2, r3]
 8004028:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800402c:	4618      	mov	r0, r3
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40021000 	.word	0x40021000
 8004038:	08006798 	.word	0x08006798

0800403c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b092      	sub	sp, #72	; 0x48
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004044:	2300      	movs	r3, #0
 8004046:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800404c:	2300      	movs	r3, #0
 800404e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 80cd 	beq.w	80041fa <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004060:	4b86      	ldr	r3, [pc, #536]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10e      	bne.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800406c:	4b83      	ldr	r3, [pc, #524]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800406e:	69db      	ldr	r3, [r3, #28]
 8004070:	4a82      	ldr	r2, [pc, #520]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004076:	61d3      	str	r3, [r2, #28]
 8004078:	4b80      	ldr	r3, [pc, #512]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004080:	60bb      	str	r3, [r7, #8]
 8004082:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004084:	2301      	movs	r3, #1
 8004086:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800408a:	4b7d      	ldr	r3, [pc, #500]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004092:	2b00      	cmp	r3, #0
 8004094:	d118      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004096:	4b7a      	ldr	r3, [pc, #488]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a79      	ldr	r2, [pc, #484]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800409c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040a0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040a2:	f7fe fa2d 	bl	8002500 <HAL_GetTick>
 80040a6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a8:	e008      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040aa:	f7fe fa29 	bl	8002500 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b64      	cmp	r3, #100	; 0x64
 80040b6:	d901      	bls.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e0db      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040bc:	4b70      	ldr	r3, [pc, #448]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0f0      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040c8:	4b6c      	ldr	r3, [pc, #432]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d07d      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d076      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040e6:	4b65      	ldr	r3, [pc, #404]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040f4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f8:	fa93 f3a3 	rbit	r3, r3
 80040fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80040fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004100:	fab3 f383 	clz	r3, r3
 8004104:	b2db      	uxtb	r3, r3
 8004106:	461a      	mov	r2, r3
 8004108:	4b5e      	ldr	r3, [pc, #376]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800410a:	4413      	add	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	461a      	mov	r2, r3
 8004110:	2301      	movs	r3, #1
 8004112:	6013      	str	r3, [r2, #0]
 8004114:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004118:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411c:	fa93 f3a3 	rbit	r3, r3
 8004120:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004124:	fab3 f383 	clz	r3, r3
 8004128:	b2db      	uxtb	r3, r3
 800412a:	461a      	mov	r2, r3
 800412c:	4b55      	ldr	r3, [pc, #340]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800412e:	4413      	add	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	461a      	mov	r2, r3
 8004134:	2300      	movs	r3, #0
 8004136:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004138:	4a50      	ldr	r2, [pc, #320]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800413a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800413c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800413e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d045      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004148:	f7fe f9da 	bl	8002500 <HAL_GetTick>
 800414c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800414e:	e00a      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004150:	f7fe f9d6 	bl	8002500 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	f241 3288 	movw	r2, #5000	; 0x1388
 800415e:	4293      	cmp	r3, r2
 8004160:	d901      	bls.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e086      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004166:	2302      	movs	r3, #2
 8004168:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416c:	fa93 f3a3 	rbit	r3, r3
 8004170:	627b      	str	r3, [r7, #36]	; 0x24
 8004172:	2302      	movs	r3, #2
 8004174:	623b      	str	r3, [r7, #32]
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	fa93 f3a3 	rbit	r3, r3
 800417c:	61fb      	str	r3, [r7, #28]
  return result;
 800417e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004180:	fab3 f383 	clz	r3, r3
 8004184:	b2db      	uxtb	r3, r3
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	b2db      	uxtb	r3, r3
 800418a:	f043 0302 	orr.w	r3, r3, #2
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d102      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004194:	4b39      	ldr	r3, [pc, #228]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	e007      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800419a:	2302      	movs	r3, #2
 800419c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	fa93 f3a3 	rbit	r3, r3
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	4b35      	ldr	r3, [pc, #212]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	2202      	movs	r2, #2
 80041ac:	613a      	str	r2, [r7, #16]
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	fa92 f2a2 	rbit	r2, r2
 80041b4:	60fa      	str	r2, [r7, #12]
  return result;
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	fab2 f282 	clz	r2, r2
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	f002 021f 	and.w	r2, r2, #31
 80041c8:	2101      	movs	r1, #1
 80041ca:	fa01 f202 	lsl.w	r2, r1, r2
 80041ce:	4013      	ands	r3, r2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0bd      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80041d4:	4b29      	ldr	r3, [pc, #164]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	4926      	ldr	r1, [pc, #152]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d105      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041ee:	4b23      	ldr	r3, [pc, #140]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	4a22      	ldr	r2, [pc, #136]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041f8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d008      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004206:	4b1d      	ldr	r3, [pc, #116]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420a:	f023 0203 	bic.w	r2, r3, #3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	491a      	ldr	r1, [pc, #104]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004214:	4313      	orrs	r3, r2
 8004216:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0320 	and.w	r3, r3, #32
 8004220:	2b00      	cmp	r3, #0
 8004222:	d008      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004224:	4b15      	ldr	r3, [pc, #84]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004228:	f023 0210 	bic.w	r2, r3, #16
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	4912      	ldr	r1, [pc, #72]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004232:	4313      	orrs	r3, r2
 8004234:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800423e:	2b00      	cmp	r3, #0
 8004240:	d008      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004242:	4b0e      	ldr	r3, [pc, #56]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004246:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	490b      	ldr	r1, [pc, #44]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004250:	4313      	orrs	r3, r2
 8004252:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d008      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004260:	4b06      	ldr	r3, [pc, #24]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	4903      	ldr	r1, [pc, #12]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800426e:	4313      	orrs	r3, r2
 8004270:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3748      	adds	r7, #72	; 0x48
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40021000 	.word	0x40021000
 8004280:	40007000 	.word	0x40007000
 8004284:	10908100 	.word	0x10908100

08004288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e049      	b.n	800432e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7fd fdb2 	bl	8001e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3304      	adds	r3, #4
 80042c4:	4619      	mov	r1, r3
 80042c6:	4610      	mov	r0, r2
 80042c8:	f000 fb60 	bl	800498c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e049      	b.n	80043dc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d106      	bne.n	8004362 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f841 	bl	80043e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2202      	movs	r2, #2
 8004366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	3304      	adds	r3, #4
 8004372:	4619      	mov	r1, r3
 8004374:	4610      	mov	r0, r2
 8004376:	f000 fb09 	bl	800498c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d109      	bne.n	800441c <HAL_TIM_PWM_Start+0x24>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b01      	cmp	r3, #1
 8004412:	bf14      	ite	ne
 8004414:	2301      	movne	r3, #1
 8004416:	2300      	moveq	r3, #0
 8004418:	b2db      	uxtb	r3, r3
 800441a:	e03c      	b.n	8004496 <HAL_TIM_PWM_Start+0x9e>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	2b04      	cmp	r3, #4
 8004420:	d109      	bne.n	8004436 <HAL_TIM_PWM_Start+0x3e>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b01      	cmp	r3, #1
 800442c:	bf14      	ite	ne
 800442e:	2301      	movne	r3, #1
 8004430:	2300      	moveq	r3, #0
 8004432:	b2db      	uxtb	r3, r3
 8004434:	e02f      	b.n	8004496 <HAL_TIM_PWM_Start+0x9e>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b08      	cmp	r3, #8
 800443a:	d109      	bne.n	8004450 <HAL_TIM_PWM_Start+0x58>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b01      	cmp	r3, #1
 8004446:	bf14      	ite	ne
 8004448:	2301      	movne	r3, #1
 800444a:	2300      	moveq	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	e022      	b.n	8004496 <HAL_TIM_PWM_Start+0x9e>
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	2b0c      	cmp	r3, #12
 8004454:	d109      	bne.n	800446a <HAL_TIM_PWM_Start+0x72>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b01      	cmp	r3, #1
 8004460:	bf14      	ite	ne
 8004462:	2301      	movne	r3, #1
 8004464:	2300      	moveq	r3, #0
 8004466:	b2db      	uxtb	r3, r3
 8004468:	e015      	b.n	8004496 <HAL_TIM_PWM_Start+0x9e>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b10      	cmp	r3, #16
 800446e:	d109      	bne.n	8004484 <HAL_TIM_PWM_Start+0x8c>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b01      	cmp	r3, #1
 800447a:	bf14      	ite	ne
 800447c:	2301      	movne	r3, #1
 800447e:	2300      	moveq	r3, #0
 8004480:	b2db      	uxtb	r3, r3
 8004482:	e008      	b.n	8004496 <HAL_TIM_PWM_Start+0x9e>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b01      	cmp	r3, #1
 800448e:	bf14      	ite	ne
 8004490:	2301      	movne	r3, #1
 8004492:	2300      	moveq	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e088      	b.n	80045b0 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d104      	bne.n	80044ae <HAL_TIM_PWM_Start+0xb6>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044ac:	e023      	b.n	80044f6 <HAL_TIM_PWM_Start+0xfe>
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d104      	bne.n	80044be <HAL_TIM_PWM_Start+0xc6>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044bc:	e01b      	b.n	80044f6 <HAL_TIM_PWM_Start+0xfe>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d104      	bne.n	80044ce <HAL_TIM_PWM_Start+0xd6>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2202      	movs	r2, #2
 80044c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044cc:	e013      	b.n	80044f6 <HAL_TIM_PWM_Start+0xfe>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b0c      	cmp	r3, #12
 80044d2:	d104      	bne.n	80044de <HAL_TIM_PWM_Start+0xe6>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044dc:	e00b      	b.n	80044f6 <HAL_TIM_PWM_Start+0xfe>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b10      	cmp	r3, #16
 80044e2:	d104      	bne.n	80044ee <HAL_TIM_PWM_Start+0xf6>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044ec:	e003      	b.n	80044f6 <HAL_TIM_PWM_Start+0xfe>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2202      	movs	r2, #2
 80044f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2201      	movs	r2, #1
 80044fc:	6839      	ldr	r1, [r7, #0]
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fdfc 	bl	80050fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a2b      	ldr	r2, [pc, #172]	; (80045b8 <HAL_TIM_PWM_Start+0x1c0>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d00e      	beq.n	800452c <HAL_TIM_PWM_Start+0x134>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a2a      	ldr	r2, [pc, #168]	; (80045bc <HAL_TIM_PWM_Start+0x1c4>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d009      	beq.n	800452c <HAL_TIM_PWM_Start+0x134>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a28      	ldr	r2, [pc, #160]	; (80045c0 <HAL_TIM_PWM_Start+0x1c8>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d004      	beq.n	800452c <HAL_TIM_PWM_Start+0x134>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a27      	ldr	r2, [pc, #156]	; (80045c4 <HAL_TIM_PWM_Start+0x1cc>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d101      	bne.n	8004530 <HAL_TIM_PWM_Start+0x138>
 800452c:	2301      	movs	r3, #1
 800452e:	e000      	b.n	8004532 <HAL_TIM_PWM_Start+0x13a>
 8004530:	2300      	movs	r3, #0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d007      	beq.n	8004546 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004544:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a1b      	ldr	r2, [pc, #108]	; (80045b8 <HAL_TIM_PWM_Start+0x1c0>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d00e      	beq.n	800456e <HAL_TIM_PWM_Start+0x176>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004558:	d009      	beq.n	800456e <HAL_TIM_PWM_Start+0x176>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a1a      	ldr	r2, [pc, #104]	; (80045c8 <HAL_TIM_PWM_Start+0x1d0>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d004      	beq.n	800456e <HAL_TIM_PWM_Start+0x176>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a14      	ldr	r2, [pc, #80]	; (80045bc <HAL_TIM_PWM_Start+0x1c4>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d115      	bne.n	800459a <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	4b15      	ldr	r3, [pc, #84]	; (80045cc <HAL_TIM_PWM_Start+0x1d4>)
 8004576:	4013      	ands	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2b06      	cmp	r3, #6
 800457e:	d015      	beq.n	80045ac <HAL_TIM_PWM_Start+0x1b4>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004586:	d011      	beq.n	80045ac <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004598:	e008      	b.n	80045ac <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f042 0201 	orr.w	r2, r2, #1
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	e000      	b.n	80045ae <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40012c00 	.word	0x40012c00
 80045bc:	40014000 	.word	0x40014000
 80045c0:	40014400 	.word	0x40014400
 80045c4:	40014800 	.word	0x40014800
 80045c8:	40000400 	.word	0x40000400
 80045cc:	00010007 	.word	0x00010007

080045d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045dc:	2300      	movs	r3, #0
 80045de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d101      	bne.n	80045ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045ea:	2302      	movs	r3, #2
 80045ec:	e0ff      	b.n	80047ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b14      	cmp	r3, #20
 80045fa:	f200 80f0 	bhi.w	80047de <HAL_TIM_PWM_ConfigChannel+0x20e>
 80045fe:	a201      	add	r2, pc, #4	; (adr r2, 8004604 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004604:	08004659 	.word	0x08004659
 8004608:	080047df 	.word	0x080047df
 800460c:	080047df 	.word	0x080047df
 8004610:	080047df 	.word	0x080047df
 8004614:	08004699 	.word	0x08004699
 8004618:	080047df 	.word	0x080047df
 800461c:	080047df 	.word	0x080047df
 8004620:	080047df 	.word	0x080047df
 8004624:	080046db 	.word	0x080046db
 8004628:	080047df 	.word	0x080047df
 800462c:	080047df 	.word	0x080047df
 8004630:	080047df 	.word	0x080047df
 8004634:	0800471b 	.word	0x0800471b
 8004638:	080047df 	.word	0x080047df
 800463c:	080047df 	.word	0x080047df
 8004640:	080047df 	.word	0x080047df
 8004644:	0800475d 	.word	0x0800475d
 8004648:	080047df 	.word	0x080047df
 800464c:	080047df 	.word	0x080047df
 8004650:	080047df 	.word	0x080047df
 8004654:	0800479d 	.word	0x0800479d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68b9      	ldr	r1, [r7, #8]
 800465e:	4618      	mov	r0, r3
 8004660:	f000 fa0c 	bl	8004a7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699a      	ldr	r2, [r3, #24]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0208 	orr.w	r2, r2, #8
 8004672:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0204 	bic.w	r2, r2, #4
 8004682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6999      	ldr	r1, [r3, #24]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	691a      	ldr	r2, [r3, #16]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	619a      	str	r2, [r3, #24]
      break;
 8004696:	e0a5      	b.n	80047e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68b9      	ldr	r1, [r7, #8]
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 fa72 	bl	8004b88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699a      	ldr	r2, [r3, #24]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699a      	ldr	r2, [r3, #24]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6999      	ldr	r1, [r3, #24]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	021a      	lsls	r2, r3, #8
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	619a      	str	r2, [r3, #24]
      break;
 80046d8:	e084      	b.n	80047e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68b9      	ldr	r1, [r7, #8]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 fad1 	bl	8004c88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	69da      	ldr	r2, [r3, #28]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f042 0208 	orr.w	r2, r2, #8
 80046f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69da      	ldr	r2, [r3, #28]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0204 	bic.w	r2, r2, #4
 8004704:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69d9      	ldr	r1, [r3, #28]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	691a      	ldr	r2, [r3, #16]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	61da      	str	r2, [r3, #28]
      break;
 8004718:	e064      	b.n	80047e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68b9      	ldr	r1, [r7, #8]
 8004720:	4618      	mov	r0, r3
 8004722:	f000 fb2f 	bl	8004d84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	69da      	ldr	r2, [r3, #28]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	69da      	ldr	r2, [r3, #28]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69d9      	ldr	r1, [r3, #28]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	021a      	lsls	r2, r3, #8
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	61da      	str	r2, [r3, #28]
      break;
 800475a:	e043      	b.n	80047e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68b9      	ldr	r1, [r7, #8]
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fb72 	bl	8004e4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0208 	orr.w	r2, r2, #8
 8004776:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0204 	bic.w	r2, r2, #4
 8004786:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	691a      	ldr	r2, [r3, #16]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800479a:	e023      	b.n	80047e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68b9      	ldr	r1, [r7, #8]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 fbb0 	bl	8004f08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	021a      	lsls	r2, r3, #8
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80047dc:	e002      	b.n	80047e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	75fb      	strb	r3, [r7, #23]
      break;
 80047e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop

080047f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004802:	2300      	movs	r3, #0
 8004804:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_TIM_ConfigClockSource+0x1c>
 8004810:	2302      	movs	r3, #2
 8004812:	e0b6      	b.n	8004982 <HAL_TIM_ConfigClockSource+0x18a>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004832:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800483e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004850:	d03e      	beq.n	80048d0 <HAL_TIM_ConfigClockSource+0xd8>
 8004852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004856:	f200 8087 	bhi.w	8004968 <HAL_TIM_ConfigClockSource+0x170>
 800485a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800485e:	f000 8086 	beq.w	800496e <HAL_TIM_ConfigClockSource+0x176>
 8004862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004866:	d87f      	bhi.n	8004968 <HAL_TIM_ConfigClockSource+0x170>
 8004868:	2b70      	cmp	r3, #112	; 0x70
 800486a:	d01a      	beq.n	80048a2 <HAL_TIM_ConfigClockSource+0xaa>
 800486c:	2b70      	cmp	r3, #112	; 0x70
 800486e:	d87b      	bhi.n	8004968 <HAL_TIM_ConfigClockSource+0x170>
 8004870:	2b60      	cmp	r3, #96	; 0x60
 8004872:	d050      	beq.n	8004916 <HAL_TIM_ConfigClockSource+0x11e>
 8004874:	2b60      	cmp	r3, #96	; 0x60
 8004876:	d877      	bhi.n	8004968 <HAL_TIM_ConfigClockSource+0x170>
 8004878:	2b50      	cmp	r3, #80	; 0x50
 800487a:	d03c      	beq.n	80048f6 <HAL_TIM_ConfigClockSource+0xfe>
 800487c:	2b50      	cmp	r3, #80	; 0x50
 800487e:	d873      	bhi.n	8004968 <HAL_TIM_ConfigClockSource+0x170>
 8004880:	2b40      	cmp	r3, #64	; 0x40
 8004882:	d058      	beq.n	8004936 <HAL_TIM_ConfigClockSource+0x13e>
 8004884:	2b40      	cmp	r3, #64	; 0x40
 8004886:	d86f      	bhi.n	8004968 <HAL_TIM_ConfigClockSource+0x170>
 8004888:	2b30      	cmp	r3, #48	; 0x30
 800488a:	d064      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0x15e>
 800488c:	2b30      	cmp	r3, #48	; 0x30
 800488e:	d86b      	bhi.n	8004968 <HAL_TIM_ConfigClockSource+0x170>
 8004890:	2b20      	cmp	r3, #32
 8004892:	d060      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0x15e>
 8004894:	2b20      	cmp	r3, #32
 8004896:	d867      	bhi.n	8004968 <HAL_TIM_ConfigClockSource+0x170>
 8004898:	2b00      	cmp	r3, #0
 800489a:	d05c      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0x15e>
 800489c:	2b10      	cmp	r3, #16
 800489e:	d05a      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0x15e>
 80048a0:	e062      	b.n	8004968 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6818      	ldr	r0, [r3, #0]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	6899      	ldr	r1, [r3, #8]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f000 fc03 	bl	80050bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	609a      	str	r2, [r3, #8]
      break;
 80048ce:	e04f      	b.n	8004970 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6818      	ldr	r0, [r3, #0]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	6899      	ldr	r1, [r3, #8]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f000 fbec 	bl	80050bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048f2:	609a      	str	r2, [r3, #8]
      break;
 80048f4:	e03c      	b.n	8004970 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6818      	ldr	r0, [r3, #0]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	6859      	ldr	r1, [r3, #4]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	461a      	mov	r2, r3
 8004904:	f000 fb60 	bl	8004fc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2150      	movs	r1, #80	; 0x50
 800490e:	4618      	mov	r0, r3
 8004910:	f000 fbb9 	bl	8005086 <TIM_ITRx_SetConfig>
      break;
 8004914:	e02c      	b.n	8004970 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6818      	ldr	r0, [r3, #0]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	6859      	ldr	r1, [r3, #4]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	461a      	mov	r2, r3
 8004924:	f000 fb7f 	bl	8005026 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2160      	movs	r1, #96	; 0x60
 800492e:	4618      	mov	r0, r3
 8004930:	f000 fba9 	bl	8005086 <TIM_ITRx_SetConfig>
      break;
 8004934:	e01c      	b.n	8004970 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	6859      	ldr	r1, [r3, #4]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	461a      	mov	r2, r3
 8004944:	f000 fb40 	bl	8004fc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2140      	movs	r1, #64	; 0x40
 800494e:	4618      	mov	r0, r3
 8004950:	f000 fb99 	bl	8005086 <TIM_ITRx_SetConfig>
      break;
 8004954:	e00c      	b.n	8004970 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4619      	mov	r1, r3
 8004960:	4610      	mov	r0, r2
 8004962:	f000 fb90 	bl	8005086 <TIM_ITRx_SetConfig>
      break;
 8004966:	e003      	b.n	8004970 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	73fb      	strb	r3, [r7, #15]
      break;
 800496c:	e000      	b.n	8004970 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800496e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004980:	7bfb      	ldrb	r3, [r7, #15]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
	...

0800498c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a32      	ldr	r2, [pc, #200]	; (8004a68 <TIM_Base_SetConfig+0xdc>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d007      	beq.n	80049b4 <TIM_Base_SetConfig+0x28>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049aa:	d003      	beq.n	80049b4 <TIM_Base_SetConfig+0x28>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a2f      	ldr	r2, [pc, #188]	; (8004a6c <TIM_Base_SetConfig+0xe0>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d108      	bne.n	80049c6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a27      	ldr	r2, [pc, #156]	; (8004a68 <TIM_Base_SetConfig+0xdc>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d013      	beq.n	80049f6 <TIM_Base_SetConfig+0x6a>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d4:	d00f      	beq.n	80049f6 <TIM_Base_SetConfig+0x6a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a24      	ldr	r2, [pc, #144]	; (8004a6c <TIM_Base_SetConfig+0xe0>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d00b      	beq.n	80049f6 <TIM_Base_SetConfig+0x6a>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a23      	ldr	r2, [pc, #140]	; (8004a70 <TIM_Base_SetConfig+0xe4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d007      	beq.n	80049f6 <TIM_Base_SetConfig+0x6a>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a22      	ldr	r2, [pc, #136]	; (8004a74 <TIM_Base_SetConfig+0xe8>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d003      	beq.n	80049f6 <TIM_Base_SetConfig+0x6a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a21      	ldr	r2, [pc, #132]	; (8004a78 <TIM_Base_SetConfig+0xec>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d108      	bne.n	8004a08 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a0e      	ldr	r2, [pc, #56]	; (8004a68 <TIM_Base_SetConfig+0xdc>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d00b      	beq.n	8004a4c <TIM_Base_SetConfig+0xc0>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a0e      	ldr	r2, [pc, #56]	; (8004a70 <TIM_Base_SetConfig+0xe4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d007      	beq.n	8004a4c <TIM_Base_SetConfig+0xc0>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a0d      	ldr	r2, [pc, #52]	; (8004a74 <TIM_Base_SetConfig+0xe8>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d003      	beq.n	8004a4c <TIM_Base_SetConfig+0xc0>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a0c      	ldr	r2, [pc, #48]	; (8004a78 <TIM_Base_SetConfig+0xec>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d103      	bne.n	8004a54 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	691a      	ldr	r2, [r3, #16]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	615a      	str	r2, [r3, #20]
}
 8004a5a:	bf00      	nop
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40012c00 	.word	0x40012c00
 8004a6c:	40000400 	.word	0x40000400
 8004a70:	40014000 	.word	0x40014000
 8004a74:	40014400 	.word	0x40014400
 8004a78:	40014800 	.word	0x40014800

08004a7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	f023 0201 	bic.w	r2, r3, #1
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f023 0303 	bic.w	r3, r3, #3
 8004ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f023 0302 	bic.w	r3, r3, #2
 8004ac8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a28      	ldr	r2, [pc, #160]	; (8004b78 <TIM_OC1_SetConfig+0xfc>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d00b      	beq.n	8004af4 <TIM_OC1_SetConfig+0x78>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a27      	ldr	r2, [pc, #156]	; (8004b7c <TIM_OC1_SetConfig+0x100>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d007      	beq.n	8004af4 <TIM_OC1_SetConfig+0x78>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a26      	ldr	r2, [pc, #152]	; (8004b80 <TIM_OC1_SetConfig+0x104>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d003      	beq.n	8004af4 <TIM_OC1_SetConfig+0x78>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a25      	ldr	r2, [pc, #148]	; (8004b84 <TIM_OC1_SetConfig+0x108>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d10c      	bne.n	8004b0e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f023 0308 	bic.w	r3, r3, #8
 8004afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f023 0304 	bic.w	r3, r3, #4
 8004b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a19      	ldr	r2, [pc, #100]	; (8004b78 <TIM_OC1_SetConfig+0xfc>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d00b      	beq.n	8004b2e <TIM_OC1_SetConfig+0xb2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a18      	ldr	r2, [pc, #96]	; (8004b7c <TIM_OC1_SetConfig+0x100>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d007      	beq.n	8004b2e <TIM_OC1_SetConfig+0xb2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a17      	ldr	r2, [pc, #92]	; (8004b80 <TIM_OC1_SetConfig+0x104>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d003      	beq.n	8004b2e <TIM_OC1_SetConfig+0xb2>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a16      	ldr	r2, [pc, #88]	; (8004b84 <TIM_OC1_SetConfig+0x108>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d111      	bne.n	8004b52 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	621a      	str	r2, [r3, #32]
}
 8004b6c:	bf00      	nop
 8004b6e:	371c      	adds	r7, #28
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	40012c00 	.word	0x40012c00
 8004b7c:	40014000 	.word	0x40014000
 8004b80:	40014400 	.word	0x40014400
 8004b84:	40014800 	.word	0x40014800

08004b88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	f023 0210 	bic.w	r2, r3, #16
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	021b      	lsls	r3, r3, #8
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f023 0320 	bic.w	r3, r3, #32
 8004bd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	011b      	lsls	r3, r3, #4
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a24      	ldr	r2, [pc, #144]	; (8004c78 <TIM_OC2_SetConfig+0xf0>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d10d      	bne.n	8004c08 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a1b      	ldr	r2, [pc, #108]	; (8004c78 <TIM_OC2_SetConfig+0xf0>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d00b      	beq.n	8004c28 <TIM_OC2_SetConfig+0xa0>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a1a      	ldr	r2, [pc, #104]	; (8004c7c <TIM_OC2_SetConfig+0xf4>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d007      	beq.n	8004c28 <TIM_OC2_SetConfig+0xa0>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a19      	ldr	r2, [pc, #100]	; (8004c80 <TIM_OC2_SetConfig+0xf8>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d003      	beq.n	8004c28 <TIM_OC2_SetConfig+0xa0>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a18      	ldr	r2, [pc, #96]	; (8004c84 <TIM_OC2_SetConfig+0xfc>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d113      	bne.n	8004c50 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c2e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c36:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	621a      	str	r2, [r3, #32]
}
 8004c6a:	bf00      	nop
 8004c6c:	371c      	adds	r7, #28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40012c00 	.word	0x40012c00
 8004c7c:	40014000 	.word	0x40014000
 8004c80:	40014400 	.word	0x40014400
 8004c84:	40014800 	.word	0x40014800

08004c88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f023 0303 	bic.w	r3, r3, #3
 8004cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	021b      	lsls	r3, r3, #8
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a23      	ldr	r2, [pc, #140]	; (8004d74 <TIM_OC3_SetConfig+0xec>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d10d      	bne.n	8004d06 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	021b      	lsls	r3, r3, #8
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d04:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a1a      	ldr	r2, [pc, #104]	; (8004d74 <TIM_OC3_SetConfig+0xec>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00b      	beq.n	8004d26 <TIM_OC3_SetConfig+0x9e>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a19      	ldr	r2, [pc, #100]	; (8004d78 <TIM_OC3_SetConfig+0xf0>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d007      	beq.n	8004d26 <TIM_OC3_SetConfig+0x9e>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a18      	ldr	r2, [pc, #96]	; (8004d7c <TIM_OC3_SetConfig+0xf4>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d003      	beq.n	8004d26 <TIM_OC3_SetConfig+0x9e>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a17      	ldr	r2, [pc, #92]	; (8004d80 <TIM_OC3_SetConfig+0xf8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d113      	bne.n	8004d4e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	621a      	str	r2, [r3, #32]
}
 8004d68:	bf00      	nop
 8004d6a:	371c      	adds	r7, #28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	40012c00 	.word	0x40012c00
 8004d78:	40014000 	.word	0x40014000
 8004d7c:	40014400 	.word	0x40014400
 8004d80:	40014800 	.word	0x40014800

08004d84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b087      	sub	sp, #28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	021b      	lsls	r3, r3, #8
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	031b      	lsls	r3, r3, #12
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a16      	ldr	r2, [pc, #88]	; (8004e3c <TIM_OC4_SetConfig+0xb8>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d00b      	beq.n	8004e00 <TIM_OC4_SetConfig+0x7c>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a15      	ldr	r2, [pc, #84]	; (8004e40 <TIM_OC4_SetConfig+0xbc>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d007      	beq.n	8004e00 <TIM_OC4_SetConfig+0x7c>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a14      	ldr	r2, [pc, #80]	; (8004e44 <TIM_OC4_SetConfig+0xc0>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d003      	beq.n	8004e00 <TIM_OC4_SetConfig+0x7c>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a13      	ldr	r2, [pc, #76]	; (8004e48 <TIM_OC4_SetConfig+0xc4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d109      	bne.n	8004e14 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	019b      	lsls	r3, r3, #6
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	621a      	str	r2, [r3, #32]
}
 8004e2e:	bf00      	nop
 8004e30:	371c      	adds	r7, #28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	40012c00 	.word	0x40012c00
 8004e40:	40014000 	.word	0x40014000
 8004e44:	40014400 	.word	0x40014400
 8004e48:	40014800 	.word	0x40014800

08004e4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b087      	sub	sp, #28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	041b      	lsls	r3, r3, #16
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a15      	ldr	r2, [pc, #84]	; (8004ef8 <TIM_OC5_SetConfig+0xac>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d00b      	beq.n	8004ebe <TIM_OC5_SetConfig+0x72>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a14      	ldr	r2, [pc, #80]	; (8004efc <TIM_OC5_SetConfig+0xb0>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d007      	beq.n	8004ebe <TIM_OC5_SetConfig+0x72>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a13      	ldr	r2, [pc, #76]	; (8004f00 <TIM_OC5_SetConfig+0xb4>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d003      	beq.n	8004ebe <TIM_OC5_SetConfig+0x72>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a12      	ldr	r2, [pc, #72]	; (8004f04 <TIM_OC5_SetConfig+0xb8>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d109      	bne.n	8004ed2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ec4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	021b      	lsls	r3, r3, #8
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	621a      	str	r2, [r3, #32]
}
 8004eec:	bf00      	nop
 8004eee:	371c      	adds	r7, #28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	40012c00 	.word	0x40012c00
 8004efc:	40014000 	.word	0x40014000
 8004f00:	40014400 	.word	0x40014400
 8004f04:	40014800 	.word	0x40014800

08004f08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	021b      	lsls	r3, r3, #8
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	051b      	lsls	r3, r3, #20
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a16      	ldr	r2, [pc, #88]	; (8004fb8 <TIM_OC6_SetConfig+0xb0>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00b      	beq.n	8004f7c <TIM_OC6_SetConfig+0x74>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a15      	ldr	r2, [pc, #84]	; (8004fbc <TIM_OC6_SetConfig+0xb4>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d007      	beq.n	8004f7c <TIM_OC6_SetConfig+0x74>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a14      	ldr	r2, [pc, #80]	; (8004fc0 <TIM_OC6_SetConfig+0xb8>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d003      	beq.n	8004f7c <TIM_OC6_SetConfig+0x74>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a13      	ldr	r2, [pc, #76]	; (8004fc4 <TIM_OC6_SetConfig+0xbc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d109      	bne.n	8004f90 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	029b      	lsls	r3, r3, #10
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	621a      	str	r2, [r3, #32]
}
 8004faa:	bf00      	nop
 8004fac:	371c      	adds	r7, #28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	40012c00 	.word	0x40012c00
 8004fbc:	40014000 	.word	0x40014000
 8004fc0:	40014400 	.word	0x40014400
 8004fc4:	40014800 	.word	0x40014800

08004fc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	f023 0201 	bic.w	r2, r3, #1
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ff2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f023 030a 	bic.w	r3, r3, #10
 8005004:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	4313      	orrs	r3, r2
 800500c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	621a      	str	r2, [r3, #32]
}
 800501a:	bf00      	nop
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005026:	b480      	push	{r7}
 8005028:	b087      	sub	sp, #28
 800502a:	af00      	add	r7, sp, #0
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	f023 0210 	bic.w	r2, r3, #16
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005050:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	031b      	lsls	r3, r3, #12
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	4313      	orrs	r3, r2
 800505a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005062:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	4313      	orrs	r3, r2
 800506c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	621a      	str	r2, [r3, #32]
}
 800507a:	bf00      	nop
 800507c:	371c      	adds	r7, #28
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005086:	b480      	push	{r7}
 8005088:	b085      	sub	sp, #20
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
 800508e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	f043 0307 	orr.w	r3, r3, #7
 80050a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	609a      	str	r2, [r3, #8]
}
 80050b0:	bf00      	nop
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050bc:	b480      	push	{r7}
 80050be:	b087      	sub	sp, #28
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
 80050c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	021a      	lsls	r2, r3, #8
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	431a      	orrs	r2, r3
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	609a      	str	r2, [r3, #8]
}
 80050f0:	bf00      	nop
 80050f2:	371c      	adds	r7, #28
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	f003 031f 	and.w	r3, r3, #31
 800510e:	2201      	movs	r2, #1
 8005110:	fa02 f303 	lsl.w	r3, r2, r3
 8005114:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6a1a      	ldr	r2, [r3, #32]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	43db      	mvns	r3, r3
 800511e:	401a      	ands	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a1a      	ldr	r2, [r3, #32]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	f003 031f 	and.w	r3, r3, #31
 800512e:	6879      	ldr	r1, [r7, #4]
 8005130:	fa01 f303 	lsl.w	r3, r1, r3
 8005134:	431a      	orrs	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	621a      	str	r2, [r3, #32]
}
 800513a:	bf00      	nop
 800513c:	371c      	adds	r7, #28
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
	...

08005148 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005158:	2b01      	cmp	r3, #1
 800515a:	d101      	bne.n	8005160 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800515c:	2302      	movs	r3, #2
 800515e:	e054      	b.n	800520a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2202      	movs	r2, #2
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a24      	ldr	r2, [pc, #144]	; (8005218 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d108      	bne.n	800519c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005190:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	4313      	orrs	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a17      	ldr	r2, [pc, #92]	; (8005218 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d00e      	beq.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c8:	d009      	beq.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a13      	ldr	r2, [pc, #76]	; (800521c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d004      	beq.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a11      	ldr	r2, [pc, #68]	; (8005220 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d10c      	bne.n	80051f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	40012c00 	.word	0x40012c00
 800521c:	40000400 	.word	0x40000400
 8005220:	40014000 	.word	0x40014000

08005224 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005238:	2b01      	cmp	r3, #1
 800523a:	d101      	bne.n	8005240 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800523c:	2302      	movs	r3, #2
 800523e:	e060      	b.n	8005302 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	4313      	orrs	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	4313      	orrs	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4313      	orrs	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	4313      	orrs	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	041b      	lsls	r3, r3, #16
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a14      	ldr	r2, [pc, #80]	; (8005310 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d115      	bne.n	80052f0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	051b      	lsls	r3, r3, #20
 80052d0:	4313      	orrs	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	40012c00 	.word	0x40012c00

08005314 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e040      	b.n	80053a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800532a:	2b00      	cmp	r3, #0
 800532c:	d106      	bne.n	800533c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7fc fdc6 	bl	8001ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2224      	movs	r2, #36	; 0x24
 8005340:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 0201 	bic.w	r2, r2, #1
 8005350:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fb2a 	bl	80059ac <UART_SetConfig>
 8005358:	4603      	mov	r3, r0
 800535a:	2b01      	cmp	r3, #1
 800535c:	d101      	bne.n	8005362 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e022      	b.n	80053a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fc54 	bl	8005c18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800537e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800538e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f042 0201 	orr.w	r2, r2, #1
 800539e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fcdb 	bl	8005d5c <UART_CheckIdleState>
 80053a6:	4603      	mov	r3, r0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3708      	adds	r7, #8
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b0ba      	sub	sp, #232	; 0xe8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80053d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80053da:	f640 030f 	movw	r3, #2063	; 0x80f
 80053de:	4013      	ands	r3, r2
 80053e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80053e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d115      	bne.n	8005418 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80053ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00f      	beq.n	8005418 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80053f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053fc:	f003 0320 	and.w	r3, r3, #32
 8005400:	2b00      	cmp	r3, #0
 8005402:	d009      	beq.n	8005418 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 82a3 	beq.w	8005954 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	4798      	blx	r3
      }
      return;
 8005416:	e29d      	b.n	8005954 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005418:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 8117 	beq.w	8005650 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d106      	bne.n	800543c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800542e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005432:	4b85      	ldr	r3, [pc, #532]	; (8005648 <HAL_UART_IRQHandler+0x298>)
 8005434:	4013      	ands	r3, r2
 8005436:	2b00      	cmp	r3, #0
 8005438:	f000 810a 	beq.w	8005650 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800543c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b00      	cmp	r3, #0
 8005446:	d011      	beq.n	800546c <HAL_UART_IRQHandler+0xbc>
 8005448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800544c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00b      	beq.n	800546c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2201      	movs	r2, #1
 800545a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005462:	f043 0201 	orr.w	r2, r3, #1
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800546c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d011      	beq.n	800549c <HAL_UART_IRQHandler+0xec>
 8005478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00b      	beq.n	800549c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2202      	movs	r2, #2
 800548a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005492:	f043 0204 	orr.w	r2, r3, #4
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800549c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d011      	beq.n	80054cc <HAL_UART_IRQHandler+0x11c>
 80054a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00b      	beq.n	80054cc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2204      	movs	r2, #4
 80054ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054c2:	f043 0202 	orr.w	r2, r3, #2
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80054cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054d0:	f003 0308 	and.w	r3, r3, #8
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d017      	beq.n	8005508 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054dc:	f003 0320 	and.w	r3, r3, #32
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d105      	bne.n	80054f0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80054e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00b      	beq.n	8005508 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2208      	movs	r2, #8
 80054f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054fe:	f043 0208 	orr.w	r2, r3, #8
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800550c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005510:	2b00      	cmp	r3, #0
 8005512:	d012      	beq.n	800553a <HAL_UART_IRQHandler+0x18a>
 8005514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005518:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00c      	beq.n	800553a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005528:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005530:	f043 0220 	orr.w	r2, r3, #32
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 8209 	beq.w	8005958 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00d      	beq.n	800556e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005556:	f003 0320 	and.w	r3, r3, #32
 800555a:	2b00      	cmp	r3, #0
 800555c:	d007      	beq.n	800556e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005574:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005582:	2b40      	cmp	r3, #64	; 0x40
 8005584:	d005      	beq.n	8005592 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005586:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800558a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800558e:	2b00      	cmp	r3, #0
 8005590:	d04f      	beq.n	8005632 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fcef 	bl	8005f76 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a2:	2b40      	cmp	r3, #64	; 0x40
 80055a4:	d141      	bne.n	800562a <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3308      	adds	r3, #8
 80055ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055b4:	e853 3f00 	ldrex	r3, [r3]
 80055b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80055bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3308      	adds	r3, #8
 80055ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80055d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80055d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80055de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80055e2:	e841 2300 	strex	r3, r2, [r1]
 80055e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80055ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1d9      	bne.n	80055a6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d013      	beq.n	8005622 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fe:	4a13      	ldr	r2, [pc, #76]	; (800564c <HAL_UART_IRQHandler+0x29c>)
 8005600:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005606:	4618      	mov	r0, r3
 8005608:	f7fd f8d0 	bl	80027ac <HAL_DMA_Abort_IT>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d017      	beq.n	8005642 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800561c:	4610      	mov	r0, r2
 800561e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005620:	e00f      	b.n	8005642 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f9ac 	bl	8005980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005628:	e00b      	b.n	8005642 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f9a8 	bl	8005980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005630:	e007      	b.n	8005642 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f9a4 	bl	8005980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005640:	e18a      	b.n	8005958 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005642:	bf00      	nop
    return;
 8005644:	e188      	b.n	8005958 <HAL_UART_IRQHandler+0x5a8>
 8005646:	bf00      	nop
 8005648:	04000120 	.word	0x04000120
 800564c:	0800603d 	.word	0x0800603d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005654:	2b01      	cmp	r3, #1
 8005656:	f040 8143 	bne.w	80058e0 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800565a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800565e:	f003 0310 	and.w	r3, r3, #16
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 813c 	beq.w	80058e0 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800566c:	f003 0310 	and.w	r3, r3, #16
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 8135 	beq.w	80058e0 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2210      	movs	r2, #16
 800567c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005688:	2b40      	cmp	r3, #64	; 0x40
 800568a:	f040 80b1 	bne.w	80057f0 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800569a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 815c 	beq.w	800595c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80056aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056ae:	429a      	cmp	r2, r3
 80056b0:	f080 8154 	bcs.w	800595c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	2b20      	cmp	r3, #32
 80056c6:	f000 8085 	beq.w	80057d4 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056d6:	e853 3f00 	ldrex	r3, [r3]
 80056da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80056de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	461a      	mov	r2, r3
 80056f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80056f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80056f8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005700:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005704:	e841 2300 	strex	r3, r2, [r1]
 8005708:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800570c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1da      	bne.n	80056ca <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3308      	adds	r3, #8
 800571a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800571e:	e853 3f00 	ldrex	r3, [r3]
 8005722:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005724:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005726:	f023 0301 	bic.w	r3, r3, #1
 800572a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	3308      	adds	r3, #8
 8005734:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005738:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800573c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005740:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005744:	e841 2300 	strex	r3, r2, [r1]
 8005748:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800574a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1e1      	bne.n	8005714 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3308      	adds	r3, #8
 8005756:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005758:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800575a:	e853 3f00 	ldrex	r3, [r3]
 800575e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005760:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005766:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3308      	adds	r3, #8
 8005770:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005774:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005776:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005778:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800577a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800577c:	e841 2300 	strex	r3, r2, [r1]
 8005780:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005782:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1e3      	bne.n	8005750 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2220      	movs	r2, #32
 800578c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057a4:	f023 0310 	bic.w	r3, r3, #16
 80057a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	461a      	mov	r2, r3
 80057b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80057b8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057be:	e841 2300 	strex	r3, r2, [r1]
 80057c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1e4      	bne.n	8005794 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fc ffb3 	bl	800273a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	4619      	mov	r1, r3
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f8d3 	bl	8005994 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057ee:	e0b5      	b.n	800595c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800580a:	b29b      	uxth	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 80a7 	beq.w	8005960 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8005812:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 80a2 	beq.w	8005960 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005824:	e853 3f00 	ldrex	r3, [r3]
 8005828:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800582a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800582c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005830:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	461a      	mov	r2, r3
 800583a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800583e:	647b      	str	r3, [r7, #68]	; 0x44
 8005840:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005842:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005844:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005846:	e841 2300 	strex	r3, r2, [r1]
 800584a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800584c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1e4      	bne.n	800581c <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3308      	adds	r3, #8
 8005858:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	e853 3f00 	ldrex	r3, [r3]
 8005860:	623b      	str	r3, [r7, #32]
   return(result);
 8005862:	6a3b      	ldr	r3, [r7, #32]
 8005864:	f023 0301 	bic.w	r3, r3, #1
 8005868:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3308      	adds	r3, #8
 8005872:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005876:	633a      	str	r2, [r7, #48]	; 0x30
 8005878:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800587c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800587e:	e841 2300 	strex	r3, r2, [r1]
 8005882:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1e3      	bne.n	8005852 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2220      	movs	r2, #32
 800588e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	e853 3f00 	ldrex	r3, [r3]
 80058a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f023 0310 	bic.w	r3, r3, #16
 80058b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	461a      	mov	r2, r3
 80058ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80058be:	61fb      	str	r3, [r7, #28]
 80058c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c2:	69b9      	ldr	r1, [r7, #24]
 80058c4:	69fa      	ldr	r2, [r7, #28]
 80058c6:	e841 2300 	strex	r3, r2, [r1]
 80058ca:	617b      	str	r3, [r7, #20]
   return(result);
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1e4      	bne.n	800589c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058d6:	4619      	mov	r1, r3
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f85b 	bl	8005994 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058de:	e03f      	b.n	8005960 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80058e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00e      	beq.n	800590a <HAL_UART_IRQHandler+0x55a>
 80058ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d008      	beq.n	800590a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005900:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 fbda 	bl	80060bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005908:	e02d      	b.n	8005966 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800590a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800590e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00e      	beq.n	8005934 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800591a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591e:	2b00      	cmp	r3, #0
 8005920:	d008      	beq.n	8005934 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005926:	2b00      	cmp	r3, #0
 8005928:	d01c      	beq.n	8005964 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	4798      	blx	r3
    }
    return;
 8005932:	e017      	b.n	8005964 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593c:	2b00      	cmp	r3, #0
 800593e:	d012      	beq.n	8005966 <HAL_UART_IRQHandler+0x5b6>
 8005940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00c      	beq.n	8005966 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 fb8b 	bl	8006068 <UART_EndTransmit_IT>
    return;
 8005952:	e008      	b.n	8005966 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005954:	bf00      	nop
 8005956:	e006      	b.n	8005966 <HAL_UART_IRQHandler+0x5b6>
    return;
 8005958:	bf00      	nop
 800595a:	e004      	b.n	8005966 <HAL_UART_IRQHandler+0x5b6>
      return;
 800595c:	bf00      	nop
 800595e:	e002      	b.n	8005966 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005960:	bf00      	nop
 8005962:	e000      	b.n	8005966 <HAL_UART_IRQHandler+0x5b6>
    return;
 8005964:	bf00      	nop
  }

}
 8005966:	37e8      	adds	r7, #232	; 0xe8
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	460b      	mov	r3, r1
 800599e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b088      	sub	sp, #32
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059b4:	2300      	movs	r3, #0
 80059b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	431a      	orrs	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	4b8a      	ldr	r3, [pc, #552]	; (8005c00 <UART_SetConfig+0x254>)
 80059d8:	4013      	ands	r3, r2
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	6812      	ldr	r2, [r2, #0]
 80059de:	6979      	ldr	r1, [r7, #20]
 80059e0:	430b      	orrs	r3, r1
 80059e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a78      	ldr	r2, [pc, #480]	; (8005c04 <UART_SetConfig+0x258>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d120      	bne.n	8005a6a <UART_SetConfig+0xbe>
 8005a28:	4b77      	ldr	r3, [pc, #476]	; (8005c08 <UART_SetConfig+0x25c>)
 8005a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2c:	f003 0303 	and.w	r3, r3, #3
 8005a30:	2b03      	cmp	r3, #3
 8005a32:	d817      	bhi.n	8005a64 <UART_SetConfig+0xb8>
 8005a34:	a201      	add	r2, pc, #4	; (adr r2, 8005a3c <UART_SetConfig+0x90>)
 8005a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3a:	bf00      	nop
 8005a3c:	08005a4d 	.word	0x08005a4d
 8005a40:	08005a59 	.word	0x08005a59
 8005a44:	08005a5f 	.word	0x08005a5f
 8005a48:	08005a53 	.word	0x08005a53
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	77fb      	strb	r3, [r7, #31]
 8005a50:	e01d      	b.n	8005a8e <UART_SetConfig+0xe2>
 8005a52:	2302      	movs	r3, #2
 8005a54:	77fb      	strb	r3, [r7, #31]
 8005a56:	e01a      	b.n	8005a8e <UART_SetConfig+0xe2>
 8005a58:	2304      	movs	r3, #4
 8005a5a:	77fb      	strb	r3, [r7, #31]
 8005a5c:	e017      	b.n	8005a8e <UART_SetConfig+0xe2>
 8005a5e:	2308      	movs	r3, #8
 8005a60:	77fb      	strb	r3, [r7, #31]
 8005a62:	e014      	b.n	8005a8e <UART_SetConfig+0xe2>
 8005a64:	2310      	movs	r3, #16
 8005a66:	77fb      	strb	r3, [r7, #31]
 8005a68:	e011      	b.n	8005a8e <UART_SetConfig+0xe2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a67      	ldr	r2, [pc, #412]	; (8005c0c <UART_SetConfig+0x260>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d102      	bne.n	8005a7a <UART_SetConfig+0xce>
 8005a74:	2300      	movs	r3, #0
 8005a76:	77fb      	strb	r3, [r7, #31]
 8005a78:	e009      	b.n	8005a8e <UART_SetConfig+0xe2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a64      	ldr	r2, [pc, #400]	; (8005c10 <UART_SetConfig+0x264>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d102      	bne.n	8005a8a <UART_SetConfig+0xde>
 8005a84:	2300      	movs	r3, #0
 8005a86:	77fb      	strb	r3, [r7, #31]
 8005a88:	e001      	b.n	8005a8e <UART_SetConfig+0xe2>
 8005a8a:	2310      	movs	r3, #16
 8005a8c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a96:	d15b      	bne.n	8005b50 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005a98:	7ffb      	ldrb	r3, [r7, #31]
 8005a9a:	2b08      	cmp	r3, #8
 8005a9c:	d827      	bhi.n	8005aee <UART_SetConfig+0x142>
 8005a9e:	a201      	add	r2, pc, #4	; (adr r2, 8005aa4 <UART_SetConfig+0xf8>)
 8005aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa4:	08005ac9 	.word	0x08005ac9
 8005aa8:	08005ad1 	.word	0x08005ad1
 8005aac:	08005ad9 	.word	0x08005ad9
 8005ab0:	08005aef 	.word	0x08005aef
 8005ab4:	08005adf 	.word	0x08005adf
 8005ab8:	08005aef 	.word	0x08005aef
 8005abc:	08005aef 	.word	0x08005aef
 8005ac0:	08005aef 	.word	0x08005aef
 8005ac4:	08005ae7 	.word	0x08005ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ac8:	f7fe fa74 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 8005acc:	61b8      	str	r0, [r7, #24]
        break;
 8005ace:	e013      	b.n	8005af8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ad0:	f7fe fa92 	bl	8003ff8 <HAL_RCC_GetPCLK2Freq>
 8005ad4:	61b8      	str	r0, [r7, #24]
        break;
 8005ad6:	e00f      	b.n	8005af8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ad8:	4b4e      	ldr	r3, [pc, #312]	; (8005c14 <UART_SetConfig+0x268>)
 8005ada:	61bb      	str	r3, [r7, #24]
        break;
 8005adc:	e00c      	b.n	8005af8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ade:	f7fe f9f3 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8005ae2:	61b8      	str	r0, [r7, #24]
        break;
 8005ae4:	e008      	b.n	8005af8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aea:	61bb      	str	r3, [r7, #24]
        break;
 8005aec:	e004      	b.n	8005af8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	77bb      	strb	r3, [r7, #30]
        break;
 8005af6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d074      	beq.n	8005be8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	005a      	lsls	r2, r3, #1
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	085b      	lsrs	r3, r3, #1
 8005b08:	441a      	add	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	2b0f      	cmp	r3, #15
 8005b1a:	d916      	bls.n	8005b4a <UART_SetConfig+0x19e>
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b22:	d212      	bcs.n	8005b4a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	f023 030f 	bic.w	r3, r3, #15
 8005b2c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	085b      	lsrs	r3, r3, #1
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	89fb      	ldrh	r3, [r7, #14]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	89fa      	ldrh	r2, [r7, #14]
 8005b46:	60da      	str	r2, [r3, #12]
 8005b48:	e04e      	b.n	8005be8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	77bb      	strb	r3, [r7, #30]
 8005b4e:	e04b      	b.n	8005be8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b50:	7ffb      	ldrb	r3, [r7, #31]
 8005b52:	2b08      	cmp	r3, #8
 8005b54:	d827      	bhi.n	8005ba6 <UART_SetConfig+0x1fa>
 8005b56:	a201      	add	r2, pc, #4	; (adr r2, 8005b5c <UART_SetConfig+0x1b0>)
 8005b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5c:	08005b81 	.word	0x08005b81
 8005b60:	08005b89 	.word	0x08005b89
 8005b64:	08005b91 	.word	0x08005b91
 8005b68:	08005ba7 	.word	0x08005ba7
 8005b6c:	08005b97 	.word	0x08005b97
 8005b70:	08005ba7 	.word	0x08005ba7
 8005b74:	08005ba7 	.word	0x08005ba7
 8005b78:	08005ba7 	.word	0x08005ba7
 8005b7c:	08005b9f 	.word	0x08005b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b80:	f7fe fa18 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 8005b84:	61b8      	str	r0, [r7, #24]
        break;
 8005b86:	e013      	b.n	8005bb0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b88:	f7fe fa36 	bl	8003ff8 <HAL_RCC_GetPCLK2Freq>
 8005b8c:	61b8      	str	r0, [r7, #24]
        break;
 8005b8e:	e00f      	b.n	8005bb0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b90:	4b20      	ldr	r3, [pc, #128]	; (8005c14 <UART_SetConfig+0x268>)
 8005b92:	61bb      	str	r3, [r7, #24]
        break;
 8005b94:	e00c      	b.n	8005bb0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b96:	f7fe f997 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8005b9a:	61b8      	str	r0, [r7, #24]
        break;
 8005b9c:	e008      	b.n	8005bb0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ba2:	61bb      	str	r3, [r7, #24]
        break;
 8005ba4:	e004      	b.n	8005bb0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	77bb      	strb	r3, [r7, #30]
        break;
 8005bae:	bf00      	nop
    }

    if (pclk != 0U)
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d018      	beq.n	8005be8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	085a      	lsrs	r2, r3, #1
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	441a      	add	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	2b0f      	cmp	r3, #15
 8005bd0:	d908      	bls.n	8005be4 <UART_SetConfig+0x238>
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bd8:	d204      	bcs.n	8005be4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	60da      	str	r2, [r3, #12]
 8005be2:	e001      	b.n	8005be8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005bf4:	7fbb      	ldrb	r3, [r7, #30]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3720      	adds	r7, #32
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	efff69f3 	.word	0xefff69f3
 8005c04:	40013800 	.word	0x40013800
 8005c08:	40021000 	.word	0x40021000
 8005c0c:	40004400 	.word	0x40004400
 8005c10:	40004800 	.word	0x40004800
 8005c14:	007a1200 	.word	0x007a1200

08005c18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00a      	beq.n	8005c42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00a      	beq.n	8005c64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00a      	beq.n	8005c86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	f003 0308 	and.w	r3, r3, #8
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00a      	beq.n	8005ca8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	f003 0310 	and.w	r3, r3, #16
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00a      	beq.n	8005cca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	f003 0320 	and.w	r3, r3, #32
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00a      	beq.n	8005cec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01a      	beq.n	8005d2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d16:	d10a      	bne.n	8005d2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00a      	beq.n	8005d50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	605a      	str	r2, [r3, #4]
  }
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af02      	add	r7, sp, #8
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d6c:	f7fc fbc8 	bl	8002500 <HAL_GetTick>
 8005d70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0308 	and.w	r3, r3, #8
 8005d7c:	2b08      	cmp	r3, #8
 8005d7e:	d10e      	bne.n	8005d9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f82d 	bl	8005dee <UART_WaitOnFlagUntilTimeout>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e023      	b.n	8005de6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0304 	and.w	r3, r3, #4
 8005da8:	2b04      	cmp	r3, #4
 8005daa:	d10e      	bne.n	8005dca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f817 	bl	8005dee <UART_WaitOnFlagUntilTimeout>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e00d      	b.n	8005de6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b09c      	sub	sp, #112	; 0x70
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	60f8      	str	r0, [r7, #12]
 8005df6:	60b9      	str	r1, [r7, #8]
 8005df8:	603b      	str	r3, [r7, #0]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dfe:	e0a5      	b.n	8005f4c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e06:	f000 80a1 	beq.w	8005f4c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e0a:	f7fc fb79 	bl	8002500 <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d302      	bcc.n	8005e20 <UART_WaitOnFlagUntilTimeout+0x32>
 8005e1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d13e      	bne.n	8005e9e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e28:	e853 3f00 	ldrex	r3, [r3]
 8005e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e34:	667b      	str	r3, [r7, #100]	; 0x64
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e40:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e46:	e841 2300 	strex	r3, r2, [r1]
 8005e4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1e6      	bne.n	8005e20 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	3308      	adds	r3, #8
 8005e58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e5c:	e853 3f00 	ldrex	r3, [r3]
 8005e60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e64:	f023 0301 	bic.w	r3, r3, #1
 8005e68:	663b      	str	r3, [r7, #96]	; 0x60
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	3308      	adds	r3, #8
 8005e70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e72:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e7a:	e841 2300 	strex	r3, r2, [r1]
 8005e7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1e5      	bne.n	8005e52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e067      	b.n	8005f6e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d04f      	beq.n	8005f4c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	69db      	ldr	r3, [r3, #28]
 8005eb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eba:	d147      	bne.n	8005f4c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ec4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ece:	e853 3f00 	ldrex	r3, [r3]
 8005ed2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005eda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ee6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005eea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005eec:	e841 2300 	strex	r3, r2, [r1]
 8005ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1e6      	bne.n	8005ec6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3308      	adds	r3, #8
 8005efe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	e853 3f00 	ldrex	r3, [r3]
 8005f06:	613b      	str	r3, [r7, #16]
   return(result);
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f023 0301 	bic.w	r3, r3, #1
 8005f0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3308      	adds	r3, #8
 8005f16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f18:	623a      	str	r2, [r7, #32]
 8005f1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1c:	69f9      	ldr	r1, [r7, #28]
 8005f1e:	6a3a      	ldr	r2, [r7, #32]
 8005f20:	e841 2300 	strex	r3, r2, [r1]
 8005f24:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1e5      	bne.n	8005ef8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2220      	movs	r2, #32
 8005f30:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2220      	movs	r2, #32
 8005f36:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e010      	b.n	8005f6e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	69da      	ldr	r2, [r3, #28]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	4013      	ands	r3, r2
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	bf0c      	ite	eq
 8005f5c:	2301      	moveq	r3, #1
 8005f5e:	2300      	movne	r3, #0
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	461a      	mov	r2, r3
 8005f64:	79fb      	ldrb	r3, [r7, #7]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	f43f af4a 	beq.w	8005e00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3770      	adds	r7, #112	; 0x70
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b095      	sub	sp, #84	; 0x54
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f86:	e853 3f00 	ldrex	r3, [r3]
 8005f8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	461a      	mov	r2, r3
 8005f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f9c:	643b      	str	r3, [r7, #64]	; 0x40
 8005f9e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fa4:	e841 2300 	strex	r3, r2, [r1]
 8005fa8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1e6      	bne.n	8005f7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3308      	adds	r3, #8
 8005fb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb8:	6a3b      	ldr	r3, [r7, #32]
 8005fba:	e853 3f00 	ldrex	r3, [r3]
 8005fbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	f023 0301 	bic.w	r3, r3, #1
 8005fc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3308      	adds	r3, #8
 8005fce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fd8:	e841 2300 	strex	r3, r2, [r1]
 8005fdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e5      	bne.n	8005fb0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d118      	bne.n	800601e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	e853 3f00 	ldrex	r3, [r3]
 8005ff8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	f023 0310 	bic.w	r3, r3, #16
 8006000:	647b      	str	r3, [r7, #68]	; 0x44
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800600a:	61bb      	str	r3, [r7, #24]
 800600c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600e:	6979      	ldr	r1, [r7, #20]
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	e841 2300 	strex	r3, r2, [r1]
 8006016:	613b      	str	r3, [r7, #16]
   return(result);
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1e6      	bne.n	8005fec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2220      	movs	r2, #32
 8006022:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006030:	bf00      	nop
 8006032:	3754      	adds	r7, #84	; 0x54
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f7ff fc90 	bl	8005980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006060:	bf00      	nop
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b088      	sub	sp, #32
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	e853 3f00 	ldrex	r3, [r3]
 800607c:	60bb      	str	r3, [r7, #8]
   return(result);
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006084:	61fb      	str	r3, [r7, #28]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	461a      	mov	r2, r3
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	61bb      	str	r3, [r7, #24]
 8006090:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006092:	6979      	ldr	r1, [r7, #20]
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	e841 2300 	strex	r3, r2, [r1]
 800609a:	613b      	str	r3, [r7, #16]
   return(result);
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1e6      	bne.n	8006070 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2220      	movs	r2, #32
 80060a6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7ff fc5c 	bl	800596c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060b4:	bf00      	nop
 80060b6:	3720      	adds	r7, #32
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <_ZdlPv>:
 80060d0:	f000 b9f4 	b.w	80064bc <free>

080060d4 <_ZdlPvj>:
 80060d4:	f7ff bffc 	b.w	80060d0 <_ZdlPv>

080060d8 <_Znwj>:
 80060d8:	2801      	cmp	r0, #1
 80060da:	bf38      	it	cc
 80060dc:	2001      	movcc	r0, #1
 80060de:	b510      	push	{r4, lr}
 80060e0:	4604      	mov	r4, r0
 80060e2:	4620      	mov	r0, r4
 80060e4:	f000 f9e2 	bl	80064ac <malloc>
 80060e8:	b930      	cbnz	r0, 80060f8 <_Znwj+0x20>
 80060ea:	f000 f9a5 	bl	8006438 <_ZSt15get_new_handlerv>
 80060ee:	b908      	cbnz	r0, 80060f4 <_Znwj+0x1c>
 80060f0:	f000 f9aa 	bl	8006448 <abort>
 80060f4:	4780      	blx	r0
 80060f6:	e7f4      	b.n	80060e2 <_Znwj+0xa>
 80060f8:	bd10      	pop	{r4, pc}

080060fa <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 80060fa:	68c3      	ldr	r3, [r0, #12]
 80060fc:	689a      	ldr	r2, [r3, #8]
 80060fe:	60c2      	str	r2, [r0, #12]
 8006100:	b510      	push	{r4, lr}
 8006102:	b102      	cbz	r2, 8006106 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 8006104:	6050      	str	r0, [r2, #4]
 8006106:	6842      	ldr	r2, [r0, #4]
 8006108:	605a      	str	r2, [r3, #4]
 800610a:	680c      	ldr	r4, [r1, #0]
 800610c:	4284      	cmp	r4, r0
 800610e:	d103      	bne.n	8006118 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8006110:	600b      	str	r3, [r1, #0]
 8006112:	6098      	str	r0, [r3, #8]
 8006114:	6043      	str	r3, [r0, #4]
 8006116:	bd10      	pop	{r4, pc}
 8006118:	6891      	ldr	r1, [r2, #8]
 800611a:	4281      	cmp	r1, r0
 800611c:	bf0c      	ite	eq
 800611e:	6093      	streq	r3, [r2, #8]
 8006120:	60d3      	strne	r3, [r2, #12]
 8006122:	e7f6      	b.n	8006112 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

08006124 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8006124:	6883      	ldr	r3, [r0, #8]
 8006126:	68da      	ldr	r2, [r3, #12]
 8006128:	6082      	str	r2, [r0, #8]
 800612a:	b510      	push	{r4, lr}
 800612c:	b102      	cbz	r2, 8006130 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 800612e:	6050      	str	r0, [r2, #4]
 8006130:	6842      	ldr	r2, [r0, #4]
 8006132:	605a      	str	r2, [r3, #4]
 8006134:	680c      	ldr	r4, [r1, #0]
 8006136:	4284      	cmp	r4, r0
 8006138:	d103      	bne.n	8006142 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 800613a:	600b      	str	r3, [r1, #0]
 800613c:	60d8      	str	r0, [r3, #12]
 800613e:	6043      	str	r3, [r0, #4]
 8006140:	bd10      	pop	{r4, pc}
 8006142:	68d1      	ldr	r1, [r2, #12]
 8006144:	4281      	cmp	r1, r0
 8006146:	bf0c      	ite	eq
 8006148:	60d3      	streq	r3, [r2, #12]
 800614a:	6093      	strne	r3, [r2, #8]
 800614c:	e7f6      	b.n	800613c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

0800614e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 800614e:	68c3      	ldr	r3, [r0, #12]
 8006150:	b123      	cbz	r3, 800615c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 8006152:	4618      	mov	r0, r3
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1fb      	bne.n	8006152 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 800615a:	4770      	bx	lr
 800615c:	6843      	ldr	r3, [r0, #4]
 800615e:	68da      	ldr	r2, [r3, #12]
 8006160:	4282      	cmp	r2, r0
 8006162:	d102      	bne.n	800616a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 8006164:	4618      	mov	r0, r3
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	e7f9      	b.n	800615e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 800616a:	68c2      	ldr	r2, [r0, #12]
 800616c:	4293      	cmp	r3, r2
 800616e:	bf18      	it	ne
 8006170:	4618      	movne	r0, r3
 8006172:	4770      	bx	lr

08006174 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8006174:	7803      	ldrb	r3, [r0, #0]
 8006176:	b933      	cbnz	r3, 8006186 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8006178:	6843      	ldr	r3, [r0, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	4283      	cmp	r3, r0
 800617e:	d102      	bne.n	8006186 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	4618      	mov	r0, r3
 8006184:	4770      	bx	lr
 8006186:	6882      	ldr	r2, [r0, #8]
 8006188:	b122      	cbz	r2, 8006194 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 800618a:	4613      	mov	r3, r2
 800618c:	68d2      	ldr	r2, [r2, #12]
 800618e:	2a00      	cmp	r2, #0
 8006190:	d1fb      	bne.n	800618a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8006192:	e7f6      	b.n	8006182 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8006194:	6843      	ldr	r3, [r0, #4]
 8006196:	689a      	ldr	r2, [r3, #8]
 8006198:	4282      	cmp	r2, r0
 800619a:	d1f2      	bne.n	8006182 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 800619c:	4618      	mov	r0, r3
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	e7f9      	b.n	8006196 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

080061a2 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 80061a2:	f7ff bfd4 	b.w	800614e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

080061a6 <_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base>:
 80061a6:	f7ff bfd2 	b.w	800614e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

080061aa <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80061aa:	f7ff bfe3 	b.w	8006174 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

080061ae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 80061ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061b2:	461e      	mov	r6, r3
 80061b4:	f103 0804 	add.w	r8, r3, #4
 80061b8:	2300      	movs	r3, #0
 80061ba:	e9c1 3302 	strd	r3, r3, [r1, #8]
 80061be:	460c      	mov	r4, r1
 80061c0:	604a      	str	r2, [r1, #4]
 80061c2:	700b      	strb	r3, [r1, #0]
 80061c4:	b300      	cbz	r0, 8006208 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 80061c6:	4296      	cmp	r6, r2
 80061c8:	6091      	str	r1, [r2, #8]
 80061ca:	d118      	bne.n	80061fe <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 80061cc:	6071      	str	r1, [r6, #4]
 80061ce:	60f4      	str	r4, [r6, #12]
 80061d0:	2701      	movs	r7, #1
 80061d2:	f04f 0900 	mov.w	r9, #0
 80061d6:	6873      	ldr	r3, [r6, #4]
 80061d8:	42a3      	cmp	r3, r4
 80061da:	d03f      	beq.n	800625c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 80061dc:	6860      	ldr	r0, [r4, #4]
 80061de:	7802      	ldrb	r2, [r0, #0]
 80061e0:	2a00      	cmp	r2, #0
 80061e2:	d13b      	bne.n	800625c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 80061e4:	6845      	ldr	r5, [r0, #4]
 80061e6:	68ab      	ldr	r3, [r5, #8]
 80061e8:	4298      	cmp	r0, r3
 80061ea:	d123      	bne.n	8006234 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 80061ec:	68eb      	ldr	r3, [r5, #12]
 80061ee:	b183      	cbz	r3, 8006212 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 80061f0:	781a      	ldrb	r2, [r3, #0]
 80061f2:	b972      	cbnz	r2, 8006212 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 80061f4:	7007      	strb	r7, [r0, #0]
 80061f6:	701f      	strb	r7, [r3, #0]
 80061f8:	702a      	strb	r2, [r5, #0]
 80061fa:	462c      	mov	r4, r5
 80061fc:	e7eb      	b.n	80061d6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 80061fe:	68b3      	ldr	r3, [r6, #8]
 8006200:	4293      	cmp	r3, r2
 8006202:	d1e5      	bne.n	80061d0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8006204:	60b1      	str	r1, [r6, #8]
 8006206:	e7e3      	b.n	80061d0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8006208:	60d1      	str	r1, [r2, #12]
 800620a:	68f3      	ldr	r3, [r6, #12]
 800620c:	4293      	cmp	r3, r2
 800620e:	d1df      	bne.n	80061d0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8006210:	e7dd      	b.n	80061ce <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8006212:	68c3      	ldr	r3, [r0, #12]
 8006214:	42a3      	cmp	r3, r4
 8006216:	d103      	bne.n	8006220 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 8006218:	4641      	mov	r1, r8
 800621a:	f7ff ff6e 	bl	80060fa <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 800621e:	4604      	mov	r4, r0
 8006220:	6863      	ldr	r3, [r4, #4]
 8006222:	4641      	mov	r1, r8
 8006224:	701f      	strb	r7, [r3, #0]
 8006226:	4628      	mov	r0, r5
 8006228:	f885 9000 	strb.w	r9, [r5]
 800622c:	f7ff ff7a 	bl	8006124 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8006230:	4625      	mov	r5, r4
 8006232:	e7e2      	b.n	80061fa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 8006234:	b113      	cbz	r3, 800623c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 8006236:	781a      	ldrb	r2, [r3, #0]
 8006238:	2a00      	cmp	r2, #0
 800623a:	d0db      	beq.n	80061f4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 800623c:	6883      	ldr	r3, [r0, #8]
 800623e:	42a3      	cmp	r3, r4
 8006240:	d103      	bne.n	800624a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 8006242:	4641      	mov	r1, r8
 8006244:	f7ff ff6e 	bl	8006124 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8006248:	4604      	mov	r4, r0
 800624a:	6863      	ldr	r3, [r4, #4]
 800624c:	4641      	mov	r1, r8
 800624e:	701f      	strb	r7, [r3, #0]
 8006250:	4628      	mov	r0, r5
 8006252:	f885 9000 	strb.w	r9, [r5]
 8006256:	f7ff ff50 	bl	80060fa <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 800625a:	e7e9      	b.n	8006230 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 800625c:	2201      	movs	r2, #1
 800625e:	701a      	strb	r2, [r3, #0]
 8006260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006264 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_>:
 8006264:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006268:	460f      	mov	r7, r1
 800626a:	e9d0 6102 	ldrd	r6, r1, [r0, #8]
 800626e:	4604      	mov	r4, r0
 8006270:	2e00      	cmp	r6, #0
 8006272:	d03e      	beq.n	80062f2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x8e>
 8006274:	2900      	cmp	r1, #0
 8006276:	d03d      	beq.n	80062f4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x90>
 8006278:	460a      	mov	r2, r1
 800627a:	4613      	mov	r3, r2
 800627c:	6892      	ldr	r2, [r2, #8]
 800627e:	2a00      	cmp	r2, #0
 8006280:	d1fb      	bne.n	800627a <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x16>
 8006282:	42a3      	cmp	r3, r4
 8006284:	68da      	ldr	r2, [r3, #12]
 8006286:	d04b      	beq.n	8006320 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xbc>
 8006288:	4299      	cmp	r1, r3
 800628a:	6073      	str	r3, [r6, #4]
 800628c:	609e      	str	r6, [r3, #8]
 800628e:	d027      	beq.n	80062e0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x7c>
 8006290:	685d      	ldr	r5, [r3, #4]
 8006292:	b102      	cbz	r2, 8006296 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x32>
 8006294:	6055      	str	r5, [r2, #4]
 8006296:	6858      	ldr	r0, [r3, #4]
 8006298:	6082      	str	r2, [r0, #8]
 800629a:	60d9      	str	r1, [r3, #12]
 800629c:	68e1      	ldr	r1, [r4, #12]
 800629e:	604b      	str	r3, [r1, #4]
 80062a0:	6879      	ldr	r1, [r7, #4]
 80062a2:	42a1      	cmp	r1, r4
 80062a4:	d11e      	bne.n	80062e4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x80>
 80062a6:	607b      	str	r3, [r7, #4]
 80062a8:	6861      	ldr	r1, [r4, #4]
 80062aa:	7820      	ldrb	r0, [r4, #0]
 80062ac:	6059      	str	r1, [r3, #4]
 80062ae:	7819      	ldrb	r1, [r3, #0]
 80062b0:	7018      	strb	r0, [r3, #0]
 80062b2:	4616      	mov	r6, r2
 80062b4:	7021      	strb	r1, [r4, #0]
 80062b6:	7823      	ldrb	r3, [r4, #0]
 80062b8:	b173      	cbz	r3, 80062d8 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x74>
 80062ba:	1d39      	adds	r1, r7, #4
 80062bc:	f04f 0800 	mov.w	r8, #0
 80062c0:	f04f 0901 	mov.w	r9, #1
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	42b3      	cmp	r3, r6
 80062c8:	d07b      	beq.n	80063c2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x15e>
 80062ca:	2e00      	cmp	r6, #0
 80062cc:	d03f      	beq.n	800634e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xea>
 80062ce:	7833      	ldrb	r3, [r6, #0]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d03c      	beq.n	800634e <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xea>
 80062d4:	2301      	movs	r3, #1
 80062d6:	7033      	strb	r3, [r6, #0]
 80062d8:	4620      	mov	r0, r4
 80062da:	b003      	add	sp, #12
 80062dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062e0:	461d      	mov	r5, r3
 80062e2:	e7dd      	b.n	80062a0 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x3c>
 80062e4:	6861      	ldr	r1, [r4, #4]
 80062e6:	6888      	ldr	r0, [r1, #8]
 80062e8:	42a0      	cmp	r0, r4
 80062ea:	bf0c      	ite	eq
 80062ec:	608b      	streq	r3, [r1, #8]
 80062ee:	60cb      	strne	r3, [r1, #12]
 80062f0:	e7da      	b.n	80062a8 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x44>
 80062f2:	460e      	mov	r6, r1
 80062f4:	6865      	ldr	r5, [r4, #4]
 80062f6:	b106      	cbz	r6, 80062fa <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x96>
 80062f8:	6075      	str	r5, [r6, #4]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	42a3      	cmp	r3, r4
 80062fe:	d111      	bne.n	8006324 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xc0>
 8006300:	607e      	str	r6, [r7, #4]
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	42a3      	cmp	r3, r4
 8006306:	d103      	bne.n	8006310 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xac>
 8006308:	68e3      	ldr	r3, [r4, #12]
 800630a:	b993      	cbnz	r3, 8006332 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xce>
 800630c:	6863      	ldr	r3, [r4, #4]
 800630e:	60bb      	str	r3, [r7, #8]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	42a3      	cmp	r3, r4
 8006314:	d1cf      	bne.n	80062b6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
 8006316:	68a3      	ldr	r3, [r4, #8]
 8006318:	b993      	cbnz	r3, 8006340 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xdc>
 800631a:	6863      	ldr	r3, [r4, #4]
 800631c:	60fb      	str	r3, [r7, #12]
 800631e:	e7ca      	b.n	80062b6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
 8006320:	4616      	mov	r6, r2
 8006322:	e7e7      	b.n	80062f4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x90>
 8006324:	6863      	ldr	r3, [r4, #4]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	42a2      	cmp	r2, r4
 800632a:	bf0c      	ite	eq
 800632c:	609e      	streq	r6, [r3, #8]
 800632e:	60de      	strne	r6, [r3, #12]
 8006330:	e7e7      	b.n	8006302 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x9e>
 8006332:	4633      	mov	r3, r6
 8006334:	461a      	mov	r2, r3
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1fb      	bne.n	8006334 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xd0>
 800633c:	60ba      	str	r2, [r7, #8]
 800633e:	e7e7      	b.n	8006310 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xac>
 8006340:	4633      	mov	r3, r6
 8006342:	461a      	mov	r2, r3
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1fb      	bne.n	8006342 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0xde>
 800634a:	60fa      	str	r2, [r7, #12]
 800634c:	e7b3      	b.n	80062b6 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x52>
 800634e:	68a8      	ldr	r0, [r5, #8]
 8006350:	42b0      	cmp	r0, r6
 8006352:	d139      	bne.n	80063c8 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x164>
 8006354:	68e8      	ldr	r0, [r5, #12]
 8006356:	7803      	ldrb	r3, [r0, #0]
 8006358:	b943      	cbnz	r3, 800636c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x108>
 800635a:	f880 9000 	strb.w	r9, [r0]
 800635e:	4628      	mov	r0, r5
 8006360:	702b      	strb	r3, [r5, #0]
 8006362:	9101      	str	r1, [sp, #4]
 8006364:	f7ff fec9 	bl	80060fa <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8006368:	68e8      	ldr	r0, [r5, #12]
 800636a:	9901      	ldr	r1, [sp, #4]
 800636c:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 8006370:	b122      	cbz	r2, 800637c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x118>
 8006372:	f892 c000 	ldrb.w	ip, [r2]
 8006376:	f1bc 0f01 	cmp.w	ip, #1
 800637a:	d10b      	bne.n	8006394 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x130>
 800637c:	b123      	cbz	r3, 8006388 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x124>
 800637e:	f893 c000 	ldrb.w	ip, [r3]
 8006382:	f1bc 0f01 	cmp.w	ip, #1
 8006386:	d105      	bne.n	8006394 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x130>
 8006388:	686b      	ldr	r3, [r5, #4]
 800638a:	f880 8000 	strb.w	r8, [r0]
 800638e:	462e      	mov	r6, r5
 8006390:	461d      	mov	r5, r3
 8006392:	e797      	b.n	80062c4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x60>
 8006394:	b113      	cbz	r3, 800639c <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x138>
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d108      	bne.n	80063ae <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x14a>
 800639c:	2301      	movs	r3, #1
 800639e:	7013      	strb	r3, [r2, #0]
 80063a0:	2300      	movs	r3, #0
 80063a2:	7003      	strb	r3, [r0, #0]
 80063a4:	9101      	str	r1, [sp, #4]
 80063a6:	f7ff febd 	bl	8006124 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80063aa:	68e8      	ldr	r0, [r5, #12]
 80063ac:	9901      	ldr	r1, [sp, #4]
 80063ae:	782b      	ldrb	r3, [r5, #0]
 80063b0:	7003      	strb	r3, [r0, #0]
 80063b2:	68c3      	ldr	r3, [r0, #12]
 80063b4:	2201      	movs	r2, #1
 80063b6:	702a      	strb	r2, [r5, #0]
 80063b8:	b103      	cbz	r3, 80063bc <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x158>
 80063ba:	701a      	strb	r2, [r3, #0]
 80063bc:	4628      	mov	r0, r5
 80063be:	f7ff fe9c 	bl	80060fa <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80063c2:	2e00      	cmp	r6, #0
 80063c4:	d186      	bne.n	80062d4 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x70>
 80063c6:	e787      	b.n	80062d8 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x74>
 80063c8:	7803      	ldrb	r3, [r0, #0]
 80063ca:	b943      	cbnz	r3, 80063de <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x17a>
 80063cc:	f880 9000 	strb.w	r9, [r0]
 80063d0:	4628      	mov	r0, r5
 80063d2:	702b      	strb	r3, [r5, #0]
 80063d4:	9101      	str	r1, [sp, #4]
 80063d6:	f7ff fea5 	bl	8006124 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80063da:	68a8      	ldr	r0, [r5, #8]
 80063dc:	9901      	ldr	r1, [sp, #4]
 80063de:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80063e2:	b122      	cbz	r2, 80063ee <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x18a>
 80063e4:	f892 c000 	ldrb.w	ip, [r2]
 80063e8:	f1bc 0f01 	cmp.w	ip, #1
 80063ec:	d106      	bne.n	80063fc <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x198>
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d0ca      	beq.n	8006388 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x124>
 80063f2:	f893 c000 	ldrb.w	ip, [r3]
 80063f6:	f1bc 0f01 	cmp.w	ip, #1
 80063fa:	d0c5      	beq.n	8006388 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x124>
 80063fc:	b113      	cbz	r3, 8006404 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1a0>
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d108      	bne.n	8006416 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1b2>
 8006404:	2301      	movs	r3, #1
 8006406:	7013      	strb	r3, [r2, #0]
 8006408:	2300      	movs	r3, #0
 800640a:	7003      	strb	r3, [r0, #0]
 800640c:	9101      	str	r1, [sp, #4]
 800640e:	f7ff fe74 	bl	80060fa <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8006412:	68a8      	ldr	r0, [r5, #8]
 8006414:	9901      	ldr	r1, [sp, #4]
 8006416:	782b      	ldrb	r3, [r5, #0]
 8006418:	7003      	strb	r3, [r0, #0]
 800641a:	6883      	ldr	r3, [r0, #8]
 800641c:	2201      	movs	r2, #1
 800641e:	702a      	strb	r2, [r5, #0]
 8006420:	b103      	cbz	r3, 8006424 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x1c0>
 8006422:	701a      	strb	r2, [r3, #0]
 8006424:	4628      	mov	r0, r5
 8006426:	f7ff fe7d 	bl	8006124 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 800642a:	e7ca      	b.n	80063c2 <_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_+0x15e>

0800642c <_ZSt17__throw_bad_allocv>:
 800642c:	b508      	push	{r3, lr}
 800642e:	f000 f80b 	bl	8006448 <abort>

08006432 <_ZSt25__throw_bad_function_callv>:
 8006432:	b508      	push	{r3, lr}
 8006434:	f000 f808 	bl	8006448 <abort>

08006438 <_ZSt15get_new_handlerv>:
 8006438:	4b02      	ldr	r3, [pc, #8]	; (8006444 <_ZSt15get_new_handlerv+0xc>)
 800643a:	6818      	ldr	r0, [r3, #0]
 800643c:	f3bf 8f5b 	dmb	ish
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	200001b8 	.word	0x200001b8

08006448 <abort>:
 8006448:	b508      	push	{r3, lr}
 800644a:	2006      	movs	r0, #6
 800644c:	f000 f95e 	bl	800670c <raise>
 8006450:	2001      	movs	r0, #1
 8006452:	f7fb ff7f 	bl	8002354 <_exit>
	...

08006458 <__errno>:
 8006458:	4b01      	ldr	r3, [pc, #4]	; (8006460 <__errno+0x8>)
 800645a:	6818      	ldr	r0, [r3, #0]
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	2000000c 	.word	0x2000000c

08006464 <__libc_init_array>:
 8006464:	b570      	push	{r4, r5, r6, lr}
 8006466:	4d0d      	ldr	r5, [pc, #52]	; (800649c <__libc_init_array+0x38>)
 8006468:	4c0d      	ldr	r4, [pc, #52]	; (80064a0 <__libc_init_array+0x3c>)
 800646a:	1b64      	subs	r4, r4, r5
 800646c:	10a4      	asrs	r4, r4, #2
 800646e:	2600      	movs	r6, #0
 8006470:	42a6      	cmp	r6, r4
 8006472:	d109      	bne.n	8006488 <__libc_init_array+0x24>
 8006474:	4d0b      	ldr	r5, [pc, #44]	; (80064a4 <__libc_init_array+0x40>)
 8006476:	4c0c      	ldr	r4, [pc, #48]	; (80064a8 <__libc_init_array+0x44>)
 8006478:	f000 f972 	bl	8006760 <_init>
 800647c:	1b64      	subs	r4, r4, r5
 800647e:	10a4      	asrs	r4, r4, #2
 8006480:	2600      	movs	r6, #0
 8006482:	42a6      	cmp	r6, r4
 8006484:	d105      	bne.n	8006492 <__libc_init_array+0x2e>
 8006486:	bd70      	pop	{r4, r5, r6, pc}
 8006488:	f855 3b04 	ldr.w	r3, [r5], #4
 800648c:	4798      	blx	r3
 800648e:	3601      	adds	r6, #1
 8006490:	e7ee      	b.n	8006470 <__libc_init_array+0xc>
 8006492:	f855 3b04 	ldr.w	r3, [r5], #4
 8006496:	4798      	blx	r3
 8006498:	3601      	adds	r6, #1
 800649a:	e7f2      	b.n	8006482 <__libc_init_array+0x1e>
 800649c:	080067c0 	.word	0x080067c0
 80064a0:	080067c0 	.word	0x080067c0
 80064a4:	080067c0 	.word	0x080067c0
 80064a8:	080067c8 	.word	0x080067c8

080064ac <malloc>:
 80064ac:	4b02      	ldr	r3, [pc, #8]	; (80064b8 <malloc+0xc>)
 80064ae:	4601      	mov	r1, r0
 80064b0:	6818      	ldr	r0, [r3, #0]
 80064b2:	f000 b87f 	b.w	80065b4 <_malloc_r>
 80064b6:	bf00      	nop
 80064b8:	2000000c 	.word	0x2000000c

080064bc <free>:
 80064bc:	4b02      	ldr	r3, [pc, #8]	; (80064c8 <free+0xc>)
 80064be:	4601      	mov	r1, r0
 80064c0:	6818      	ldr	r0, [r3, #0]
 80064c2:	f000 b80b 	b.w	80064dc <_free_r>
 80064c6:	bf00      	nop
 80064c8:	2000000c 	.word	0x2000000c

080064cc <memset>:
 80064cc:	4402      	add	r2, r0
 80064ce:	4603      	mov	r3, r0
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d100      	bne.n	80064d6 <memset+0xa>
 80064d4:	4770      	bx	lr
 80064d6:	f803 1b01 	strb.w	r1, [r3], #1
 80064da:	e7f9      	b.n	80064d0 <memset+0x4>

080064dc <_free_r>:
 80064dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064de:	2900      	cmp	r1, #0
 80064e0:	d044      	beq.n	800656c <_free_r+0x90>
 80064e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064e6:	9001      	str	r0, [sp, #4]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f1a1 0404 	sub.w	r4, r1, #4
 80064ee:	bfb8      	it	lt
 80064f0:	18e4      	addlt	r4, r4, r3
 80064f2:	f000 f927 	bl	8006744 <__malloc_lock>
 80064f6:	4a1e      	ldr	r2, [pc, #120]	; (8006570 <_free_r+0x94>)
 80064f8:	9801      	ldr	r0, [sp, #4]
 80064fa:	6813      	ldr	r3, [r2, #0]
 80064fc:	b933      	cbnz	r3, 800650c <_free_r+0x30>
 80064fe:	6063      	str	r3, [r4, #4]
 8006500:	6014      	str	r4, [r2, #0]
 8006502:	b003      	add	sp, #12
 8006504:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006508:	f000 b922 	b.w	8006750 <__malloc_unlock>
 800650c:	42a3      	cmp	r3, r4
 800650e:	d908      	bls.n	8006522 <_free_r+0x46>
 8006510:	6825      	ldr	r5, [r4, #0]
 8006512:	1961      	adds	r1, r4, r5
 8006514:	428b      	cmp	r3, r1
 8006516:	bf01      	itttt	eq
 8006518:	6819      	ldreq	r1, [r3, #0]
 800651a:	685b      	ldreq	r3, [r3, #4]
 800651c:	1949      	addeq	r1, r1, r5
 800651e:	6021      	streq	r1, [r4, #0]
 8006520:	e7ed      	b.n	80064fe <_free_r+0x22>
 8006522:	461a      	mov	r2, r3
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	b10b      	cbz	r3, 800652c <_free_r+0x50>
 8006528:	42a3      	cmp	r3, r4
 800652a:	d9fa      	bls.n	8006522 <_free_r+0x46>
 800652c:	6811      	ldr	r1, [r2, #0]
 800652e:	1855      	adds	r5, r2, r1
 8006530:	42a5      	cmp	r5, r4
 8006532:	d10b      	bne.n	800654c <_free_r+0x70>
 8006534:	6824      	ldr	r4, [r4, #0]
 8006536:	4421      	add	r1, r4
 8006538:	1854      	adds	r4, r2, r1
 800653a:	42a3      	cmp	r3, r4
 800653c:	6011      	str	r1, [r2, #0]
 800653e:	d1e0      	bne.n	8006502 <_free_r+0x26>
 8006540:	681c      	ldr	r4, [r3, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	6053      	str	r3, [r2, #4]
 8006546:	4421      	add	r1, r4
 8006548:	6011      	str	r1, [r2, #0]
 800654a:	e7da      	b.n	8006502 <_free_r+0x26>
 800654c:	d902      	bls.n	8006554 <_free_r+0x78>
 800654e:	230c      	movs	r3, #12
 8006550:	6003      	str	r3, [r0, #0]
 8006552:	e7d6      	b.n	8006502 <_free_r+0x26>
 8006554:	6825      	ldr	r5, [r4, #0]
 8006556:	1961      	adds	r1, r4, r5
 8006558:	428b      	cmp	r3, r1
 800655a:	bf04      	itt	eq
 800655c:	6819      	ldreq	r1, [r3, #0]
 800655e:	685b      	ldreq	r3, [r3, #4]
 8006560:	6063      	str	r3, [r4, #4]
 8006562:	bf04      	itt	eq
 8006564:	1949      	addeq	r1, r1, r5
 8006566:	6021      	streq	r1, [r4, #0]
 8006568:	6054      	str	r4, [r2, #4]
 800656a:	e7ca      	b.n	8006502 <_free_r+0x26>
 800656c:	b003      	add	sp, #12
 800656e:	bd30      	pop	{r4, r5, pc}
 8006570:	200001bc 	.word	0x200001bc

08006574 <sbrk_aligned>:
 8006574:	b570      	push	{r4, r5, r6, lr}
 8006576:	4e0e      	ldr	r6, [pc, #56]	; (80065b0 <sbrk_aligned+0x3c>)
 8006578:	460c      	mov	r4, r1
 800657a:	6831      	ldr	r1, [r6, #0]
 800657c:	4605      	mov	r5, r0
 800657e:	b911      	cbnz	r1, 8006586 <sbrk_aligned+0x12>
 8006580:	f000 f88c 	bl	800669c <_sbrk_r>
 8006584:	6030      	str	r0, [r6, #0]
 8006586:	4621      	mov	r1, r4
 8006588:	4628      	mov	r0, r5
 800658a:	f000 f887 	bl	800669c <_sbrk_r>
 800658e:	1c43      	adds	r3, r0, #1
 8006590:	d00a      	beq.n	80065a8 <sbrk_aligned+0x34>
 8006592:	1cc4      	adds	r4, r0, #3
 8006594:	f024 0403 	bic.w	r4, r4, #3
 8006598:	42a0      	cmp	r0, r4
 800659a:	d007      	beq.n	80065ac <sbrk_aligned+0x38>
 800659c:	1a21      	subs	r1, r4, r0
 800659e:	4628      	mov	r0, r5
 80065a0:	f000 f87c 	bl	800669c <_sbrk_r>
 80065a4:	3001      	adds	r0, #1
 80065a6:	d101      	bne.n	80065ac <sbrk_aligned+0x38>
 80065a8:	f04f 34ff 	mov.w	r4, #4294967295
 80065ac:	4620      	mov	r0, r4
 80065ae:	bd70      	pop	{r4, r5, r6, pc}
 80065b0:	200001c0 	.word	0x200001c0

080065b4 <_malloc_r>:
 80065b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065b8:	1ccd      	adds	r5, r1, #3
 80065ba:	f025 0503 	bic.w	r5, r5, #3
 80065be:	3508      	adds	r5, #8
 80065c0:	2d0c      	cmp	r5, #12
 80065c2:	bf38      	it	cc
 80065c4:	250c      	movcc	r5, #12
 80065c6:	2d00      	cmp	r5, #0
 80065c8:	4607      	mov	r7, r0
 80065ca:	db01      	blt.n	80065d0 <_malloc_r+0x1c>
 80065cc:	42a9      	cmp	r1, r5
 80065ce:	d905      	bls.n	80065dc <_malloc_r+0x28>
 80065d0:	230c      	movs	r3, #12
 80065d2:	603b      	str	r3, [r7, #0]
 80065d4:	2600      	movs	r6, #0
 80065d6:	4630      	mov	r0, r6
 80065d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065dc:	4e2e      	ldr	r6, [pc, #184]	; (8006698 <_malloc_r+0xe4>)
 80065de:	f000 f8b1 	bl	8006744 <__malloc_lock>
 80065e2:	6833      	ldr	r3, [r6, #0]
 80065e4:	461c      	mov	r4, r3
 80065e6:	bb34      	cbnz	r4, 8006636 <_malloc_r+0x82>
 80065e8:	4629      	mov	r1, r5
 80065ea:	4638      	mov	r0, r7
 80065ec:	f7ff ffc2 	bl	8006574 <sbrk_aligned>
 80065f0:	1c43      	adds	r3, r0, #1
 80065f2:	4604      	mov	r4, r0
 80065f4:	d14d      	bne.n	8006692 <_malloc_r+0xde>
 80065f6:	6834      	ldr	r4, [r6, #0]
 80065f8:	4626      	mov	r6, r4
 80065fa:	2e00      	cmp	r6, #0
 80065fc:	d140      	bne.n	8006680 <_malloc_r+0xcc>
 80065fe:	6823      	ldr	r3, [r4, #0]
 8006600:	4631      	mov	r1, r6
 8006602:	4638      	mov	r0, r7
 8006604:	eb04 0803 	add.w	r8, r4, r3
 8006608:	f000 f848 	bl	800669c <_sbrk_r>
 800660c:	4580      	cmp	r8, r0
 800660e:	d13a      	bne.n	8006686 <_malloc_r+0xd2>
 8006610:	6821      	ldr	r1, [r4, #0]
 8006612:	3503      	adds	r5, #3
 8006614:	1a6d      	subs	r5, r5, r1
 8006616:	f025 0503 	bic.w	r5, r5, #3
 800661a:	3508      	adds	r5, #8
 800661c:	2d0c      	cmp	r5, #12
 800661e:	bf38      	it	cc
 8006620:	250c      	movcc	r5, #12
 8006622:	4629      	mov	r1, r5
 8006624:	4638      	mov	r0, r7
 8006626:	f7ff ffa5 	bl	8006574 <sbrk_aligned>
 800662a:	3001      	adds	r0, #1
 800662c:	d02b      	beq.n	8006686 <_malloc_r+0xd2>
 800662e:	6823      	ldr	r3, [r4, #0]
 8006630:	442b      	add	r3, r5
 8006632:	6023      	str	r3, [r4, #0]
 8006634:	e00e      	b.n	8006654 <_malloc_r+0xa0>
 8006636:	6822      	ldr	r2, [r4, #0]
 8006638:	1b52      	subs	r2, r2, r5
 800663a:	d41e      	bmi.n	800667a <_malloc_r+0xc6>
 800663c:	2a0b      	cmp	r2, #11
 800663e:	d916      	bls.n	800666e <_malloc_r+0xba>
 8006640:	1961      	adds	r1, r4, r5
 8006642:	42a3      	cmp	r3, r4
 8006644:	6025      	str	r5, [r4, #0]
 8006646:	bf18      	it	ne
 8006648:	6059      	strne	r1, [r3, #4]
 800664a:	6863      	ldr	r3, [r4, #4]
 800664c:	bf08      	it	eq
 800664e:	6031      	streq	r1, [r6, #0]
 8006650:	5162      	str	r2, [r4, r5]
 8006652:	604b      	str	r3, [r1, #4]
 8006654:	4638      	mov	r0, r7
 8006656:	f104 060b 	add.w	r6, r4, #11
 800665a:	f000 f879 	bl	8006750 <__malloc_unlock>
 800665e:	f026 0607 	bic.w	r6, r6, #7
 8006662:	1d23      	adds	r3, r4, #4
 8006664:	1af2      	subs	r2, r6, r3
 8006666:	d0b6      	beq.n	80065d6 <_malloc_r+0x22>
 8006668:	1b9b      	subs	r3, r3, r6
 800666a:	50a3      	str	r3, [r4, r2]
 800666c:	e7b3      	b.n	80065d6 <_malloc_r+0x22>
 800666e:	6862      	ldr	r2, [r4, #4]
 8006670:	42a3      	cmp	r3, r4
 8006672:	bf0c      	ite	eq
 8006674:	6032      	streq	r2, [r6, #0]
 8006676:	605a      	strne	r2, [r3, #4]
 8006678:	e7ec      	b.n	8006654 <_malloc_r+0xa0>
 800667a:	4623      	mov	r3, r4
 800667c:	6864      	ldr	r4, [r4, #4]
 800667e:	e7b2      	b.n	80065e6 <_malloc_r+0x32>
 8006680:	4634      	mov	r4, r6
 8006682:	6876      	ldr	r6, [r6, #4]
 8006684:	e7b9      	b.n	80065fa <_malloc_r+0x46>
 8006686:	230c      	movs	r3, #12
 8006688:	603b      	str	r3, [r7, #0]
 800668a:	4638      	mov	r0, r7
 800668c:	f000 f860 	bl	8006750 <__malloc_unlock>
 8006690:	e7a1      	b.n	80065d6 <_malloc_r+0x22>
 8006692:	6025      	str	r5, [r4, #0]
 8006694:	e7de      	b.n	8006654 <_malloc_r+0xa0>
 8006696:	bf00      	nop
 8006698:	200001bc 	.word	0x200001bc

0800669c <_sbrk_r>:
 800669c:	b538      	push	{r3, r4, r5, lr}
 800669e:	4d06      	ldr	r5, [pc, #24]	; (80066b8 <_sbrk_r+0x1c>)
 80066a0:	2300      	movs	r3, #0
 80066a2:	4604      	mov	r4, r0
 80066a4:	4608      	mov	r0, r1
 80066a6:	602b      	str	r3, [r5, #0]
 80066a8:	f7fb fe5e 	bl	8002368 <_sbrk>
 80066ac:	1c43      	adds	r3, r0, #1
 80066ae:	d102      	bne.n	80066b6 <_sbrk_r+0x1a>
 80066b0:	682b      	ldr	r3, [r5, #0]
 80066b2:	b103      	cbz	r3, 80066b6 <_sbrk_r+0x1a>
 80066b4:	6023      	str	r3, [r4, #0]
 80066b6:	bd38      	pop	{r3, r4, r5, pc}
 80066b8:	200001c4 	.word	0x200001c4

080066bc <_raise_r>:
 80066bc:	291f      	cmp	r1, #31
 80066be:	b538      	push	{r3, r4, r5, lr}
 80066c0:	4604      	mov	r4, r0
 80066c2:	460d      	mov	r5, r1
 80066c4:	d904      	bls.n	80066d0 <_raise_r+0x14>
 80066c6:	2316      	movs	r3, #22
 80066c8:	6003      	str	r3, [r0, #0]
 80066ca:	f04f 30ff 	mov.w	r0, #4294967295
 80066ce:	bd38      	pop	{r3, r4, r5, pc}
 80066d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80066d2:	b112      	cbz	r2, 80066da <_raise_r+0x1e>
 80066d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80066d8:	b94b      	cbnz	r3, 80066ee <_raise_r+0x32>
 80066da:	4620      	mov	r0, r4
 80066dc:	f000 f830 	bl	8006740 <_getpid_r>
 80066e0:	462a      	mov	r2, r5
 80066e2:	4601      	mov	r1, r0
 80066e4:	4620      	mov	r0, r4
 80066e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066ea:	f000 b817 	b.w	800671c <_kill_r>
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d00a      	beq.n	8006708 <_raise_r+0x4c>
 80066f2:	1c59      	adds	r1, r3, #1
 80066f4:	d103      	bne.n	80066fe <_raise_r+0x42>
 80066f6:	2316      	movs	r3, #22
 80066f8:	6003      	str	r3, [r0, #0]
 80066fa:	2001      	movs	r0, #1
 80066fc:	e7e7      	b.n	80066ce <_raise_r+0x12>
 80066fe:	2400      	movs	r4, #0
 8006700:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006704:	4628      	mov	r0, r5
 8006706:	4798      	blx	r3
 8006708:	2000      	movs	r0, #0
 800670a:	e7e0      	b.n	80066ce <_raise_r+0x12>

0800670c <raise>:
 800670c:	4b02      	ldr	r3, [pc, #8]	; (8006718 <raise+0xc>)
 800670e:	4601      	mov	r1, r0
 8006710:	6818      	ldr	r0, [r3, #0]
 8006712:	f7ff bfd3 	b.w	80066bc <_raise_r>
 8006716:	bf00      	nop
 8006718:	2000000c 	.word	0x2000000c

0800671c <_kill_r>:
 800671c:	b538      	push	{r3, r4, r5, lr}
 800671e:	4d07      	ldr	r5, [pc, #28]	; (800673c <_kill_r+0x20>)
 8006720:	2300      	movs	r3, #0
 8006722:	4604      	mov	r4, r0
 8006724:	4608      	mov	r0, r1
 8006726:	4611      	mov	r1, r2
 8006728:	602b      	str	r3, [r5, #0]
 800672a:	f7fb fe03 	bl	8002334 <_kill>
 800672e:	1c43      	adds	r3, r0, #1
 8006730:	d102      	bne.n	8006738 <_kill_r+0x1c>
 8006732:	682b      	ldr	r3, [r5, #0]
 8006734:	b103      	cbz	r3, 8006738 <_kill_r+0x1c>
 8006736:	6023      	str	r3, [r4, #0]
 8006738:	bd38      	pop	{r3, r4, r5, pc}
 800673a:	bf00      	nop
 800673c:	200001c4 	.word	0x200001c4

08006740 <_getpid_r>:
 8006740:	f7fb bdf0 	b.w	8002324 <_getpid>

08006744 <__malloc_lock>:
 8006744:	4801      	ldr	r0, [pc, #4]	; (800674c <__malloc_lock+0x8>)
 8006746:	f000 b809 	b.w	800675c <__retarget_lock_acquire_recursive>
 800674a:	bf00      	nop
 800674c:	200001c8 	.word	0x200001c8

08006750 <__malloc_unlock>:
 8006750:	4801      	ldr	r0, [pc, #4]	; (8006758 <__malloc_unlock+0x8>)
 8006752:	f000 b804 	b.w	800675e <__retarget_lock_release_recursive>
 8006756:	bf00      	nop
 8006758:	200001c8 	.word	0x200001c8

0800675c <__retarget_lock_acquire_recursive>:
 800675c:	4770      	bx	lr

0800675e <__retarget_lock_release_recursive>:
 800675e:	4770      	bx	lr

08006760 <_init>:
 8006760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006762:	bf00      	nop
 8006764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006766:	bc08      	pop	{r3}
 8006768:	469e      	mov	lr, r3
 800676a:	4770      	bx	lr

0800676c <_fini>:
 800676c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676e:	bf00      	nop
 8006770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006772:	bc08      	pop	{r3}
 8006774:	469e      	mov	lr, r3
 8006776:	4770      	bx	lr
